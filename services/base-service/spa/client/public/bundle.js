/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/elements/fin-app.js":
/*!************************************!*\
  !*** ./public/elements/fin-app.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FinApp)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _fin_app_tpl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fin-app.tpl.js */ "./public/elements/fin-app.tpl.js");
/* harmony import */ var _elements_pages_app_home_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../elements/pages/app-home.js */ "./public/elements/pages/app-home.js");
/* harmony import */ var _elements_pages_app_work_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../elements/pages/app-work.js */ "./public/elements/pages/app-work.js");
/* harmony import */ var _ucd_lib_cork_app_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ucd-lib/cork-app-utils */ "./public/node_modules/@ucd-lib/cork-app-utils/index.js");
/* harmony import */ var _ucd_lib_theme_elements_brand_ucd_theme_header_ucd_theme_header_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ucd-lib/theme-elements/brand/ucd-theme-header/ucd-theme-header.js */ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-header/ucd-theme-header.js");
/* harmony import */ var _ucd_lib_theme_elements_brand_ucd_theme_primary_nav_ucd_theme_primary_nav_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ucd-lib/theme-elements/brand/ucd-theme-primary-nav/ucd-theme-primary-nav.js */ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-primary-nav/ucd-theme-primary-nav.js");
/* harmony import */ var _ucd_lib_theme_elements_brand_ucd_theme_search_popup_ucd_theme_search_popup_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ucd-lib/theme-elements/brand/ucd-theme-search-popup/ucd-theme-search-popup.js */ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-search-popup/ucd-theme-search-popup.js");
/* harmony import */ var _ucd_lib_theme_elements_brand_ucd_theme_search_form_ucd_theme_search_form_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ucd-lib/theme-elements/brand/ucd-theme-search-form/ucd-theme-search-form.js */ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-search-form/ucd-theme-search-form.js");
/* harmony import */ var _ucd_lib_theme_elements_brand_ucd_theme_quick_links_ucd_theme_quick_links_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ucd-lib/theme-elements/brand/ucd-theme-quick-links/ucd-theme-quick-links.js */ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-quick-links/ucd-theme-quick-links.js");
/* harmony import */ var _ucd_lib_theme_elements_ucdlib_ucdlib_pages_ucdlib_pages_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ucd-lib/theme-elements/ucdlib/ucdlib-pages/ucdlib-pages.js */ "./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-pages/ucdlib-pages.js");



// import '@ucd-lib/theme-elements/brand/ucd-theme-header/ucd-theme-header.js'



// sets globals Mixin and EventInterface









class FinApp extends Mixin(lit__WEBPACK_IMPORTED_MODULE_0__.LitElement)
  .with(LitCorkUtils) {

  static get properties() {
    return {
      page: { type: String },
      imageSrc: { type: String },
      imageAltText: { type: String },
    }
  }

  constructor() {
    super();
    this.appRoutes = APP_CONFIG.appRoutes;
    this._injectModel('AppStateModel');

    this.render = _fin_app_tpl_js__WEBPACK_IMPORTED_MODULE_1__.render.bind(this);
  }

  /**
   * @method _onAppStateUpdate
   * @description bound to AppStateModel app-state-update event
   *
   * @param {Object} e
   */
   async _onAppStateUpdate(e) {
    debugger;
    if ( e.location.query && e.location.query.s !== undefined ) {
      this.isSearch = true;
      this.textQuery = e.location.query.s;
    }
    else {
      this.textQuery = "";
      this.isSearch = false;
    }

    let page = e.location.page;
    if( this.page === page ) return;
    this.page = page;

    window.scrollTo(0, 0);
    this.firstAppStateUpdate = false;
  }

}

customElements.define('fin-app', FinApp);


/***/ }),

/***/ "./public/elements/fin-app.tpl.js":
/*!****************************************!*\
  !*** ./public/elements/fin-app.tpl.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render),
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _styles_shared_styles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./styles/shared-styles */ "./public/elements/styles/shared-styles.js");




function styles() {
  const elementStyles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`
    :host {
      display: block;
    }
  `;

  return [
    _styles_shared_styles__WEBPACK_IMPORTED_MODULE_1__.sharedStyles,
    elementStyles
  ];
}

function render() {
return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
  <!--
    Required for AppStateModel
    @ucd-lib/app-state-model imports this element
  -->
  <app-route .appRoutes="${this.appRoutes}"></app-route>

  <ucd-theme-header
    site-name="Aggie Experts"
    prevent-fixed>

    <ucd-theme-primary-nav>
      <a href=#>People</a>
      <a href="#">Subjects</a>
      <a href="/work">Works</a>
      <a href="#">Grants</a>
    </ucd-theme-primary-nav>

    <ucd-theme-search-popup>
      <ucd-theme-search-form
        @search="${e => console.log(e.detail.searchTerm)}">
      </ucd-theme-search-form>
    </ucd-theme-search-popup>

<!--
    <ucd-theme-quick-links
        title="My Account"
        style-modifiers="highlight"
        @item-click="${e => console.log('@item-click', e.detail)}"
        @toggle="${e => console.log('@toggle', e.detail)}">
      <a href="/auth/login?redirectUrl=/">Login</a>
    </ucd-theme-quick-links> -->

    <ucd-theme-quick-links
        title="Sign In"
        style-modifiers="highlight"
        @item-click="${e => console.log('@item-click', e.detail)}"
        @toggle="${e => console.log('@toggle', e.detail)}">
      <a href="/auth/login?redirectUrl=/">Login</a>
    </ucd-theme-quick-links>


  </ucd-theme-header>
  <div class="main-content">
    <ucdlib-pages
      selected="${this.page}"
      selectedAttribute="visible">
      <div id="loading" ?hidden="${this.page}">
        <img src="/images/logos/logo-icon.svg" style="max-width: 128px" />
        <div class="loading-dots">
          <h1 class="dot one">.</h1>
          <h1 class="dot two">.</h1>
          <h1 class="dot three">.</h1>
        </div>
      </div>
      <app-home id="home"></app-home>
      <app-work id="work"></app-work>
      <app-person id="person"></app-person>
      <app-grant id="grant"></app-grant>
    </ucdlib-pages>
  </div>
`;}


/***/ }),

/***/ "./public/elements/pages/app-home.js":
/*!*******************************************!*\
  !*** ./public/elements/pages/app-home.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppHome)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _app_home_tpl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app-home.tpl.js */ "./public/elements/pages/app-home.tpl.js");
/* harmony import */ var _ucd_lib_cork_app_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ucd-lib/cork-app-utils */ "./public/node_modules/@ucd-lib/cork-app-utils/index.js");



// sets globals Mixin and EventInterface


class AppHome extends Mixin(lit__WEBPACK_IMPORTED_MODULE_0__.LitElement)
  .with(LitCorkUtils) {

  static get properties() {
    return {
      // page: { type: String },
      // imageSrc: { type: String },
      // imageAltText: { type: String },
    }
  }

  constructor() {
    super();
    this._injectModel('AppStateModel');

    this.render = _app_home_tpl_js__WEBPACK_IMPORTED_MODULE_1__.render.bind(this);
  }

}

customElements.define('app-home', AppHome);


/***/ }),

/***/ "./public/elements/pages/app-home.tpl.js":
/*!***********************************************!*\
  !*** ./public/elements/pages/app-home.tpl.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _styles_shared_styles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../styles/shared-styles */ "./public/elements/styles/shared-styles.js");




function render() {
return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
  <style>
    ${_styles_shared_styles__WEBPACK_IMPORTED_MODULE_1__.sharedStyles}
    :host {
      display: block;
    }

    .hero-main {
      background: url('../images/ae-watercolor-feature.jpg');
      width: 100%;
      min-height: 500px;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      background-position: bottom;
      background-repeat: no-repeat;
      background-size: cover;
    }

    .color-light {
      color: white;
    }

    h1 {
      color: var(--color-aggie-gold);
      margin-bottom: 0.5rem;
    }

    .content {
      width: 80%;
      margin: 0 auto;
    }
  </style>

  <div class="hero-main site-frame">
    <div class="content">
      <h1>Discover Academic Excellence</h1>
      <div class="sub-heading h4 color-light">
        Aggie Experts facilitates expert collaboration and research discovery across all disciplines at UC Davis.
      </div>
      <app-search-box
        id="searchBox"
        @search="${this._onSearch}"
        placeholder="search">
        <!-- <iron-icon icon="fin-icons:search" class="search-icon" slot="button-content"></iron-icon> -->

      </app-search-box>

      <div style="padding-top: 1.5rem;">
        <a href="/fcrepo/rest" style="color: white;">Explore Fedora</a> <span style="color: white; padding-left: 0.3rem"> (must be signed in)</span>

      </div>
    </div>
  </div>



`;}


/***/ }),

/***/ "./public/elements/pages/app-work.js":
/*!*******************************************!*\
  !*** ./public/elements/pages/app-work.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AppWork)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _app_work_tpl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app-work.tpl.js */ "./public/elements/pages/app-work.tpl.js");
/* harmony import */ var _ucd_lib_cork_app_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ucd-lib/cork-app-utils */ "./public/node_modules/@ucd-lib/cork-app-utils/index.js");
/* harmony import */ var _ucd_lib_theme_elements_ucdlib_ucdlib_icon_ucdlib_icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ucd-lib/theme-elements/ucdlib/ucdlib-icon/ucdlib-icon */ "./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-icon/ucdlib-icon.js");
/* harmony import */ var _utils_app_icons_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/app-icons.js */ "./public/elements/utils/app-icons.js");



// sets globals Mixin and EventInterface





class AppWork extends Mixin(lit__WEBPACK_IMPORTED_MODULE_0__.LitElement)
  .with(LitCorkUtils) {

  static get properties() {
    return {
      workId : { type : String },
      work : { type : Object },
    }
  }

  constructor() {
    super();
    this._injectModel('AppStateModel', 'WorkModel');

    this.render = _app_work_tpl_js__WEBPACK_IMPORTED_MODULE_1__.render.bind(this);
  }

  async firstUpdated() {
    if( this.workId && this.workId === '/ark:/87287/d7mh2m/publication/1765066' ) return;

    this._onAppStateUpdate(await this.AppStateModel.get());
  }

  async _onAppStateUpdate(e) {
    if( e.location.page !== 'work' ) return;

    // TEMP hack
    this.workId = '/ark:/87287/d7mh2m/publication/1765066';
    await this.WorkModel.get(this.workId);
  }

  _onWorkUpdate(e) {
    if( e.state !== 'loaded' ) return;

    this.workId = e.id;
    this.work = e.payload;

    debugger;

  }

}

customElements.define('app-work', AppWork);


/***/ }),

/***/ "./public/elements/pages/app-work.tpl.js":
/*!***********************************************!*\
  !*** ./public/elements/pages/app-work.tpl.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _styles_shared_styles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../styles/shared-styles */ "./public/elements/styles/shared-styles.js");




function render() {
return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
  <style>
    ${_styles_shared_styles__WEBPACK_IMPORTED_MODULE_1__.sharedStyles}
    :host {
      display: block;
    }

    .hero-main {
      background: url('../images/watercolor-sage-solid.jpg');
      background-size: 100% auto;
      background-color: #F2FAF6;
      width: 100%;

      /* min-height: 500px;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      background-position: bottom;
      background-repeat: no-repeat;
      background-size: cover; */
    }

    .color-light {
      color: white;
    }

    .content {
      width: 100%;
      margin: 0 auto;
      min-height: 700px;
    }

    .main-content {
      width: 60%;
      /* width: 53.5rem; */
      margin: 0 auto;
      padding-top: 2.38rem;
    }

    .hero-text {
      /* display: flex; */
      width: 89.1875rem;
      padding: 2.625rem 2.625rem 4.1875rem 2.625rem;
      /* align-items: flex-start;
      align-content: flex-start; */
      /* gap: 1.1875rem 1.25rem; */
      /* flex-wrap: wrap; */
    }

    .article span {
      color: var(--color-black-60);
      padding-left: .5rem;
      font-size: 1rem;
    }

    .hero-text .article {
      display: flex;
      align-items: center;
    }

    h1 {
      margin-top: .5rem;
      margin-bottom: 0;
      padding-bottom: 0;
      color: var(--color-aggie-blue);
    }

    .authors a {
      color: var(--color-aggie-blue);
    }

    .authors {
      margin-bottom: 0;
      margin-top: 0.5rem;
    }

    svg {
      fill: var(--color-sage);
    }

    .main-content .article {
      display: flex;
      align-items: center;
      margin-bottom: 0;
    }

    .main-content .article svg {
      font-size: 2rem;
    }

    .main-content svg {
      fill: var(--color-aggie-blue-60);
    }

    .main-content h2 {
      padding: 0 0 0 1rem;
      margin-bottom: 0;
      margin-top: 0;
      color: var(--color-black-60);
    }

    .main-content .abstract {
      margin-top: 2.38rem;
    }

    .seperator {
      /* border-top: 4px dotted var(--color-sage); */
      display: block;
      height: 4px;
      border: 0;
      border-top: 4px dotted var(--color-sage);
      /* margin: 1em 0; */
      padding: 0;
      margin: 0.625rem 0;
    }

    .full-text h4,
    .abstract h4,
    .published h4 {
      margin: 0.7rem 0;
    }

    .full-text .link-row {
      display: flex;
      align-items: center;
      line-height: 2rem;
    }

    .full-text .link-row svg {
      min-width: 25px;
    }

    .full-text .link-row span {
      padding-left: 0.625rem;
    }

  </style>

  <div class="content">
    <div class="hero-main site-frame">
      <div class="hero-text">
        <div class="article">
        <svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M249.6 471.5c10.8 3.8 22.4-4.1 22.4-15.5V78.6c0-4.2-1.6-8.4-5-11C247.4 52 202.4 32 144 32C93.5 32 46.3 45.3 18.1 56.1C6.8 60.5 0 71.7 0 83.8V454.1c0 11.9 12.8 20.2 24.1 16.5C55.6 460.1 105.5 448 144 448c33.9 0 79 14 105.6 23.5zm76.8 0C353 462 398.1 448 432 448c38.5 0 88.4 12.1 119.9 22.6c11.3 3.8 24.1-4.6 24.1-16.5V83.8c0-12.1-6.8-23.3-18.1-27.6C529.7 45.3 482.5 32 432 32c-58.4 0-103.4 20-123 35.6c-3.3 2.6-5 6.8-5 11V456c0 11.4 11.7 19.3 22.4 15.5z"/></svg>
        <span>ARTICLE</span>
        </div>
        <h1>Publication Name</h1>
        <h4 class="authors">
          <span><a href="">Author UCD</a></span>,
          <span>Author</span>,
          <span>Author</span>,
          <span><a href="">Author UCD</a></span>,
          <span>Author</span>
        </h4>
      </div>
    </div>

    <div class="main-content">
      <div class="article">
        <svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M249.6 471.5c10.8 3.8 22.4-4.1 22.4-15.5V78.6c0-4.2-1.6-8.4-5-11C247.4 52 202.4 32 144 32C93.5 32 46.3 45.3 18.1 56.1C6.8 60.5 0 71.7 0 83.8V454.1c0 11.9 12.8 20.2 24.1 16.5C55.6 460.1 105.5 448 144 448c33.9 0 79 14 105.6 23.5zm76.8 0C353 462 398.1 448 432 448c38.5 0 88.4 12.1 119.9 22.6c11.3 3.8 24.1-4.6 24.1-16.5V83.8c0-12.1-6.8-23.3-18.1-27.6C529.7 45.3 482.5 32 432 32c-58.4 0-103.4 20-123 35.6c-3.3 2.6-5 6.8-5 11V456c0 11.4 11.7 19.3 22.4 15.5z"/></svg>
        <h2>About the Article</h2>
      </div>
      <hr class="seperator">

      <div class="full-text">
        <h4>Full Text</h4>
        <div class="link-row">
          <!-- <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g id="Boxed FA Icon">
              <path id="Vector" d="M2.5 3.5V22.4583L12.4583 19.8833L22.5 22.4583V3.5H2.5ZM11.6417 12.8583C11.6417 13.9583 11.375 14.8083 10.825 15.425C10.275 16.0333 9.425 16.3417 8.30833 16.3417C7.125 16.3417 6.24167 16.0417 5.69167 15.4417C5.14167 14.8417 4.85833 14.0167 4.85833 12.9667V7.8H6.45V12.8333C6.45 13.575 6.6 14.125 6.89167 14.4667C7.18333 14.8083 7.66667 14.975 8.34167 14.975C8.96667 14.975 9.43333 14.7917 9.71667 14.4333C10.025 14.0083 10.1833 13.4917 10.1583 12.9583V7.79167H11.6417V12.8417V12.8583ZM20.1333 15.4583C20 15.575 19.8583 15.6833 19.7083 15.7667C19.5167 15.8833 19.3167 15.975 19.1083 16.05C18.8667 16.1333 18.625 16.2 18.375 16.25C18.0917 16.3083 17.8083 16.3333 17.525 16.3333C16.9 16.3417 16.2833 16.225 15.7083 15.975C15.2083 15.75 14.7583 15.425 14.3917 15.0083C14.0333 14.6 13.7667 14.125 13.5917 13.6167C13.4167 13.0917 13.325 12.5417 13.325 11.9833C13.325 11.425 13.4167 10.875 13.6 10.35C13.775 9.84167 14.0583 9.375 14.4167 8.96667C14.7917 8.55833 15.2417 8.23333 15.75 8.00833C16.3167 7.75833 16.9333 7.63333 17.55 7.64167C18.0167 7.63333 18.4833 7.69167 18.9417 7.80833C19.3167 7.91667 19.6667 8.08333 19.9917 8.29167L20.075 8.35L19.3167 9.54167L19.2333 9.48333C18.725 9.14167 18.125 8.975 17.5167 9C17.1417 8.99167 16.7667 9.06667 16.4167 9.23333C16.1083 9.38333 15.8417 9.6 15.625 9.86667C15.4083 10.1417 15.2417 10.4583 15.1417 10.7917C15.0333 11.1583 14.975 11.5333 14.9833 11.9167C14.9833 12.3083 15.0333 12.7 15.1417 13.0833C15.2417 13.4333 15.4 13.7667 15.625 14.0583C15.8333 14.3333 16.1083 14.5583 16.4167 14.7167C16.7667 14.8833 17.15 14.9667 17.5417 14.9583C17.9083 14.9667 18.2833 14.9083 18.625 14.775C18.9 14.6667 19.1583 14.5167 19.3917 14.325L19.4833 14.25L20.1917 15.3833L20.1333 15.4417V15.4583Z" fill="#73ABDD"/>
            </g>
          </svg> -->
          <ucdlib-icon icon="ucdlib-experts:uc-boxed"></ucdlib-icon>

          <span><a href="">Get it at UC</a></span>
        </div>
        <div class="link-row">
          <!-- <svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 640 512">! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc.<path d="M256 64H384v64H256V64zM240 0c-26.5 0-48 21.5-48 48v96c0 26.5 21.5 48 48 48h48v32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32h96v32H80c-26.5 0-48 21.5-48 48v96c0 26.5 21.5 48 48 48H240c26.5 0 48-21.5 48-48V368c0-26.5-21.5-48-48-48H192V288H448v32H400c-26.5 0-48 21.5-48 48v96c0 26.5 21.5 48 48 48H560c26.5 0 48-21.5 48-48V368c0-26.5-21.5-48-48-48H512V288h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H352V192h48c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48H240zM96 448V384H224v64H96zm320-64H544v64H416V384z"/></svg>
           -->
           <ucdlib-icon icon="ucdlib-experts:fa-network-wired"></ucdlib-icon>
           <span><a href="">Publisher Page</a></span>
        </div>
      </div>

      <div class="abstract">
        <h4>Abstract</h4>
        <p>
          Poop on grasses lick the plastic bag i like big cats and i can not lie lick plastic bags.
          Mewl for food at 4am good now the other hand, too disappear for four days and return
          home with an expensive injury; bite the vet, and purrrrrr you are a captive audience while
          sitting on the toilet, pet me try to hold own back foot to clean it but foot reflexively
          kicks you in face, go into a rage and bite own foot, hard let me in let me out let me in
          let me out let me in let me out who broke this door anyway . Chew on cable pee in the shoe
          jump launch to pounce upon little yarn mouse, bare fangs at toy run hide in litter box
          until treats are fed ignore the human until she needs to get up, then climb on her lap and
          sprawl so missing until dinner time wack the mini furry mouse meow loudly just to annoy
          owners.
        </p>
      </div>

      <div class="published">
        <h4>Published</h4>
        <span>Academic Journel Title of Academic Things</span> . <span>Volume 3</span> . <span>May 31, 2022</span>
      </div>

    </div>

  </div>

`;}


/***/ }),

/***/ "./public/elements/styles/shared-styles.js":
/*!*************************************************!*\
  !*** ./public/elements/styles/shared-styles.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sharedStyles: () => (/* binding */ sharedStyles)
/* harmony export */ });
/* harmony import */ var _campus_theme_properties_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./campus-theme-properties.css */ "./public/elements/styles/campus-theme-properties.css");
/* harmony import */ var _campus_theme_properties_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_campus_theme_properties_css__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _campus_theme_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./campus-theme.css */ "./public/elements/styles/campus-theme.css");
/* harmony import */ var _campus_theme_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_campus_theme_css__WEBPACK_IMPORTED_MODULE_1__);



let styleEle = document.createElement('style');
styleEle.innerHTML = (_campus_theme_css__WEBPACK_IMPORTED_MODULE_1___default()) + (_campus_theme_properties_css__WEBPACK_IMPORTED_MODULE_0___default());
document.head.appendChild(styleEle);

// import this for Lit elements
const sharedStyles = `${(_campus_theme_css__WEBPACK_IMPORTED_MODULE_1___default())}`;


/***/ }),

/***/ "./public/elements/utils/app-icons.js":
/*!********************************************!*\
  !*** ./public/elements/utils/app-icons.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _ucd_lib_theme_elements_ucdlib_ucdlib_icons_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ucd-lib/theme-elements/ucdlib/ucdlib-icons/utils.js */ "./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-icons/utils.js");
/**
 * `ucdlib-icons` is a utility import that includes the definition for the
 * `ucdlib-icon` element, `ucdlib-iconset` element, as well as an import for the
 * default icon set.
 */




const template = (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
  <svg>
    <defs>
      <g id="uc-boxed" viewBox="0 0 26 25"><path id="Vector" d="M2.5 3.5V22.4583L12.4583 19.8833L22.5 22.4583V3.5H2.5ZM11.6417 12.8583C11.6417 13.9583 11.375 14.8083 10.825 15.425C10.275 16.0333 9.425 16.3417 8.30833 16.3417C7.125 16.3417 6.24167 16.0417 5.69167 15.4417C5.14167 14.8417 4.85833 14.0167 4.85833 12.9667V7.8H6.45V12.8333C6.45 13.575 6.6 14.125 6.89167 14.4667C7.18333 14.8083 7.66667 14.975 8.34167 14.975C8.96667 14.975 9.43333 14.7917 9.71667 14.4333C10.025 14.0083 10.1833 13.4917 10.1583 12.9583V7.79167H11.6417V12.8417V12.8583ZM20.1333 15.4583C20 15.575 19.8583 15.6833 19.7083 15.7667C19.5167 15.8833 19.3167 15.975 19.1083 16.05C18.8667 16.1333 18.625 16.2 18.375 16.25C18.0917 16.3083 17.8083 16.3333 17.525 16.3333C16.9 16.3417 16.2833 16.225 15.7083 15.975C15.2083 15.75 14.7583 15.425 14.3917 15.0083C14.0333 14.6 13.7667 14.125 13.5917 13.6167C13.4167 13.0917 13.325 12.5417 13.325 11.9833C13.325 11.425 13.4167 10.875 13.6 10.35C13.775 9.84167 14.0583 9.375 14.4167 8.96667C14.7917 8.55833 15.2417 8.23333 15.75 8.00833C16.3167 7.75833 16.9333 7.63333 17.55 7.64167C18.0167 7.63333 18.4833 7.69167 18.9417 7.80833C19.3167 7.91667 19.6667 8.08333 19.9917 8.29167L20.075 8.35L19.3167 9.54167L19.2333 9.48333C18.725 9.14167 18.125 8.975 17.5167 9C17.1417 8.99167 16.7667 9.06667 16.4167 9.23333C16.1083 9.38333 15.8417 9.6 15.625 9.86667C15.4083 10.1417 15.2417 10.4583 15.1417 10.7917C15.0333 11.1583 14.975 11.5333 14.9833 11.9167C14.9833 12.3083 15.0333 12.7 15.1417 13.0833C15.2417 13.4333 15.4 13.7667 15.625 14.0583C15.8333 14.3333 16.1083 14.5583 16.4167 14.7167C16.7667 14.8833 17.15 14.9667 17.5417 14.9583C17.9083 14.9667 18.2833 14.9083 18.625 14.775C18.9 14.6667 19.1583 14.5167 19.3917 14.325L19.4833 14.25L20.1917 15.3833L20.1333 15.4417V15.4583Z" fill="#73ABDD"/></g>
      <g id="fa-network-wired" height="1em" viewBox="0 0 640 512"><!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M256 64H384v64H256V64zM240 0c-26.5 0-48 21.5-48 48v96c0 26.5 21.5 48 48 48h48v32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32h96v32H80c-26.5 0-48 21.5-48 48v96c0 26.5 21.5 48 48 48H240c26.5 0 48-21.5 48-48V368c0-26.5-21.5-48-48-48H192V288H448v32H400c-26.5 0-48 21.5-48 48v96c0 26.5 21.5 48 48 48H560c26.5 0 48-21.5 48-48V368c0-26.5-21.5-48-48-48H512V288h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H352V192h48c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48H240zM96 448V384H224v64H96zm320-64H544v64H416V384z"/></g>
    </defs>
  </svg>
`;
(0,_ucd_lib_theme_elements_ucdlib_ucdlib_icons_utils_js__WEBPACK_IMPORTED_MODULE_1__.renderIconSet)(template, "ucdlib-experts", 24);


/***/ }),

/***/ "./public/lib/index.js":
/*!*****************************!*\
  !*** ./public/lib/index.js ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

let {Registry} = __webpack_require__(/*! @ucd-lib/cork-app-utils */ "./public/node_modules/@ucd-lib/cork-app-utils/index.js");

const models =  {
  AppStateModel : __webpack_require__(/*! ./models/AppStateModel */ "./public/lib/models/AppStateModel.js"),
  WorkModel : __webpack_require__(/*! ./models/WorkModel */ "./public/lib/models/WorkModel.js")
};

Registry.ready();

module.exports = models;


/***/ }),

/***/ "./public/lib/models/AppStateModel.js":
/*!********************************************!*\
  !*** ./public/lib/models/AppStateModel.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const {AppStateModel} = __webpack_require__(/*! @ucd-lib/cork-app-state */ "./public/node_modules/@ucd-lib/cork-app-state/index.js");
const AppStateStore = __webpack_require__(/*! ../stores/AppStateStore */ "./public/lib/stores/AppStateStore.js");
const clone = __webpack_require__(/*! clone */ "../node_modules/clone/clone.js");

class AppStateModelImpl extends AppStateModel {

  constructor() {
    super();
    this.store = AppStateStore;

    this.init(APP_CONFIG.appRoutes);
  }

  set(update) {
    if( update.location ) {
      update.lastLocation = clone(this.store.data.location);

      let page = update.location.path ? update.location.path[0] : 'home';
      if( !page ) page = 'home'

      update.location.page = page;
    }

    return super.set(update);
  }

}

module.exports = new AppStateModelImpl();


/***/ }),

/***/ "./public/lib/models/WorkModel.js":
/*!****************************************!*\
  !*** ./public/lib/models/WorkModel.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const {BaseModel} = __webpack_require__(/*! @ucd-lib/cork-app-utils */ "./public/node_modules/@ucd-lib/cork-app-utils/index.js");
const WorkStore = __webpack_require__(/*! ../stores/WorkStore */ "./public/lib/stores/WorkStore.js");
const WorkService = __webpack_require__(/*! ../services/WorkService */ "./public/lib/services/WorkService.js");

class WorkModel extends BaseModel {

  constructor() {
    super();
    this.store = WorkStore;
    this.service = WorkService;

    this.register('WorkModel');
  }

  /**
   * @method get
   * @description load a work by id from elastic search
   *
   * @param {String} id record id
   *
   * @returns {Promise} resolves to record
   */
  async get(id) {
    let state = this.store.getWork(id);

    if( state && state.request ) {
      await state.request;
    } else if( state && state.state === 'loaded' ) {
      if( state.id !== id ) {
        this.store.setWorkLoaded(id, state.payload)
      }
    } else {
      await this.service.get(id);
    }

    return this.store.getWork(id);
  }

  /**
   * @method search
   * @description search for work
   *
   * @param {Object} searchDocument es search document
   *
   * @returns {Promise} resolves to a work search result
  */
  search(searchDocument) {
    return this.service.search(searchDocument);
  }

}

module.exports = new WorkModel();


/***/ }),

/***/ "./public/lib/services/WorkService.js":
/*!********************************************!*\
  !*** ./public/lib/services/WorkService.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const {BaseService} = __webpack_require__(/*! @ucd-lib/cork-app-utils */ "./public/node_modules/@ucd-lib/cork-app-utils/index.js");
const WorkStore = __webpack_require__(/*! ../stores/WorkStore */ "./public/lib/stores/WorkStore.js");

class WorkService extends BaseService {

  constructor() {
    super();
    this.store = WorkStore;

    this.baseUrl = '/api/work';
  }

  get(id) {
    return this.request({
      url : `${this.baseUrl}${id}`,
      checkCached : () => this.store.getWork(id),
      onLoading : request => this.store.setWorkLoading(id, request),
      onLoad : result => this.store.setWorkLoaded(id, result.body),
      onError : e => this.store.setWorkError(id, e)
    });
  }

  /**
   * @method search
   * @description Search for works
   *
   * @param {Object} searchDocument es search document
   *
   * @returns {Promise}
   */
  async search(searchDocument = {}, opts={}) {
    // TODO
    return;

    if( !opts.compact ) opts.compact = true;

    searchDocument.textFields = config.elasticSearch.textFields.work;
    return this.request({
      url : this.baseUrl,
      qs : opts,
      json : true,
      fetchOptions : {
        method : 'POST',
        body : JSON.searchDocument
      },
      onLoading : promise => this.store.setSearchLoading(searchDocument, promise),
      onLoad : result => {
        if( result.body.results ) {
          result.body.results = result.body.results.map(record => new RecordGraph(record));
        }
        this.store.setSearchLoaded(searchDocument, result.body)
      },
      onError : e => this.store.setSearchError(searchDocument, e)
    });
  }

}

module.exports = new WorkService();


/***/ }),

/***/ "./public/lib/stores/AppStateStore.js":
/*!********************************************!*\
  !*** ./public/lib/stores/AppStateStore.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const {AppStateStore} = __webpack_require__(/*! @ucd-lib/cork-app-state */ "./public/node_modules/@ucd-lib/cork-app-state/index.js");

class ImplAppStateStore extends AppStateStore {

  constructor() {
    super();
  }

  set(state) {
    super.set(state);
  }

}

module.exports = new ImplAppStateStore();


/***/ }),

/***/ "./public/lib/stores/WorkStore.js":
/*!****************************************!*\
  !*** ./public/lib/stores/WorkStore.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var {BaseStore} = __webpack_require__(/*! @ucd-lib/cork-app-utils */ "./public/node_modules/@ucd-lib/cork-app-utils/index.js");

class WorkStore extends BaseStore {

  constructor() {
    super();

    this.data = {
      byId : {},
      overview : {
        state : this.STATE.INIT
      },
      search : {
        state : this.STATE.INIT
      }
    }

    this.events = {
      WORK_UPDATE : 'work-update',
      WORK_SEARCH_UPDATE : 'work-search-update'
    }
  }

  getWork(id='') {
    return this.data.byId[id];
  }

  /**
   * Search
   */
  setSearchLoading(searchDocument, request) {
    this._setSearchState({
      state : this.STATE.LOADING,
      request, searchDocument
    })
  }

  setSearchLoaded(searchDocument, payload) {
    this._setSearchState({
      state : this.STATE.LOADED,
      searchDocument, payload
    })
  }

  setSearchError(searchDocument, error) {
    this._setSearchState({
      state : this.STATE.ERROR,
      searchDocument, error
    })
  }

  _setSearchState(state) {
    this.data.search = state;
    this.emit(this.events.WORK_SEARCH_UPDATE, this.data.search);
  }

  /**
   * Get
   */
  setWorkLoading(id, promise) {
    this._setWorkState({
      id,
      state: this.STATE.LOADING,
      request : promise
    });
  }

  setWorkLoaded(id, payload) {
    this._setWorkState({
      id,
      state: this.STATE.LOADED,
      payload
    });
  }

  setWorkError(id, error) {
    this._setWorkState({
      id,
      state: this.STATE.ERROR,
      error
    });
  }

  _setWorkState(state) {
    if( state.state === this.STATE.LOADED ) {
      // TODO any extra data translation?
    }
    this.data.byId[state.id] = state;
    this.emit(this.events.WORK_UPDATE, state);
  }

}

module.exports = new WorkStore();


/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-header/ucd-theme-header.js":
/*!************************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-header/ucd-theme-header.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UcdThemeHeader)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _ucd_theme_header_tpl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ucd-theme-header.tpl.js */ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-header/ucd-theme-header.tpl.js");
/* harmony import */ var _utils_controllers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/controllers */ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/index.js");





/**
 * @class UcdThemeHeader
 * @classdesc Component class for displaying the site header
 * 
 *  PatternLab Url:
 *    - http://dev.webstyleguide.ucdavis.edu/redesign/?p=organisms-header
 * 
 * @property {String} siteName - Name of website to display
 * @property {String} slogan - Optional text to display below site name
 * @property {String} figureSrc - Site logo/icon to display next to site name
 * @property {String} siteUrl - Url to use for links around site name and figure
 * @property {Boolean} silenceWarnings - Console warnings will be silences
 * @property {Boolean} opened - Whether header is open in the mobile view
 * @property {Boolean} preventFixed - Navbar will not be fixed to top of screen in desktop view
 * 
 * @example
 *  <ucd-theme-header site-name="A UC Davis Website">
 *    <ucd-theme-primary-nav>
 *      <a href="#">LINK 1</a>
 *      <a href="#">LINK 2</a>
 *      <a href="#">LINK 3</a>
 *    </ucd-theme-primary-nav>
 *    <ucd-theme-search-popup>
 *      <ucd-theme-search-form>
 *      </ucd-theme-search-form>
 *    </ucd-theme-search-popup>
 *    <ucd-theme-quick-links>
 *      <a href="#">LINK 4</a>
 *      <a href="#">LINK 5</a>
 *      <a href="#">LINK 6</a>
 *    </ucd-theme-quick-links>
 *  </ucd-theme-header>
 * 
 */
class UcdThemeHeader extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {

  static get properties() {
    return {
      siteName: {type: String, attribute: "site-name"},
      slogan: {type: String},
      figureSrc: {type: String, attribute: "figure-src"},
      siteUrl: {type: String, attribute: "site-url"},
      opened: {type: Boolean},
      silenceWarnings: {type: Boolean, attribute: 'silence-warnings'},
      preventFixed: {type: Boolean, attribute: "prevent-fixed"},
      isDemo: {type: Boolean, attribute: "is-demo"},
      _transitioning: {type: Boolean, state: true},
      _hasPrimaryNav: {type: Boolean, state: true},
      _hasSlottedBranding: {type: Boolean, state: true},
      _hasQuickLinks: {type: Boolean, state: true},
      _hasSearch: {type: Boolean, state: true},
      _brandingBarInView: {type: Boolean, state: true},
      _brandingBarLinks: {type: Array, state: true},
      _brandingBarListener: {type: Boolean, state: true},
      _components: {type: Object, state: true}
    };
  }

  static get styles() {
    return (0,_ucd_theme_header_tpl_js__WEBPACK_IMPORTED_MODULE_1__.styles)();
  }

  constructor() {
    super();
    this.render = _ucd_theme_header_tpl_js__WEBPACK_IMPORTED_MODULE_1__.render.bind(this);

    this.mutationObserver = new _utils_controllers__WEBPACK_IMPORTED_MODULE_2__.MutationObserverController(this);
    this.wait = new _utils_controllers__WEBPACK_IMPORTED_MODULE_2__.WaitController(this);
    new _utils_controllers__WEBPACK_IMPORTED_MODULE_2__.PopStateObserverController(this, "_onLocationChange");

    this.siteName = "";
    this.siteUrl = "/";
    this.slogan = "";
    this.figureSrc = "";
    this.opened = false;
    this.isDemo = false;
    this.silenceWarnings = false;

    this._transitioning = false;
    this._hasPrimaryNav = false;
    this._hasSlottedBranding = false;
    this._hasQuickLinks = false;
    this._hasSearch = false;
    this._animationDuration = 500;
    this._brandingBarInView = false;
    this._brandingBarLinks = [];
    this._brandingBarListener = false;
    this._slottedComponents = {};

  }

  /**
   * @method connectedCallback
   * @private
   * @description Custom element lifecycle method
   */
  connectedCallback(){
    super.connectedCallback();
    if ( !this.preventFixed ) {
      this.intersectionObserver = new _utils_controllers__WEBPACK_IMPORTED_MODULE_2__.IntersectionObserverController(this, {}, "_onBrandingBarIntersection", false);
    }
  }

  /**
   * @method firstUpdated
   * @private
   * @description Lit lifecycle hook
   */
  firstUpdated(){
    if ( !this.preventFixed ) {
      let aboveNav = this.renderRoot.getElementById('branding-bar-container');
      this.intersectionObserver.observer.observe(aboveNav);
    }
  }

  /**
   * @method _onLocationChange
   * @description Called when url changes by popstate controller
   */
  _onLocationChange(){
    this.close();
    if ( this._hasQuickLinks ){
      this._slottedComponents.quickLinks.close();
    }
    if ( this._hasSearch ){
      this._slottedComponents.search.close();
    }
  }

  /**
   * @method _onBrandingBarIntersection
   * @private
   * @description Called by intersection observer when branding bar enters/exits screen
   * @param {*} entries 
   */
  _onBrandingBarIntersection(entries){
    let offSetValue = 0;
    try {
      offSetValue = this.renderRoot.getElementById('nav-bar').getBoundingClientRect().height;
    } catch (error) {
      //
    }
    if ( offSetValue > 150 ) offSetValue = 0;
    entries.forEach(entry => {
      this._brandingBarInView = entry.isIntersecting;
      if (this._brandingBarInView) {
        this.style.marginBottom = '0px';
      } else {
        this.style.marginBottom = offSetValue + "px";
      }
    });
  }

  /**
   * @method open
   * @description Opens header menu in mobile
   * @returns {Promise}
   */
  async open(){
    if ( this._transitioning || this.opened ) return false;

    this.opened = true;
    this._transitioning = true;
    await this.wait.wait(this._animationDuration);
    this._transitioning = false;
    return true;

  }

  /**
   * @method close
   * @description Closes heaader menu in mobile
   * @returns {Promise}
   */
  async close(){
    if ( this._transitioning || !this.opened ) return false;

    this.opened = false;
    this._transitioning = true;
    await this.wait.wait(this._animationDuration);
    this._transitioning = false;
    return true;

  }

  /**
   * @method _onBtnClick
   * @private
   * @description Attached to menu open/close button
   */
  async _onBtnClick(){
    let didToggle;
    if ( this.opened ) {
      didToggle = await this.close();
    } else {
      didToggle = await this.open();
    }
    if ( didToggle ) {
      this.dispatchEvent(new CustomEvent('toggle', {
        detail : {open: this.opened}
      }));
    }
  }

  /**
   * @method _getNavbarClasses
   * @description Get classes to be assigned to the navbar container
   * @private
   * @returns {Object}
   */
  _getNavbarClasses(){
    let classes = {
      "l-navbar": true,
      "header__navbar": true
    };

    if (this.opened) {
      classes['menu--open'] = true;
    } else {
      if ( !this._transitioning ) classes['menu--hidden'] = true;
      classes['menu--closed'] = true;
    }

    return classes;
  }

  /**
   * @method _getHeaderClasses
   * @description Get classes to be assigned to the header element
   * @private
   * @returns {Object}
   */
  _getHeaderClasses(){
    let classes = {
      "l-header": true,
      "header": true
    };

    classes['fixed-mobile'] = !this.preventFixed;
    classes['fixed-desktop'] = !this.preventFixed && !this._brandingBarInView;
    
    return classes;
  }

  /**
   * @method _ucdLogo
   * @description Returns URI-encoded svg string of UC Davis logo
   * @private
   * @param {String} color - Color of logo. 'blue' or 'gold'.
   * @returns {String}
   */
  _ucdLogo(color="blue"){
    const colors = {
      "blue": "#022851",
      "gold": "#FFBF00"
    };
    return encodeURIComponent(
      `<svg xmlns="http://www.w3.org/2000/svg" width="100" height="16.157"><path fill="${colors[color]}" d="M58.865 4.877c.101.661 1.101 5.405 1.101 5.405h-2.194l1.093-5.405zm-8.328 11.03h5.806l.438-1.947h4.144l.554 1.947h5.806L61.846.403h-6.087l-5.222 15.504zM36.284.402h5.624c5.107 0 9.007 2.277 9.007 7.974 0 4.591-3.18 7.529-7.645 7.529l-6.986-.009V.402zm5.524 11.052h.376c1.843 0 3.207-1.072 3.207-3.096 0-2.179-1.21-3.395-3.234-3.395h-.349v6.491zM32.941.888l.296 2.545c.071.604.426 2.052-.011 1.858-.276-.121-.502-.776-.726-1.36-.114-.295-.658-1.695-.801-1.799-.685-.501-2.401-1.064-3.561-1.069-3.521-.013-5.847 2.509-5.847 6.982 0 3.208 1.582 7.061 5.607 7.061 1.441 0 4.201-.443 4.952-2.436.339-.9.65-1.703.876-1.459.166.177-.05.899-.15 1.289-.474 1.847-.501 2.406-.65 2.479-1.818.885-4.15 1.178-6.191 1.178-6.485 0-8.726-3.678-8.726-7.354 0-6.379 4.032-9.021 10.286-8.791 1.58.058 3.163.334 4.646.876M13.784 1.171L12.745.819c-.35-.306.075-.391.075-.391s1.5.271 5.24-.036c0 0 .328.062.103.319l-1.228.511c-.798.338-.798.143-.798.994l-.007 7.902c0 6.178-6.47 6.039-7.73 6.039-.6 0-6.488 0-6.488-4.961V2.834c0-1.46.159-1.419-.338-1.591L.071.695S-.183.347.269.368c1.227.06 3.004.316 7.133.024 0 0 .362.085.125.342l-1.201.339c-.95.414-.825.098-.849 1.045l.028 8.248c0 2.021 1.07 4.524 4.395 4.524 4.585 0 4.627-3.854 4.627-4.71l.009-8.167c.049-.77-.052-.551-.752-.842M87.65 14.715l1.6-4.111.281.23c.982.781 2.316 1.443 3.574 1.471 1.127.023 1.676-.268 1.527-1.191-.113-.693-.916-.812-1.417-.91l-1.103-.213c-2.143-.39-3.941-1.673-3.941-4.104 0-3.677 3.262-5.737 6.544-5.737 1.726 0 3.306.424 4.786 1.36L98.11 5.156c-.762-.533-1.918-1.285-3.377-1.337-.482-.018-1.58.229-1.229 1.312.152.462.833.657 1.252.755l1.241.292c2.325.526 4.003 1.81 4.003 4.432 0 3.699-3.281 5.529-6.542 5.529-1.901 0-4.106-.527-5.808-1.424M80.979.403h5.492v15.504h-5.492zM74.684.402h5.72l-5.843 15.503h-4.644L64.09.402h5.704l2.442 9.354z"/></svg>`);

  }

  /**
   * @method _onBrandingBarUpdate
   * @description Listens to nav item changes to the ucdlib-branding-bar element (if applicable)
   * @private
   * @param {Element} ele - ucdlib-branding-bar element
   */
  _onBrandingBarUpdate(ele) {
    if ( ele.navItems ) {
      this._brandingBarLinks = ele.navItems;
    } else {
      this._brandingBarLinks = [];
    }
  }

  /**
   * @method _onChildListMutation
   * @description Fires when there are changes to this element's non-shadow DOM children
   * @private
   */
  _onChildListMutation(){
    let primaryNav = this.querySelector('ucd-theme-primary-nav');
    if ( primaryNav ) {
      primaryNav.setAttribute('slot', 'primary-nav');
      this._hasPrimaryNav = true;
      this._slottedComponents.primaryNav = primaryNav;
    } else {
      if ( !this.silenceWarnings ) {
        console.warn("No 'ucd-theme-primary-nav' child element found!");
      }
      this._hasPrimaryNav = false;
    }

    let quickLinks = this.querySelector('ucd-theme-quick-links');
    if ( quickLinks ) {
      quickLinks.setAttribute('slot', 'quick-links');
      this._hasQuickLinks = true;
      this._slottedComponents.quickLinks = quickLinks;
    } else {
      this._hasQuickLinks = false;
    }

    let search = this.querySelector('ucd-theme-search-popup');
    if ( search ) {
      search.setAttribute('slot', 'search');
      this._hasSearch = true;
      this._slottedComponents.search = search;
    } else {
      this._hasSearch = false;
    }

    let UcdlibBrandingBar = this.querySelector('ucdlib-branding-bar');
    if ( UcdlibBrandingBar ) {
      UcdlibBrandingBar.setAttribute('slot', 'branding-bar');
      this._hasSlottedBranding = true;
      this._slottedComponents.brandingBar = UcdlibBrandingBar;
      if ( !this._brandingBarListener ){
        this._onBrandingBarUpdate(UcdlibBrandingBar);
        UcdlibBrandingBar.addEventListener('nav-update', (e) => {this._onBrandingBarUpdate(e.target);});
        this._brandingBarListener = true;
      }

    } else if ( this.querySelector("*[slot='branding-bar']") ){
      this._hasSlottedBranding = true;
      this._brandingBarLinks = [];
    } else {
      this._hasSlottedBranding = false;
      this._brandingBarLinks = [];
    }
  }

}

customElements.define('ucd-theme-header', UcdThemeHeader);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-header/ucd-theme-header.tpl.js":
/*!****************************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-header/ucd-theme-header.tpl.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render),
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit/directives/class-map.js */ "./public/node_modules/lit/directives/class-map.js");
/* harmony import */ var lit_directives_if_defined_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit/directives/if-defined.js */ "./public/node_modules/lit/directives/if-defined.js");
/* harmony import */ var _ucd_lib_theme_sass_1_base_html_headings_css_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ucd-lib/theme-sass/1_base_html/_headings.css.js */ "./public/node_modules/@ucd-lib/theme-sass/1_base_html/_headings.css.js");
/* harmony import */ var _ucd_lib_theme_sass_4_component_header_css_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ucd-lib/theme-sass/4_component/_header.css.js */ "./public/node_modules/@ucd-lib/theme-sass/4_component/_header.css.js");
/* harmony import */ var _ucd_lib_theme_sass_5_layout_l_header_css_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ucd-lib/theme-sass/5_layout/_l-header.css.js */ "./public/node_modules/@ucd-lib/theme-sass/5_layout/_l-header.css.js");
/* harmony import */ var _ucd_lib_theme_sass_4_component_site_branding_css_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ucd-lib/theme-sass/4_component/_site-branding.css.js */ "./public/node_modules/@ucd-lib/theme-sass/4_component/_site-branding.css.js");
/* harmony import */ var _ucd_lib_theme_sass_4_component_mobile_bar_css_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ucd-lib/theme-sass/4_component/_mobile-bar.css.js */ "./public/node_modules/@ucd-lib/theme-sass/4_component/_mobile-bar.css.js");
/* harmony import */ var _ucd_lib_theme_sass_4_component_nav_toggle_css_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ucd-lib/theme-sass/4_component/_nav-toggle.css.js */ "./public/node_modules/@ucd-lib/theme-sass/4_component/_nav-toggle.css.js");
/* harmony import */ var _ucd_lib_theme_sass_4_component_nav_off_canvas_css_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ucd-lib/theme-sass/4_component/_nav-off-canvas.css.js */ "./public/node_modules/@ucd-lib/theme-sass/4_component/_nav-off-canvas.css.js");












function styles() {
  const elementStyles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`
    :host {
      display: block;
    }
    [hidden] {
      display: none !important;
    }
    button {
      cursor: pointer;
    }
    ::slotted(ucdlib-branding-bar){
      width: 100%;
    }

    @media (max-width: 991px) {
      .fixed-mobile .mobile-bar {
        position: fixed;
        width: 100%;
        z-index: 1000;
        top: 0;
      }
      .fixed-mobile .off-canvas {
        position: fixed;
        overflow: auto;
        z-index: 1000;
        top: 55px;
      }
      .fixed-mobile .l-header__branding {
        margin-top: 55px;
      }
      .branding-bar-mobile-links {
        display: block;
      }
    }

    @media (min-width: 992px) {
      .fixed-desktop .l-navbar {
        position: fixed;
        z-index: 1000;
        top: 0;
        right: 0;
        left: 0;
        width: 100%;
      }
      .branding-bar-mobile-links {
        display: none;
      }
    }
    .branding-bar-mobile-links ul {
      margin: 0px;
      padding: 0px;
      list-style: none;
    }
    .branding-bar-mobile-links li {
      margin: 0px;
      padding: 0px;
      list-style: none;
    }
    .branding-bar-mobile-links a {
      display: flex;
      align-items: center;
      padding: 0.75rem;
      border-bottom: 0.15rem solid rgb(219, 234, 247);
      background-color: #fff;
      color: rgb(2, 40, 81);
      font-weight: 700;
      line-height: 1.5rem;
      text-decoration: none;
    }
    .branding-bar-mobile-links a:hover {
      background-color: rgb(255, 191, 0);
    }
    .branding-bar-mobile-links li:last-child a {
      border-bottom: none;
    }

  `;

  return [
    _ucd_lib_theme_sass_1_base_html_headings_css_js__WEBPACK_IMPORTED_MODULE_3__["default"],
    _ucd_lib_theme_sass_4_component_header_css_js__WEBPACK_IMPORTED_MODULE_4__["default"],
    _ucd_lib_theme_sass_5_layout_l_header_css_js__WEBPACK_IMPORTED_MODULE_5__["default"],
    _ucd_lib_theme_sass_4_component_site_branding_css_js__WEBPACK_IMPORTED_MODULE_6__["default"],
    _ucd_lib_theme_sass_4_component_mobile_bar_css_js__WEBPACK_IMPORTED_MODULE_7__["default"],
    _ucd_lib_theme_sass_4_component_nav_toggle_css_js__WEBPACK_IMPORTED_MODULE_8__["default"],
    _ucd_lib_theme_sass_4_component_nav_off_canvas_css_js__WEBPACK_IMPORTED_MODULE_9__["default"],
    elementStyles
  ];
}

function render() { 
return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
${this.isDemo ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
  <style>
    .l-navbar { top: auto !important}
  </style>
` : (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)``}
<header class=${(0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_1__.classMap)(this._getHeaderClasses())}>
  <div class="mobile-bar">
    <div class="mobile-bar__nav-toggle">
      <button 
        @click=${this._onBtnClick}
        class="nav-toggle ${this.opened ? 'nav-toggle--active' : ''}" 
        aria-controls="primary-nav" 
        aria-expanded="${this.opened ? 'true' : 'false'}" 
        aria-label="Toggle Main Menu">
        <span class="nav-toggle__icon nav-toggle__icon--menu">Menu</span>
      </button>
    </div>
    <div class="mobile-bar__fixed-site-name"><a href=${this.siteUrl}>${this.siteName}</a></div>
    <div class="mobile-bar__university">
      <a href="https://www.ucdavis.edu/" aria-label="UC Davis main website link">
        <img class="ucd-logo" src='data:image/svg+xml;utf8,${this._ucdLogo('gold')}' alt="UC Davis main website link">
      </a>
    </div>
  </div>

  <div id="branding-bar-container">
    <div class="header__bar">
        <div class="header__university">
          <a href="https://www.ucdavis.edu/" aria-label="UC Davis main website link">
            <img class="ucd-logo" src='data:image/svg+xml;utf8,${this._ucdLogo()}' alt="UC Davis main website link">
          </a>
        </div>
    </div>
    <div class="l-header__branding">
      ${this._hasSlottedBranding ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
        <slot name="branding-bar"></slot>
      ` : (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
        <div class="site-branding">
          <div class="site-branding__figure" ?hidden=${!this.figureSrc}>
            <a href="${this.siteUrl}" class="" aria-label="UC Davis Library website link"><img src=${this.figureSrc} class="site-logo" alt="Site Logo" /></a>
          </div>
          <div class="site-branding__body">
          <h1 class="site-branding__site-name" ?hidden=${!this.siteName}>
            <a href=${this.siteUrl}>${this.siteName}</a>
          </h1>
          <div class="site-branding__slogan" ?hidden=${!this.slogan}>${this.slogan}</div>
          </div>
        </div>
      `}
    </div>
  </div>

  <div class="${(0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_1__.classMap)(this._getNavbarClasses())}" id="nav-bar">
    <div class="l-container--navigation off-canvas off-canvas--left">
      <div class="off-canvas__container l-nav-horizontal">
        ${this._hasSearch ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
          <div class="l-nav-horizontal__search-popup">
            <slot name="search"></slot>
          </div>
        ` : (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)``}
        ${this._hasQuickLinks ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
          <div class="l-nav-horizontal__quick-links">
            <slot name="quick-links"></slot>
          </div>
        ` : (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)``}
        <div class="l-nav-horizontal__primary-nav">
          <slot name="primary-nav"></slot>
        </div>
        ${this._brandingBarLinks.length ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
          <div class='branding-bar-mobile-links'>
            <ul>
              ${this._brandingBarLinks.map(link => (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
                <li><a 
                  href=${(0,lit_directives_if_defined_js__WEBPACK_IMPORTED_MODULE_2__.ifDefined)(link.href ? link.href : null)}
                  target=${(0,lit_directives_if_defined_js__WEBPACK_IMPORTED_MODULE_2__.ifDefined)(link.newTab ? "_blank": null)}
                  >${link.linkText}</a></li>
              `)}
            </ul>

          </div>
        ` : (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)``}
      </div>
    </div>
  </div>
</header>
  

`;}

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-primary-nav/ucd-theme-primary-nav.js":
/*!**********************************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-primary-nav/ucd-theme-primary-nav.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UcdThemePrimaryNav)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _ucd_theme_primary_nav_tpl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ucd-theme-primary-nav.tpl.js */ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-primary-nav/ucd-theme-primary-nav.tpl.js");
/* harmony import */ var lit_directives_style_map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit/directives/style-map.js */ "./public/node_modules/lit/directives/style-map.js");
/* harmony import */ var lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lit/directives/class-map.js */ "./public/node_modules/lit/directives/class-map.js");
/* harmony import */ var lit_directives_if_defined_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lit/directives/if-defined.js */ "./public/node_modules/lit/directives/if-defined.js");
/* harmony import */ var _utils_mixins__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/mixins */ "./public/node_modules/@ucd-lib/theme-elements/utils/mixins/index.js");
/* harmony import */ var _utils_controllers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/controllers */ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/index.js");









/**
 * @class UcdThemePrimaryNav
 * @classdesc Component class for displaying a primary site nav
 * 
 * Pattern Lab Url:
 *  - http://dev.webstyleguide.ucdavis.edu/redesign/patterns/molecules-navigation-00-primary-nav/molecules-navigation-00-primary-nav.rendered.html
 *  - http://dev.webstyleguide.ucdavis.edu/redesign/patterns/molecules-navigation-00-primary-nav-megamenu/molecules-navigation-00-primary-nav-megamenu.rendered.html
 * 
 * @property {String} navType - The primary style type of the nav:
 *  'superfish' - The default
 *  'mega' - Hovering over any top-level link opens a single nav with all subnav links
 * @property {String} styleModifiers - Apply alternate styles with a space-separated list.
 *  e.g. 'justify' for 'primary-nav--justify'
 * @property {Number} hoverDelay - How long (ms) after hover will menu open/close
 * @property {Number} animationDuration - How long (ms) for a menu to fade in/out
 * @property {Number} maxDepth - Maximum number of submenus to show
 * 
 * @example
 *  <ucd-theme-primary-nav>
 *    <a href="#">link 1</a>
 *    <a href="#">link 2</a>
 *    <ul link-title="link with subnav" href="#">
 *      <li><a href="#">subnav link 1</a></li>
 *    </ul>
 *  </ucd-theme-primary-nav>
 */
class UcdThemePrimaryNav extends (0,_utils_mixins__WEBPACK_IMPORTED_MODULE_5__.Mixin)(lit__WEBPACK_IMPORTED_MODULE_0__.LitElement)
  .with(_utils_mixins__WEBPACK_IMPORTED_MODULE_5__.NavElement) {

  static get properties() {
    return {
      navType: {type: String, attribute: "nav-type"},
      styleModifiers: {type: String, attribute: "style-modifiers"},
      hoverDelay: {type: Number, attribute: "hover-delay"},
      animationDuration: {type: Number, attribute: "animation-duration"},
      navItems: {type: Array},
      maxDepth: {type: Number, attribute: "max-depth"},
      _megaIsOpen: {type: Boolean, state: true}
    };
  }

  static get styles() {
    return (0,_ucd_theme_primary_nav_tpl_js__WEBPACK_IMPORTED_MODULE_1__.styles)();
  }

  constructor() {
    super();
    this.render = _ucd_theme_primary_nav_tpl_js__WEBPACK_IMPORTED_MODULE_1__.render.bind(this);
    this.mutationObserver = new _utils_controllers__WEBPACK_IMPORTED_MODULE_6__.MutationObserverController(this, {subtree: true, childList: true});
    this.breakPoints = new _utils_controllers__WEBPACK_IMPORTED_MODULE_6__.BreakPointsController(this);

    this.navType = "superfish";
    this.styleModifiers = "";
    this.hoverDelay = 300;
    this.animationDuration = 300;

    this._classPrefix = "primary-nav";
    this._acceptedNavTypes = ['superfish', 'mega'];
    this._megaIsOpen = false;
  }

  /**
   * @method openMegaNav
   * @description Opens the meganav menu
   */
  openMegaNav() {
    this._megaIsOpen = true;
  }
    
  /**
   * @method closeMegaNav
   * @description Closes the meganav menu
   */
  closeMegaNav(){
    this._megaIsOpen = false;
  }

  /**
   * @method openSubNav
   * @description Opens the specified subnav
   * @param {Array} navLocation - Coordinates of the item in the 'navItems' array. i.e. [0, 1, 4].
   */
  async openSubNav(navLocation){

    // non-mega menu
    if ( 
      typeof navLocation !== 'object' ||
      !Array.isArray(navLocation) ||
      navLocation.length === 0
    ) return;
    let navItem = this.getNavItem(navLocation);
    if ( !navItem ) return;

    // Open on mobile
    if ( this.breakPoints.isMobile() ) {
      let nav = this.renderRoot.getElementById(`nav--${navLocation.join("-")}`);
      if ( !nav ) return;
      let ul = nav.querySelector('ul');
      if ( !ul ) return;
      if ( navItem.isTransitioning ) return;
      navItem.isTransitioning = true;

      // Get expanded height
      navItem.inlineStyles.display = "block";
      navItem.inlineStyles.height = 0 + "px";
      this.requestUpdate();
      await this.updateComplete;
      const expandedHeight = ul.scrollHeight + "px";

      // Set expanded height
      navItem.inlineStyles.height = expandedHeight;
      this.requestUpdate();
      await this.updateComplete;

      // Remove transition state after animation duration
      this._completeMobileTransition(navItem);


    // Open on desktop
    } else {

      // mega menu
      if ( this.isMegaMenu() ){
        return;
      }

      this.clearItemInlineStyles(navItem);
      if ( navItem.isClosing ) {
        navItem.isClosing = false;
        this.requestUpdate();
      }
      if ( navItem.timeout ) clearTimeout(navItem.timeout);
      if ( navItem.isOpen ) return;
  
      navItem.timeout = setTimeout(() => {
        navItem.isOpen = true;
        this.requestUpdate();
      }, this.hoverDelay);
    }
  }

  /**
   * @method closeSubNav
   * @description Closes a subnav given its coordinates 
   * @param {Array} navLocation - Coordinates of the item in the 'navItems' array. i.e. [0, 1, 4].
   */
  async closeSubNav(navLocation){

    if ( 
      typeof navLocation !== 'object' ||
      !Array.isArray(navLocation) ||
      navLocation.length === 0
    ) return;
    let navItem = this.getNavItem(navLocation);
    if ( !navItem ) return;

    // close on mobile
    if ( this.breakPoints.isMobile() ) {
      let nav = this.renderRoot.getElementById(`nav--${navLocation.join("-")}`);
      if ( !nav ) return;
      let ul = nav.querySelector('ul');
      if ( !ul ) return;
      if ( navItem.isTransitioning ) return;
      navItem.isTransitioning = true;

      // Set expanded height
      navItem.inlineStyles.height = ul.scrollHeight + "px";
      navItem.inlineStyles.display = "block";
      this.requestUpdate();
      await this.updateComplete;

      // Set height to 0 by requesting all of the animation frames :-(
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          navItem.inlineStyles.height = "0px";
          this.requestUpdate();
  
          requestAnimationFrame(() => {
            // Remove transition state after animation duration
            this._completeMobileTransition(navItem);
          });

        });
      });
    

    // close on desktop
    } else {

      // mega menu
      if ( this.isMegaMenu() ){
        return;
      }


      this.clearItemInlineStyles(navItem);
      if ( navItem.timeout ) clearTimeout(navItem.timeout);
      if ( !navItem.isOpen ) return;
  
      navItem.isClosing = true;
      this.requestUpdate();
      navItem.timeout = setTimeout(() => {
        navItem.isOpen = false;
        navItem.isClosing = false;
        this.requestUpdate();
      }, this.hoverDelay + this.animationDuration);
    }
    
  }

  /**
   * @method closeAllSubNavs
   * @description Recursively closes all nav submenus within specified menu.
   * @param {Array} navItems - The subItems property of any object within the 'navItems' element property.
   * @param {Boolean} requestUpdate - Should an update be requested after each subnav closing?
   */
  closeAllSubNavs(navItems, requestUpdate=true){
    if ( !navItems ) navItems = this.navItems;
    navItems.forEach((navItem) => {
      if ( navItem.isOpen ) {
        navItem.isOpen = false;
        if ( requestUpdate ) this.requestUpdate();
      }
      if ( navItem.subItems ) {
        this.closeAllSubNavs(navItem.subItems);
      }
    });
  }

  /**
   * @method isMegaMenu
   * @description Does this element use the mega menu?
   * @returns {Boolean}
   */
  isMegaMenu(){
    if ( this.navType.toLowerCase().trim() === 'mega') return true;
    return false;
  }

  /**
   * @method _getNavClasses
   * @private
   * @description Get classes to be applied to the top-level 'nav' element
   * @returns {String}
   */
  _getNavClasses(){
    let navType = this._acceptedNavTypes[0];
    if ( this._acceptedNavTypes.includes(this.navType.toLowerCase()) ) navType = this.navType;
    
    let styleModifiers = "";
    if ( this.styleModifiers ) {
      styleModifiers = this.styleModifiers.split(" ").map(mod => `${this._classPrefix}--${mod}`).join(" ");
    }
    let megaIsOpen = this.isMegaMenu() && this._megaIsOpen ? 'is-hover' : '';
    return `${this._classPrefix} ${this._classPrefix}--${navType} ${styleModifiers} ${megaIsOpen}`;
  }

  /**
   * @method _onChildListMutation
   * @private
   * @description Fires when light dom child list changes. Injected by MutationObserverController.
   *  Sets the 'navItems' property.
   */
  _onChildListMutation(){
    let navItems = this.parseNavChildren();
    if ( navItems.length ) this.navItems = navItems;
  }

  /**
   * @method _renderNavItem
   * @private
   * @description Renders a menu item and all its children to the specified max depth
   * @param {Object} navItem - An item from the 'navItems' element property
   * @param {Array} location - Coordinates of the item in the 'navItems' array. i.e. [0, 1, 4]
   * @returns {TemplateResult}
   */
  _renderNavItem(navItem, location){
    const depth = location.length - 1;

    // Render item and its subnav
    if ( this.itemHasSubNav(navItem) && depth < this.maxDepth) {
      return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
      <li 
        id="nav--${location.join("-")}"
        .key=${location}
        .hasnav=${true}
        @mouseenter=${this._onItemMouseenter} 
        @mouseleave=${this._onItemMouseleave}
        class=${(0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_3__.classMap)(this._makeLiClassMap(navItem, depth))}>
        <div class="submenu-toggle__wrapper ${depth === 0 ? `${this._classPrefix}__top-link` : ''}">
          <a 
            href=${(0,lit_directives_if_defined_js__WEBPACK_IMPORTED_MODULE_4__.ifDefined)(navItem.href ? navItem.href : null)}
            tabindex=${this._setTabIndex(depth)}
            @focus=${this._onItemFocus}>
            ${navItem.linkText}<span class="${this._classPrefix}__submenu-indicator"></span>
          </a>
          <button 
          @click=${() => this._toggleMobileMenu(location)}
          class="submenu-toggle ${navItem.isOpen ? 'submenu-toggle--open' : ''}" 
          ?disabled=${navItem.isTransitioning}
          aria-label="Toggle Submenu">
          <span class="submenu-toggle__icon"></span>
        </button>
        </div>
        <ul class="menu ${navItem.isOpen ? "menu--open" : ""}" style=${(0,lit_directives_style_map_js__WEBPACK_IMPORTED_MODULE_2__.styleMap)(this._getItemMobileStyles(location))}>
          ${navItem.subItems.map((subItem, i) => this._renderNavItem(subItem, location.concat([i])))}
        </ul>
      </li>
    `;
    }

    // render as normal link
    return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
      <li id="nav--${location.join("-")}" .key=${location} class=${(0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_3__.classMap)(this._makeLiClassMap(navItem, depth))}>
        <div class="${depth === 0 ? `${this._classPrefix}__top-link`: '' }">
          ${navItem.href ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
            <a 
              href=${navItem.href} 
              @focus=${this._onItemFocus}
              tabindex=${this._setTabIndex(depth)}>
              ${navItem.linkText}</a>
          ` : (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
            <span class="${this._classPrefix}__nolink">${navItem.linkText}</span>
          `}
        </div>
      </li>
    `;
  }

  /**
   * @method _setTabIndex
   * @private
   * @description Sets the tab index of menu links
   * @param {Number} depth - Level of the menu link
   * @returns {Number}
   */
  _setTabIndex(depth=0){
    let i = 0;
    if (
      this.isMegaMenu() && 
      depth > 0 && 
      !this._megaIsOpen &&
      this.breakPoints.isDesktop()
    ) i = -1;

    return i;
  }

  /**
   * @method _makeLiClassMap
   * @private
   * @description Classes to be assigned to each LI element in the nav.
   * @param {Object} navItem - An item in the navItems property.
   * @param {Number} depth - Depth of the navItem
   * @returns {Object}
   */
  _makeLiClassMap(navItem, depth=0){
    let classes = {};
    classes[`depth-${depth}`] = true;
    if ( navItem.isOpen ) classes['sf--hover'] = true;
    if ( navItem.isClosing ) classes.closing = true;
    if (navItem.megaFocus) classes['mega-focus'] = true;
    return classes;
  }

  /**
   * @method _toggleMobileMenu
   * @private
   * @description Expands/collapses mobile subnavs with animation on user click.
   * @param {Array} navLocation - Array coordinates of corresponding nav item
   */
  async _toggleMobileMenu(navLocation){
    if ( this.breakPoints.isDesktop() ) return;
    let navItem = this.getNavItem(navLocation);
    if ( navItem.isOpen ) {
      this.closeSubNav(navLocation);
    } else {
      this.openSubNav(navLocation);
    }
  }

  /**
   * @method _onNavMouseenter
   * @private
   * @description Attached to top-level nav element. Opens mega menu in desktop view
   */
  _onNavMouseenter(){
    if ( 
      this.breakPoints.isMobile() || 
      !this.isMegaMenu() ) 
      return;

    if ( this._megaTimeout ) clearTimeout(this._megaTimeout);
    this._megaTimeout = setTimeout(() => {
      this.openMegaNav();
    }, this.hoverDelay);
  }

  /**
   * @method _onNavMouseleave
   * @private
   * @description Attached to top-level nav element. Closes mega menu in desktop view
   */
  _onNavMouseleave(){
    if ( 
      this.breakPoints.isMobile() || 
      !this.isMegaMenu() ) 
      return;

    if ( this._megaTimeout ) clearTimeout(this._megaTimeout);
    
    this._megaTimeout = setTimeout(() => {
      this.closeMegaNav();
    }, this.hoverDelay);
  }

  /**
   * @method _onNavFocusin
   * @private
   * @description Fires when focus enters the main nav element. Used to open the meganav
   */
  _onNavFocusin(){
    if ( 
      this.breakPoints.isMobile() || 
      !this.isMegaMenu() ) 
      return;
    
    if ( this._megaIsOpen ) return;
    if ( this._megaTimeout ) clearTimeout(this._megaTimeout);
    
    this._megaTimeout = setTimeout(() => {
      this.openMegaNav();
    }, this.hoverDelay);

  }


  /**
   * @method _onItemMouseenter
   * @private
   * @description Bound to nav li items with a subnav
   * @param {Event} e 
   */
  _onItemMouseenter(e){
    if ( this.breakPoints.isMobile() ) return;
    this.openSubNav(e.target.key);
  }

  /**
   * @method _onItemFocus
   * @private
   * @description Bound to nav a elements
   * @param {Event} e 
   */
  _onItemFocus(e){
    if ( this.breakPoints.isMobile() ) return;
    const LI = e.target.parentElement.parentElement;

    if (LI.hasnav) {
      this.openSubNav(LI.key);
    }
  
    if (this.isMegaMenu() && this._megaIsOpen) {
      this._setMegaFocus(LI.key);
    }
  }

  /**
   * @method _setMegaFocus
   * @private
   * @description Displays custom styling to meganav item when focused to fix bug in sitefarm code.
   * @param {Array} navLocation - Coordinates of the item in the 'navItems' array. i.e. [0, 1, 4].
   */
  _setMegaFocus(navLocation){
    this.navItems.forEach((nav) => nav.megaFocus = false);
    if ( 
      typeof navLocation !== 'object' ||
      !Array.isArray(navLocation) ||
      navLocation.length < 1
    ) return;
    let navItem = this.getNavItem([navLocation[0]]);
    navItem.megaFocus = true;
    this.requestUpdate();

  }

  /**
   * @method _completeMobileTransition
   * @private
   * @description Sets timeout to remove animation styles from mobile transition
   * @param {Object} navItem - Member 'navItems' element property.
   */
  _completeMobileTransition(navItem){
    navItem.timeout = setTimeout(() => {
      navItem.inlineStyles = {};
      navItem.isOpen = !navItem.isOpen;
      navItem.isTransitioning = false;
      this.requestUpdate();
    }, this.animationDuration);
  }

  /**
   * @method _onItemMouseleave
   * @private
   * @description Bound to nav li items with a subnav
   * @param {Event} e 
   */
  _onItemMouseleave(e){
    if ( this.breakPoints.isMobile() || this.isMegaMenu() ) return;
    this.closeSubNav(e.target.key);
  }

  /**
   * @method _onNavFocusout
   * @private
   * @description Attached to the top-level nav element. Closes subnav if it doesn't contain focused link.
   */
  _onNavFocusout(){
    if ( this.breakPoints.isMobile() ) return;
    if ( this.isMegaMenu() ) {
      if ( this._megaTimeout ) clearTimeout(this._megaTimeout);
      requestAnimationFrame(() => {
        const focusedEle = this.renderRoot.activeElement;
        if ( focusedEle ) return;
        this._megaTimeout = setTimeout(() => {
          this.navItems.forEach((nav) => nav.megaFocus = false);
          this.closeMegaNav();
        }, this.hoverDelay);
      });

    } else {
      requestAnimationFrame(() => {
        const focusedEle = this.renderRoot.activeElement;
        if ( !focusedEle ) {
          this.closeAllSubNavs();
          return;
        }
        
        let ele = focusedEle;
        while ( 
          ele &&
          ele.tagName !== this.tagName &&
          !Array.isArray(ele.key) 
        ){
          ele = ele.parentElement;
        }
        if ( !ele.key ) return;
        let navLocation = [...ele.key];
        let currentIndex = navLocation.pop();
        let navSiblings = navLocation.length == 0 ? this.navItems : this.getNavItem(navLocation).subItems;
        navSiblings.forEach((sibling, i) => {
          if ( i !== currentIndex) {
            sibling.isOpen = false;
            this.closeAllSubNavs(sibling.subItems, false);
          }
        });
        this.requestUpdate();
      });

    }

  }

  /**
   * @method _getItemMobileStyles
   * @private
   * @description Returns inline styles on a nav element (used for mobile transition animation)
   * @param {Array} location - Coordinates of the item in the 'navItems' array. i.e. [0, 1, 4].
   * @returns {Object} - Style map
   */
  _getItemMobileStyles(location) {
    if ( this.breakPoints.isDesktop() ) return {};
    let navItem = this.getNavItem(location);
    if ( !navItem.inlineStyles ) return {};
    return navItem.inlineStyles;
  }

}

customElements.define('ucd-theme-primary-nav', UcdThemePrimaryNav);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-primary-nav/ucd-theme-primary-nav.tpl.js":
/*!**************************************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-primary-nav/ucd-theme-primary-nav.tpl.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render),
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _ucd_lib_theme_sass_normalize_css_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ucd-lib/theme-sass/normalize.css.js */ "./public/node_modules/@ucd-lib/theme-sass/normalize.css.js");
/* harmony import */ var _ucd_lib_theme_sass_1_base_html_forms_css_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ucd-lib/theme-sass/1_base_html/_forms.css.js */ "./public/node_modules/@ucd-lib/theme-sass/1_base_html/_forms.css.js");
/* harmony import */ var _ucd_lib_theme_sass_2_base_class_misc_css_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ucd-lib/theme-sass/2_base_class/_misc.css.js */ "./public/node_modules/@ucd-lib/theme-sass/2_base_class/_misc.css.js");
/* harmony import */ var _ucd_lib_theme_sass_4_component_nav_primary_css_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ucd-lib/theme-sass/4_component/_nav-primary.css.js */ "./public/node_modules/@ucd-lib/theme-sass/4_component/_nav-primary.css.js");
/* harmony import */ var _ucd_lib_theme_sass_4_component_submenu_toggle_css_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ucd-lib/theme-sass/4_component/_submenu-toggle.css.js */ "./public/node_modules/@ucd-lib/theme-sass/4_component/_submenu-toggle.css.js");








function styles() {
  const elementStyles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`
    :host {
      display: block;
    }
    .submenu-toggle * {
      pointer-events: none;
    }
    button[disabled] {
      pointer-events: none;
    }
    @media (min-width: 992px) {
      nav.primary-nav--mega li.depth-0 > ul.menu {
        opacity: 1;
        display: block;
      }

      ul.menu ul.menu {
        opacity: 0;
        display: none;
      }
      ul.menu li.sf--hover > ul.menu {
        display: block;
        opacity: 1;
      }
      ul.menu li.closing > ul.menu {
        display: block;
        opacity: 0;
      }
      .mega-focus .primary-nav__top-link a, 
      .mega-focus .primary-nav__top-link a::before, .mega-focus 
      .primary-nav__top-link a::after {
        background-color: rgb(255, 223, 128);
      }
      .mega-focus .primary-nav__top-link a:focus, 
      .mega-focus .primary-nav__top-link a:focus::before, 
      .mega-focus .primary-nav__top-link a:focus::after {
        background-color: rgb(255, 191, 0);
      }
      .mega-focus > ul {
        background-color: rgb(255, 251, 237);
      }

    }

    @media (max-width: 991px) {
      ul.menu ul.menu {
        display: none;
        overflow-y: hidden;
        visibility: visible;
        height: auto;
        border-top-width: 0px;
        border-bottom-width: 0px;
        padding-top: 0px;
        padding-bottom: 0px;
      }

      ul.menu ul.menu.menu--open {
        display: block;
      }

    }
  `;

  return [
    _ucd_lib_theme_sass_normalize_css_js__WEBPACK_IMPORTED_MODULE_1__["default"],
    _ucd_lib_theme_sass_1_base_html_forms_css_js__WEBPACK_IMPORTED_MODULE_2__["default"],
    _ucd_lib_theme_sass_2_base_class_misc_css_js__WEBPACK_IMPORTED_MODULE_3__["default"],
    _ucd_lib_theme_sass_4_component_nav_primary_css_js__WEBPACK_IMPORTED_MODULE_4__["default"],
    _ucd_lib_theme_sass_4_component_submenu_toggle_css_js__WEBPACK_IMPORTED_MODULE_5__["default"],
    elementStyles
  ];
}

function render() { 
return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
<style>
  ul.menu ul.menu {
    transition: opacity ${this.animationDuration + "ms"}, height ${this.animationDuration + "ms"};
  }
  ul.menu li.sf--hover > ul.menu {
    transition: opacity ${this.animationDuration + "ms"} ${this.hoverDelay + "ms"}, height ${this.animationDuration + "ms"};
  }

</style>
<nav 
  id=${this._classPrefix}
  class="${this._getNavClasses()}" 
  @mouseenter=${this._onNavMouseenter}
  @mouseleave=${this._onNavMouseleave}
  @focusout=${this._onNavFocusout}
  @focusin=${this._onNavFocusin}
  aria-label="Main Menu">
  <ul class="menu">
    ${this.navItems.map((navItem, i) => this._renderNavItem(navItem, [i]))}
  </ul>
</nav>
`;}

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-quick-links/ucd-theme-quick-links.js":
/*!**********************************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-quick-links/ucd-theme-quick-links.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UcdThemeQuickLinks)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _ucd_theme_quick_links_tpl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ucd-theme-quick-links.tpl.js */ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-quick-links/ucd-theme-quick-links.tpl.js");
/* harmony import */ var _utils_controllers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/controllers */ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/index.js");





/**
 * @class UcdThemeQuickLinks
 * @classdesc Component class for displaying a quick links nav
 * 
 *  Patternlab Url:
 *    - http://dev.webstyleguide.ucdavis.edu/redesign/?p=molecules-quick-links
 *    - http://dev.webstyleguide.ucdavis.edu/redesign/?p=molecules-quick-links-2-columns
 *    - http://dev.webstyleguide.ucdavis.edu/redesign/?p=molecules-quick-links-highlight
 *    - http://dev.webstyleguide.ucdavis.edu/redesign/?p=molecules-quick-links-home-site
 * @property {String} title - Text to be displayed instead of "Quick Links"
 * @property {String} styleModifiers - Apply alternate styles with a space-separated list.
 * @property {Boolean} opened - Menu is open
 * @property {Number} animationDuration - Length of animation when opening/closing menu
 */
class UcdThemeQuickLinks extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {

  static get properties() {
    return {
      title: {type: String},
      styleModifiers: {type: String, attribute: "style-modifiers"},
      opened: {type: Boolean},
      animationDuration: {type: Number, attribute: "animation-duration"},
      _links: {type: Array, state: true},
      _hasCustomIcons: {type: Boolean, state: true},
      _transitioning: {type: Boolean, state: true},
      _openedHeight: {type: Number, state: true}
    };
  }

  static get styles() {
    return (0,_ucd_theme_quick_links_tpl_js__WEBPACK_IMPORTED_MODULE_1__.styles)();
  }

  constructor() {
    super();
    this.render = _ucd_theme_quick_links_tpl_js__WEBPACK_IMPORTED_MODULE_1__.render.bind(this);
    this.mutationObserver = new _utils_controllers__WEBPACK_IMPORTED_MODULE_2__.MutationObserverController(this);
    this.wait = new _utils_controllers__WEBPACK_IMPORTED_MODULE_2__.WaitController(this);

    this.title = "Quick Links";
    this.styleModifiers = "";
    this.opened = false;
    this.animationDuration = 300;

    this._links = [];
    this._classPrefix = "quick-links";
    this._hasCustomIcons = false;
    this._transitioning = false;
    this._openedHeight = 0;
  }

  /**
   * @method open
   * @description Opens the quick links menu if not already open or in a transition state.
   * @returns {Promise} Returns true if successful
   */
  async open(){
    if ( this._transitioning || this.opened ) return false;

    this._openedHeight = 0;
    this._transitioning = true;
    await this.updateComplete;
    this._openedHeight = this.renderRoot.getElementById('menu').scrollHeight + "px";
    await this.updateComplete;

    await this.wait.wait(this.animationDuration);
    this._transitioning = false;
    this.opened = true;
    return true;
  }

  /**
   * @method close
   * @description Closes the quick links menu if not already closed or in a transition state.
   * @returns {Promise} Returns true if successful
   */
  async close(){
    if ( this._transitioning || !this.opened ) return false;
    this._transitioning = true;

    this._openedHeight = this.renderRoot.getElementById('menu').scrollHeight + "px";
    await this.updateComplete;
    await this.wait.waitForFrames(2);
    this._openedHeight = 0;
    await this.updateComplete;

    await this.wait.wait(this.animationDuration);

    this._transitioning = false;
    this.opened = false;
    return true;
  }

  /**
   * @method ingestChildren
   * @description Copies lightdom children into the shadowdom.
   */
  ingestChildren(){
    // remove any slotted icons created from a previous render
    this.querySelectorAll('[slot]').forEach(ele => ele.remove());
    this._hasCustomIcons = false;

    let links = [];
    this.querySelectorAll('a').forEach((child, index) => {
      if (child.tagName !== "A")  return;
      let link = {};

      // if first child exists, we assume it is an icon
      if ( 
        child.childElementCount > 0 && 
        index < 3 &&
        child.children[0].tagName !== 'A'
      ){
        this._hasCustomIcons = true;
        let icon = child.children[0].cloneNode(true);
        let iconSlot = `icon-${index}`;
        icon.setAttribute('slot', iconSlot);
        this.appendChild(icon);
        link.iconSlot = iconSlot;
      }

      if ( child.href ) link.href = child.href;
      link.text = child.innerText;
      link.ele = child;

      links.push(link);
    });

    if ( links.length > 0 ) this._links = links;
  }

  /**
   * @method _onBtnClick
   * @private
   * @description Attached to menu open/close button
   */
  async _onBtnClick(){
    let didToggle;
    if ( this.opened ) {
      didToggle = await this.close();
    } else {
      didToggle = await this.open();
    }
    if ( didToggle ) {
      this.dispatchEvent(new CustomEvent('toggle', {
        detail : {open: this.opened}
      }));
    }
  }

  /**
   * @method _onItemClick
   * @private
   * @description Attached to menu item links without an href
   * @param {Event} e 
   */
  _onItemClick(e){
    this._dispatchItemClick(e.target.index);
  }

  /**
   * @method _onItemKeyup
   * @private
   * @description Attached to menu item links without an href
   * @param {Event} e 
   */
  _onItemKeyup(e){
    if( e.which !== 13 ) return;
    this._dispatchItemClick(e.target.index);
  }

  /**
   * @method _dispatchItemClick
   * @private
   * @description Fires the item-click event
   * @param {Number} index - The array index of the selected menu item
   */
  _dispatchItemClick(index){
    this.dispatchEvent(new CustomEvent('item-click', {
      detail : {
        index: index,
        item: this._links[index]
      }
    }));

  }

  /**
   * @method _getNavClasses
   * @private
   * @description Get classes to be applied to the 'nav' element
   * @returns {Object}
   */
  _getNavClasses(){
    let classes = {};
    classes[`${this._classPrefix}__menu`] = true;
    
    if ( this.styleModifiers ) {
      this.styleModifiers.split(" ").forEach(mod => {
        if (mod) classes[`${this._classPrefix}--${mod}`] = true;
      });
    }

    classes['transitioning'] = this._transitioning;
    classes['open'] = this.opened;

    return classes;
  }

  /**
   * @method _getNavStyles
   * @private
   * @description Get styles to be applied to the 'nav' element
   * @returns {Object}
   */
  _getNavStyles(){
    let styles = {};
    if ( this._transitioning) {
      styles['height'] = this._openedHeight;
    }
    return styles;
  }

  /**
   * @method _onChildListMutation
   * @param {Array} mutationsList - List of mutation records
   * @private
   * @description Fires when light dom child list changes. Injected by MutationObserverController.
   *  Sets the '_links' property.
   */
  _onChildListMutation(mutationsList){

    // Check to see if this element triggered the mutation and avoid infinite loop.
    if ( mutationsList ) {
      for (const mutation of mutationsList) {
        for (const n of Array.from(mutation.addedNodes)){
          if ( n instanceof Element && n.hasAttribute('slot')) return;
        }
        for (const n of Array.from(mutation.removedNodes)){
          if ( n instanceof Element && n.hasAttribute('slot')) return;
        }
      }
    }
    this.ingestChildren();
  }

  /**
   * @method _renderSlot
   * @private
   * @description Renders slot for an icon
   * @param {Object} link - Member of the _links property.
   * @returns {TemplateResult}
   */
  _renderSlot(link) {
    if ( link.iconSlot ) {
      return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`<div class='slot-parent'><slot name=${link.iconSlot}></slot></div>`;
    }
    return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)``;
  }

}

customElements.define('ucd-theme-quick-links', UcdThemeQuickLinks);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-quick-links/ucd-theme-quick-links.tpl.js":
/*!**************************************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-quick-links/ucd-theme-quick-links.tpl.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render),
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit/directives/class-map.js */ "./public/node_modules/lit/directives/class-map.js");
/* harmony import */ var lit_directives_style_map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit/directives/style-map.js */ "./public/node_modules/lit/directives/style-map.js");
/* harmony import */ var _ucd_lib_theme_sass_normalize_css_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ucd-lib/theme-sass/normalize.css.js */ "./public/node_modules/@ucd-lib/theme-sass/normalize.css.js");
/* harmony import */ var _ucd_lib_theme_sass_1_base_html_forms_css_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ucd-lib/theme-sass/1_base_html/_forms.css.js */ "./public/node_modules/@ucd-lib/theme-sass/1_base_html/_forms.css.js");
/* harmony import */ var _ucd_lib_theme_sass_2_base_class_misc_css_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ucd-lib/theme-sass/2_base_class/_misc.css.js */ "./public/node_modules/@ucd-lib/theme-sass/2_base_class/_misc.css.js");
/* harmony import */ var _ucd_lib_theme_sass_4_component_submenu_toggle_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ucd-lib/theme-sass/4_component/_submenu-toggle.css */ "./public/node_modules/@ucd-lib/theme-sass/4_component/_submenu-toggle.css.js");
/* harmony import */ var _ucd_lib_theme_sass_4_component_nav_quick_css_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ucd-lib/theme-sass/4_component/_nav-quick.css.js */ "./public/node_modules/@ucd-lib/theme-sass/4_component/_nav-quick.css.js");










function styles() {
  const elementStyles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`
    :host {
      display: block;
    }
    .slot-parent {
      display: none;
    }
    nav {
      display: none;
      overflow-y: hidden;
    }
    nav.open {
      display: block;
    }
    nav.transitioning {
      display: block;
    }
    .click-attached {
      cursor: pointer;
    }
    .submenu-toggle__icon {
      min-width: 40%;
    }
    @media (min-width: 992px) {
      .slot-parent {
        display: block;
      }
      ::slotted(*) {
        min-width: 1.1rem !important;
        max-width: 1.1rem !important;
        width: 1.1rem !important;
        margin-right: .75rem;
        color: #13639e;
        font-size: .875em;
    }
  }
  `;

  return [
    //normalizeStyles,
    //formStyles,
    _ucd_lib_theme_sass_2_base_class_misc_css_js__WEBPACK_IMPORTED_MODULE_5__["default"],
    _ucd_lib_theme_sass_4_component_submenu_toggle_css__WEBPACK_IMPORTED_MODULE_6__["default"],
    _ucd_lib_theme_sass_4_component_nav_quick_css_js__WEBPACK_IMPORTED_MODULE_7__["default"],
    elementStyles
  ];
}

function render() { 
return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
  ${this._hasCustomIcons ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
    <style>
      .quick-links--home-site li:first-child a:before {
        content: "";
        display: none;
      }
      .quick-links--home-site li:nth-child(2) a:before {
        content: "";
        display: none;
      }
      .quick-links--home-site li:nth-child(3) a:before {
        content: "";
        display: none;
      }
    </style>
  ` : (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)``}
  <style>
    nav {
      transition: height ${this.animationDuration + "ms"}
    }
  </style>
  <div class="quick-links">
    <button 
      class="quick-links__title"
      @click=${this._onBtnClick}
      aria-controls="quick-links" 
      aria-expanded="${this.opened}" 
      aria-label="Toggle ${this.title} Menu">
      ${this.title}<span class="submenu-toggle ${this.opened ? 'submenu-toggle--open' : ''}"><span class="submenu-toggle__icon">+</span></span>
    </button>
    <nav 
      id="quick-links" 
      class=${(0,lit_directives_class_map_js__WEBPACK_IMPORTED_MODULE_1__.classMap)(this._getNavClasses())} 
      style=${(0,lit_directives_style_map_js__WEBPACK_IMPORTED_MODULE_2__.styleMap)(this._getNavStyles())}
      aria-label="Quick Links Menu">
    <ul class="menu" id="menu">
      ${this._links.map((link, i) => (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
        <li>
          ${link.href ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
            <a href="${link.href}">${this._renderSlot(link)}${link.text}</a>
          ` : (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
            <a 
              class="click-attached" 
              tabindex="0"
              @click=${this._onItemClick}
              @keyup=${this._onItemKeyup}
              .index=${i}>${this._renderSlot(link)}${link.text}</a>
          `}
        </li>
      `)}
    </ul>
    </nav>
    
  </div>

`;}

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-search-form/ucd-theme-search-form.js":
/*!**********************************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-search-form/ucd-theme-search-form.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UcdThemeSearchForm)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _ucd_theme_search_form_tpl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ucd-theme-search-form.tpl.js */ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-search-form/ucd-theme-search-form.tpl.js");



/**
 * @class UcdThemeSearchForm
 * @classdesc Component class for rendering a basic search form.
 * 
 * Pattern Lab Url: 
 *  - http://dev.webstyleguide.ucdavis.edu/redesign/?p=molecules-search-form
 * 
 * @property {String} value - The search string
 * @property {String} placeholder - The input placeholder
 * @property {String} formAction - The action to be taken on form submit (optional)
 * @property {String} formMethod - The http method used on submit (default=POST)
 * @property {String} queryParam - The URL query parameter to use (default=searchterm)
 * 
 * @example
 *  <ucd-theme-form-search form-action="/url/to/post/to"></ucd-theme-form-search>
 *  <ucd-theme-form-search @search="${this._onSearch}"></ucd-theme-form-search>
 */
class UcdThemeSearchForm extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {

  static get properties() {
    return {
      value: {type: String},
      placeholder: {type: String, attribute: "placeholder"},
      formAction: {type: String, attribute: "form-action"},
      formMethod: {type: String, attribute: "form-method"},
      formClass: {type: String, attribute: "form-class"},
      labelText: {type: String, attribute: "label-text"},
      inputClass: {type: String, attribute: "input-class"},
      queryParam: {type: String, attribute: "query-param"}
    };
  }

  static get styles() {
    return (0,_ucd_theme_search_form_tpl_js__WEBPACK_IMPORTED_MODULE_1__.styles)();
  }

  constructor() {
    super();
    this.render = _ucd_theme_search_form_tpl_js__WEBPACK_IMPORTED_MODULE_1__.render.bind(this);
    this.formAction = "";
    this.formMethod = "POST";
    this.formClass = "";
    this.labelText = "Search";
    this.placeholder = "Search...";
    this.inputClass = "";
    this.value = "";
    this.queryParam = "searchterm";
  }

  /**
   * @method _onSubmit
   * @description Attached to form submit
   * @private
   * @param {Event} e - submit event
   */
  _onSubmit(e){
    if ( !this.formAction ) {
      e.preventDefault();
      e.stopPropagation();
      this._dispatchSearchEvent();
    }
  }

  /**
   * @method _onInput
   * @description Attached to search input change
   * @private
   * @param {Event} e - input event
   */
  _onInput(e){
    this.value = e.target.value;
  }

  /**
   * @method _dispatchSearchEvent
   * @description Fires 'search' custom event
   * @private
   */
  _dispatchSearchEvent() {
    let e = new CustomEvent('search', {
      detail: { 
        message: 'A search has been initiated', 
        searchTerm: this.value
      },
      bubbles: true,
      composed: true });
  
    this.dispatchEvent(e);
  }

}

customElements.define('ucd-theme-search-form', UcdThemeSearchForm);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-search-form/ucd-theme-search-form.tpl.js":
/*!**************************************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-search-form/ucd-theme-search-form.tpl.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render),
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _ucd_lib_theme_sass_normalize_css_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ucd-lib/theme-sass/normalize.css.js */ "./public/node_modules/@ucd-lib/theme-sass/normalize.css.js");
/* harmony import */ var _ucd_lib_theme_sass_6_utility_u_visibility_css_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ucd-lib/theme-sass/6_utility/_u-visibility.css.js */ "./public/node_modules/@ucd-lib/theme-sass/6_utility/_u-visibility.css.js");
/* harmony import */ var _ucd_lib_theme_sass_4_component_search_form_css_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ucd-lib/theme-sass/4_component/_search-form.css.js */ "./public/node_modules/@ucd-lib/theme-sass/4_component/_search-form.css.js");
/* harmony import */ var _ucd_lib_theme_sass_1_base_html_forms_css_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ucd-lib/theme-sass/1_base_html/_forms.css.js */ "./public/node_modules/@ucd-lib/theme-sass/1_base_html/_forms.css.js");








function styles() {
  let customCss = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`
    :host {
      display: block;
    }
    [hidden] {
      display: none !important;
    }
    .search-form__submit {
      line-height: 1.9;
      text-indent: .2em;
    }
  `;
  return [
    _ucd_lib_theme_sass_normalize_css_js__WEBPACK_IMPORTED_MODULE_1__["default"],
    _ucd_lib_theme_sass_6_utility_u_visibility_css_js__WEBPACK_IMPORTED_MODULE_2__["default"],
    _ucd_lib_theme_sass_1_base_html_forms_css_js__WEBPACK_IMPORTED_MODULE_4__["default"],
    _ucd_lib_theme_sass_4_component_search_form_css_js__WEBPACK_IMPORTED_MODULE_3__["default"],
    customCss
  ]
}

function render() { 
return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)` 
<form 
  @submit="${this._onSubmit}"
  action="${this.formAction}" 
  method=${this.formMethod} 
  class="search-form ${this.formClass}">

  <label for="search" class="u-hidden--visually">${this.labelText}</label>
  <input 
    type="text" 
    placeholder="${this.placeholder}" 
    id="search" 
    class="search-form__input ${this.inputClass}" 
    name=${this.queryParam} 
    @input="${this._onInput}"
    value="${this.value}">
  <button type="submit" class="search-form__submit">&#xf002; Submit
  </button>

</form>
`;}

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-search-popup/ucd-theme-search-popup.js":
/*!************************************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-search-popup/ucd-theme-search-popup.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UcdThemeSearchPopup)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _ucd_theme_search_popup_tpl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ucd-theme-search-popup.tpl.js */ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-search-popup/ucd-theme-search-popup.tpl.js");
/* harmony import */ var _utils_controllers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/controllers */ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/index.js");





/**
 * @class UcdThemeSearchPopup
 * @classdesc UI component class for displaying a search popup to be used in the site header
 *  
 * Patternlab URL: 
 *  - http://dev.webstyleguide.ucdavis.edu/redesign/?p=molecules-search-popup
 * 
 * @property {String} buttonText - The hidden innertext of the popup button.
 * @property {Boolean} opened - Whether the popup is open or not.
 * 
 * @example
 * <ucd-theme-search-popup>
 *   <ucd-theme-search-form
 *     @search="${e => console.log(e.detail.searchTerm)}">
 *   </ucd-theme-search-form>
 * </ucd-theme-search-popup>
 * 
 * <ucd-theme-search-popup>
 *   <input placeholder="A custom search element">
 * </ucd-theme-search-popup>
 */
class UcdThemeSearchPopup extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {

  static get properties() {
    return {
      buttonText: {type: String, attribute: "button-text"},
      opened: {type: Boolean},
      _defaultForm: {type: Boolean, state: true}
    };
  }

  static get styles() {
    return (0,_ucd_theme_search_popup_tpl_js__WEBPACK_IMPORTED_MODULE_1__.styles)();
  }

  constructor() {
    super();
    this.render = _ucd_theme_search_popup_tpl_js__WEBPACK_IMPORTED_MODULE_1__.render.bind(this);
    this.mutationObserver = new _utils_controllers__WEBPACK_IMPORTED_MODULE_2__.MutationObserverController(this);
    this.buttonText = "Toggle Search";
    this.opened = false;
    this._defaultForm = false;

  }

  /**
   * @method open
   * @description Displays the search input if in desktop view
   */
  open(){
    this.opened = true;
  }

  /**
   * @method close
   * @description Hides the search input if in desktop view
   */
  close(){
    this.opened = false;
  }

  /**
   * @method _onBtnClick
   * @description Attached to popup button
   * @private
   */
  _onBtnClick(){
    this.opened = !this.opened;
  }

  /**
   * @method _onChildListMutation
   * @description Fires when there are changes to this element's non-shadow DOM children
   * @private
   */
  _onChildListMutation(){
    if ( this.querySelector('ucd-theme-search-form') ){
      this._defaultForm = true;
    } else {
      this._defaultForm = false;
    }
  }

}

customElements.define('ucd-theme-search-popup', UcdThemeSearchPopup);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-search-popup/ucd-theme-search-popup.tpl.js":
/*!****************************************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/brand/ucd-theme-search-popup/ucd-theme-search-popup.tpl.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render),
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _ucd_lib_theme_sass_1_base_html_forms_css_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ucd-lib/theme-sass/1_base_html/_forms.css.js */ "./public/node_modules/@ucd-lib/theme-sass/1_base_html/_forms.css.js");
/* harmony import */ var _ucd_lib_theme_sass_4_component_search_popup_css_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ucd-lib/theme-sass/4_component/_search-popup.css.js */ "./public/node_modules/@ucd-lib/theme-sass/4_component/_search-popup.css.js");





function styles() {
  const elementStyles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`
    :host {
      display: block;
    }
  `;

  return [
    _ucd_lib_theme_sass_1_base_html_forms_css_js__WEBPACK_IMPORTED_MODULE_1__["default"],
    _ucd_lib_theme_sass_4_component_search_popup_css_js__WEBPACK_IMPORTED_MODULE_2__["default"],
    elementStyles];
}

function render() { 
return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
<button 
  class="search-popup__open ${this.opened ? 'search-popup__open--close' : ''}" 
  @click=${this._onBtnClick}>
  <span class="search-popup__open-icon">${this.buttonText}</span>
</button>
<div class="search-popup ${this.opened ? 'is-open' : ''}">
  ${this._defaultForm ? (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
    <div class="search-form">
      <slot></slot>
    </div>
  ` : (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`
    <slot></slot>
  `}

</div>

`;}

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-icon/ucdlib-icon.js":
/*!***************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-icon/ucdlib-icon.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UcdlibIcon)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _ucdlib_icon_tpl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ucdlib-icon.tpl.js */ "./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-icon/ucdlib-icon.tpl.js");



/**
 * @class UcdlibIcon
 * @classdesc Component class for displaying an icon
 * @property {String} icon - name of icon within a registered icon set.
 *  Format: ${iconset name}:${icon name}
 *  Or just the icon name if using the default ucdlib iconset.
 * @property {String} src -  If using ucdlib-icon without an iconset, you can set the src to be
 *  the URL of an individual icon image file. Note that this will take
 *  precedence over a given icon attribute.
 */
class UcdlibIcon extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {

  static get properties() {
    return {
      icon: {type: String},
      src: {type: String},
      _iconName: {type: String, state: true},
      _iconsetName: {type: String, state: true}
    };
  }

  static get styles() {
    return (0,_ucdlib_icon_tpl_js__WEBPACK_IMPORTED_MODULE_1__.styles)();
  }

  constructor() {
    super();
    this.render = _ucdlib_icon_tpl_js__WEBPACK_IMPORTED_MODULE_1__.render.bind(this);
    this.icon = "";
    this.src = "";

    this._iconName = "";
    this._iconsetName = "";
    this._default_iconset = "ucdlib";
    this._onAddedIconset = this._onAddedIconset.bind(this);
  }

  /**
   * @method disconnectedCallback
   * @description native web component life cycle method
   * @private
   */
  disconnectedCallback() {
    if ( this._setListener ){
      window.removeEventListener('ucdlib-iconset-added', this._onAddedIconset);
    }
    super.disconnectedCallback();
  }

  /**
   * @method willUpdate
   * @description Lit lifecyle method called right before element updates
   * @param {Map} props - Updated properties
   * @private
   */
  willUpdate(props){
    if ( props.has('icon') || props.has('src') ){
      if ( this.src ) {
        this._updateIcon();
      } else if ( this.icon ) {
        let parts = this.icon.split(":");
        this._iconName = parts.pop();
        this._iconsetName = parts.pop() || this._default_iconset;
        this._updateIcon();
      }
    }
  }

  /**
   * @method _onAddedIconset
   * @description Attached to custom event fired by a ucdlib-iconset element
   * @private
   */
  _onAddedIconset(){
    this._updateIcon();
  }

  /**
   * @method _updateIcon
   * @description Prepends a new svg or img icon to the shadowroot. 
   *  Called on icon or src property change.
   * @private
   */
  _updateIcon(){
    // using the icon attribute
    if ( this._usesIconSet() ) {
      
      // previously using the src attribute. remove it.
      if ( this._img && this._img.parentNode ) this.renderRoot.removeChild(this._img);

      // empty icon name, remove it
      if ( this._iconName === '') {
        if ( this._iconset ) this._iconset.removeIcon(this);
      
      // check if iconset exists, add event listener if it doesn't
      } else if ( this._iconsetName ){
        this._iconset = this._getIconset();
        if ( this._iconset && this._iconset.applyIcon ) {
          this._iconset.applyIcon(this, this._iconName);
          if ( this._setListener ){
            window.removeEventListener('ucdlib-iconset-added', this._onAddedIconset);
            this._setListener = false;
          }
        } else {
          if ( !this._setListener ){
            this._setListener = window.addEventListener('ucdlib-iconset-added', this._onAddedIconset);
          }
        }
      }

    // using the src attribute
    } else {
      if ( this._iconset ) this._iconset.removeIcon(this);
      if ( !this._img ) {
        this._img = document.createElement('img');
        this._img.style.width = '100%';
        this._img.style.height = '100%';
        this._img.draggable = false;
      }
      this._img.src = this.src;
      this.renderRoot.appendChild(this._img);
    }

  }

  /**
   * @method _usesIconSet
   * @description Element is using an icon set as opposed to an img src
   * @returns {Boolean}
   * @private
   */
  _usesIconSet(){
    return this.icon || !this.src;
  }

  /**
   * @method _getIconset
   * @description Return the specified ucdlib-iconset element from the head
   * @returns {Element}
   * @private
   */
  _getIconset(){
    return document.head.querySelector(`ucdlib-iconset[name=${this._iconsetName}]`);
  }
}

customElements.define('ucdlib-icon', UcdlibIcon);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-icon/ucdlib-icon.tpl.js":
/*!*******************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-icon/ucdlib-icon.tpl.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render),
/* harmony export */   styles: () => (/* binding */ styles)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


function styles() {
  const elementStyles = (0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`
    :host {
      display: block;
      vertical-align: middle;
      fill: var(--ucdlib-icon-fill-color, currentcolor);
      stroke: var(--ucdlib-icon-stroke-color, none);
      width: var(--ucdlib-icon-width, 24px);
      height: var(--ucdlib-icon-height, 24px);
      min-width: var(--ucdlib-icon-width, 24px);
      min-height: var(--ucdlib-icon-height, 24px);
    }
  `;

  return [elementStyles];
}

function render() { 
return (0,lit__WEBPACK_IMPORTED_MODULE_0__.html)`


`;}

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-icons/utils.js":
/*!**********************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-icons/utils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   renderIconSet: () => (/* binding */ renderIconSet)
/* harmony export */ });
/* harmony import */ var _ucd_lib_theme_elements_ucdlib_ucdlib_iconset_ucdlib_iconset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ucd-lib/theme-elements/ucdlib/ucdlib-iconset/ucdlib-iconset */ "./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-iconset/ucdlib-iconset.js");
/* harmony import */ var _ucd_lib_theme_elements_ucdlib_ucdlib_icon_ucdlib_icon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ucd-lib/theme-elements/ucdlib/ucdlib-icon/ucdlib-icon */ "./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-icon/ucdlib-icon.js");
/* harmony import */ var lit_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit-html */ "./public/node_modules/lit-html/development/lit-html.js");





/**
 * @description Creates iconset and moves to document head
 * @param {TemplateResult} icons - SVG html string of icons
 * @param {String} name - name of iconset. 
 * @param {Number} size  - size of icons
 * @param {String} label - Friendly name of iconset 
 */
function renderIconSet(icons, name, size=24, label=""){
  const containerId = `ucdlib-icons--${name}`;
  let container = document.getElementById(containerId);
  if ( !container ){
    container = document.createElement("div");
    container.style.display = "none";
    container.id = containerId;
    document.head.appendChild(container); 
  } 
  const template = (0,lit_html__WEBPACK_IMPORTED_MODULE_2__.html)`
    <ucdlib-iconset name=${name} size=${size} label=${label}>
      ${icons}
    </ucdlib-iconset>
  `;
  (0,lit_html__WEBPACK_IMPORTED_MODULE_2__.render)(template, container);
}



/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-iconset/ucdlib-iconset.js":
/*!*********************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-iconset/ucdlib-iconset.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UcdlibIconset)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _utils_mixins__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/mixins */ "./public/node_modules/@ucd-lib/theme-elements/utils/mixins/index.js");
/* harmony import */ var _utils_controllers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/controllers */ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/index.js");





/**
 * @class UcdlibIconset
 * @classdesc Component for creating svg iconsets to be consumed by the 'icon' attribute of ucdlib-icon
 * 
 * @property {String} name - Name of the icon set. Usage: <ucdlib-icon icon="{thisProperty}:{icon}"></ucdlib-icon>
 * @property {Number} size - The size of an individual icon. Note that icons must be square. 
 * @property {String} label - Optional friendly label for iconset.
 * @property {String} suppressWarnings - Suppress any "you're doing it wrong" console warnings
 * @example
 * <ucdlib-iconset name="arrows">
    <svg>
      <defs>
        <g id="back"><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"></path></g>
        <g id="downward"><path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"></path></g>
      </defs>
    </svg>
  </ucdlib-iconset>
 */
class UcdlibIconset extends (0,_utils_mixins__WEBPACK_IMPORTED_MODULE_1__.Mixin)(lit__WEBPACK_IMPORTED_MODULE_0__.LitElement)
  .with(_utils_mixins__WEBPACK_IMPORTED_MODULE_1__.MainDomElement) {

  static get properties() {
    return {
      name: {type: String},
      size: {type: Number},
      label: {type: String},
      suppressWarnings: {type: Boolean, attribute: 'suppress-warnings'},
      _iconMap: {type: Object, state: true}
    };
  }

  constructor() {
    super();
    this.mutationObserver = new _utils_controllers__WEBPACK_IMPORTED_MODULE_2__.MutationObserverController(this, {subtree: true, childList: true});

    this.name = "";
    this.label = "";
    this.size = 24;
    this._iconMap = {};
    this.suppressWarnings = false;
  }

  /**
   * @method updated
   * @description Lit lifecyle method called after element updates
   * @param {Map} props - Updated properties
   * @private
   */
  updated( props ){
    if (props.has('name') && this.name ) {
      this.dispatchLoadEvent();
    }
  }

  /**
   * @method firstUpdated
   * @description Lit lifecycle method when element is first updated
   */
  firstUpdated(){
    this.style.display = "none";
  }

  /**
   * @method dispatchLoadEvent
   * @description fires off a 'ucdlib-iconset-added' event so ucdlib-icon elements can re-render if applicable
   */
  dispatchLoadEvent(){
    this.dispatchEvent(
      new CustomEvent('ucdlib-iconset-added', {bubbles: true, composed: true})
    );
  }

  /**
   * @method getIconNames
   * @description Returns a list of icon names for this set
   * @returns {Array} 
   */
  getIconNames(){
    return Object.keys(this._iconMap);
  }

  /**
   * @method getLabel
   * @description Returns a friendly label of iconset
   * @returns {String}
   */
  getLabel(){
    if ( this.label ) return this.label;

    return this.name.replace(/-/g, " ");
  }

  /**
   * @method applyIcon
   * @description Adds icon to ucdlib-icon element from iconset
   * @param {Element} element - A ucdlib-icon element
   * @param {String} iconName - The icon identifier
   * @returns {Boolean}
   */
  applyIcon(element, iconName){
    this.removeIcon(element);
    let svg = this._cloneIcon(iconName);
    if ( svg ) {
      let eleRoot = this._getElementRoot(element);
      eleRoot.insertBefore(svg, eleRoot.childNodes[0]);
      return element._svgIcon = svg;
    }
    return null;
  }

  /**
   * @method removeIcon
   * @description Remove an icon from the given element by undoing the changes effected by `applyIcon`.
   * 
   * @param {Element} element The element from which the icon is removed.
   */
  removeIcon(element){
    if (element._svgIcon) {
      this._getElementRoot(element).removeChild(element._svgIcon);
      element._svgIcon = null;
    }
  }

  /**
   * @method _cloneIcon
   * @description Produce installable clone of the SVG element matching `id` in this
   * iconset, or `undefined` if there is no matching element.
   * @param {String} id - Icon id
   * @returns {Element} - an SVG element
   * @private
   */
  _cloneIcon(id){
    if ( !this._iconMap ) this._updateIconMap();
    if ( this._iconMap[id] ){
      let content = this._iconMap[id].cloneNode(true), 
        svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),
        viewBox =
          content.getAttribute('viewBox') || '0 0 ' + this.size + ' ' + this.size,
        cssText =
          'pointer-events: none; display: block; width: 100%; height: 100%;';
      svg.setAttribute('viewBox', viewBox);
      svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
      svg.setAttribute('focusable', 'false');
      svg.style.cssText = cssText;
      svg.appendChild(content).removeAttribute('id');
      return svg;
    }

    return null;
  }

  /**
   * @method _getElementRoot
   * @description Returns shadowroot if exists
   * @param {Element} element
   * @returns {Object}
   * @private
   */
  _getElementRoot(element){
    if ( element.renderRoot ) {
      return element.renderRoot;
    }
    if ( element.shadowRoot ) {
      return element.shadowRoot;
    }
    return element;
  }

  /**
   * @method _onChildListMutation
   * @description Fires when element child list changes
   * @private
   */
  _onChildListMutation(){
    this._updateIconMap();
  }

  /**
   * @method _updateIconMap
   * @description Sets the _iconMap property with object: {icon_id: icon}
   * @private
   */
  _updateIconMap(){
    let iconMap = {};
    this.querySelectorAll('g[id]').forEach(icon => {
      iconMap[icon.id] = icon;
    });

    if ( !Object.keys(iconMap).length && !this.suppressWarnings ) {
      console.warn('No g elements with an id attribute found!.');
    }
    this._iconMap = iconMap;
  }

}

customElements.define('ucdlib-iconset', UcdlibIconset);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-pages/ucdlib-pages.js":
/*!*****************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/ucdlib/ucdlib-pages/ucdlib-pages.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UcdlibPages)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");
/* harmony import */ var _utils_controllers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/controllers */ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/index.js");



/**
 * @class UcdlibPages
 * @description similar to the old iron-pages element, allows you to control which element is visible
 * based on child index or tag attribute
 * @property {String} selected - Denotes which child is currently displayed.
 *  If numeric, refers to index of child. Else, refers to child id.
 *  If attrForSelected is used, refers to the value of that attribute instead of id.
 * @property {String} attrForSelected - Use a custom attribute instead of id for matching 'selected'
 * @property {String} selectedAttribute - Will assign attribute to selected child.
 * 
 * <ucdlib-pages selected="page2" attr-for-selected="id">
 *   <div id="page1">Test 1</div>
 *   <div id="page2">Test 2</div>
 * </ucdlib-pages>
 */
class UcdlibPages extends lit__WEBPACK_IMPORTED_MODULE_0__.LitElement {

  static get properties() {
    return {
      selected : {type: String},
      attrForSelected : {
        attribute: 'attr-for-selected',
        type: String
      },
      selectedAttribute : {
        attribute: 'selected-attribute',
        type: String
      }
    };
  }

  constructor() {
    super();
    this.mutationObserver = new _utils_controllers__WEBPACK_IMPORTED_MODULE_1__.MutationObserverController(this);
  }

  /**
   * @method createRenderRoot
   * @description override createRenderRoot, no need for shadowdom
   * 
   * @returns {Element}
   */
  createRenderRoot() {
    return this;
  }

  updated(props) {
    if( props.has('attrForSelected') || props.has('selectedAttribute') || props.has('selected') ) {
      this._onChange();
    }
  }
  
  /**
   * @method _onChildListMutation
   * @description called when children change via MutationObserverController
   */
  _onChildListMutation() {
    this._onChange();
  }

  /**
   * @method _onChange
   * @description update visibility 
   */
  _onChange() {
    let attr = this.attrForSelected || 'id';
    let selected = 0;

    // find what the selected attribute is
    if( this.selected !== undefined || this.selected !== null ) {
      if( typeof this.selected === 'string' && /^\d+$/.test(this.selected) ) {
        selected = parseInt(this.selected);
      } else {
        selected = this.selected;
      }
    }

    // loop through and hide/show children
    let found = this._updateVisibility(selected, attr);

    // if nothing found, check fallback selection
    if( !found && this.fallbackSelection ) {
      if( typeof this.selected === 'string' && this.selected.match(/\d+/) ) {
        selected = parseInt(this.fallbackSelection);
      } else {
        selected = this.fallbackSelection;
      }

      found = this._updateVisibility(selected, attr);
    } 

    if( !found ) {
      console.warn('ucdlib-pages was unable match: ', selected);
    }
  }

  /**
   * @method _updateVisibility
   * @description run update loop based on selected value and attribute to use if
   * selected is not a number.
   * 
   * @param {String|Number} selected 
   * @param {String} attr 
   * @returns {Boolean}
   */
  _updateVisibility(selected, attr) {
    let children = [... this.children];
    let found = false;
    let useIndex = (typeof selected === 'number');
    let val;

    for( let i = 0; i < children.length; i++ ) {
      if( useIndex ) {
        this._select((i === selected), children[i], this.selectedAttribute);
        if( !found ) found = (i === selected);
        continue;
      }

      val = children[i].getAttribute(attr);
      this._select((val === selected), children[i], this.selectedAttribute);
      if( !found ) found = (val === selected);
    }

    return found;
  }

  /**
   * @method _select
   * @description select attributes
   * 
   * @param {Boolean} value 
   * @param {Element} child 
   * @param {String} attribute 
   */
  _select(value, child, attribute) {
    if( value ) {
      if( attribute ) child.setAttribute(attribute, attribute);
      child.style.display = 'block';
    } else {
      if( attribute ) child.removeAttribute(attribute, attribute);
      child.style.display = 'none';
    }
  }

}

customElements.define('ucdlib-pages', UcdlibPages);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/break-points.js":
/*!***************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/utils/controllers/break-points.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BreakPointsController: () => (/* binding */ BreakPointsController)
/* harmony export */ });
class BreakPointsController{
  
  constructor(host, mobileBreakPoint=992){
    (this.host = host).addController(this);

    this.mobileBreakPoint = mobileBreakPoint;
  }

  /**
  * @method isDesktop
  * @description Is the desktop view currently active?
  * @returns {Boolean}
  */
   isDesktop(){
    return window.innerWidth >= this.mobileBreakPoint;
  }

  /**
   * @method isMobile
   * @description Is the mobile view currently active?
   * @returns {Boolean}
   */
  isMobile(){
    return !this.isDesktop();
  }  
}

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/index.js":
/*!********************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/utils/controllers/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BreakPointsController: () => (/* reexport safe */ _break_points__WEBPACK_IMPORTED_MODULE_0__.BreakPointsController),
/* harmony export */   IntersectionObserverController: () => (/* reexport safe */ _intersection_observer__WEBPACK_IMPORTED_MODULE_1__.IntersectionObserverController),
/* harmony export */   MutationObserverController: () => (/* reexport safe */ _mutation_observer__WEBPACK_IMPORTED_MODULE_2__.MutationObserverController),
/* harmony export */   PopStateObserverController: () => (/* reexport safe */ _popstate_observer__WEBPACK_IMPORTED_MODULE_3__.PopStateObserverController),
/* harmony export */   SilsPrimoController: () => (/* reexport safe */ _sils_primo__WEBPACK_IMPORTED_MODULE_4__.SilsPrimoController),
/* harmony export */   WaitController: () => (/* reexport safe */ _wait__WEBPACK_IMPORTED_MODULE_5__.WaitController)
/* harmony export */ });
/* harmony import */ var _break_points__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./break-points */ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/break-points.js");
/* harmony import */ var _intersection_observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./intersection-observer */ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/intersection-observer.js");
/* harmony import */ var _mutation_observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mutation-observer */ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/mutation-observer.js");
/* harmony import */ var _popstate_observer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./popstate-observer */ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/popstate-observer.js");
/* harmony import */ var _sils_primo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sils-primo */ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/sils-primo.js");
/* harmony import */ var _wait__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./wait */ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/wait.js");










/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/intersection-observer.js":
/*!************************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/utils/controllers/intersection-observer.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IntersectionObserverController: () => (/* binding */ IntersectionObserverController)
/* harmony export */ });
/**
 * @class IntersectionObserverController
 * @classdesc Lit controller that attaches an IntersectionObserver to an element
 * 
 * @property {LitElement} host - 'this' from a Lit element
 * @property {Object} options - IntersectionObserver options. Default: {}
 * @property {String} callback - Name of element method called on intersection. Default: '_onIntersection'
 * @property {Boolean} observeSelf - Automatically observes host element on connected. Default: true
 * 
 * @examples
 * // To watch for element's intersection with viewport, instantiate class in element constructor:
 * new IntersectionObserverController(this)
 * 
 * // Or watch for a specific element within your Lit element:
 * // In constructor:
 * this.intersectionObserver = new IntersectionObserverController(this, {}, "_onMyDivIntersection", false);
 * // In firstUpdated:
 * let myDiv = this.renderRoot.getElementById('my-div');
 * this.intersectionObserver.observer.observe(my-div);
 * 
 */
class IntersectionObserverController{

  constructor(host, options = {}, callback = "_onIntersection", observeSelf = true){
    (this.host = host).addController(this);
    this.options = options;
    this.callback = callback;
    this.observeSelf = observeSelf;
  }

  hostConnected(){
    this.observer = new IntersectionObserver(this._callback.bind(this), this.options);
    if ( this.observeSelf ) {
      this.observer.observe(this.host);
    }
  }

  hostDisconnected(){
    this.observer.disconnect();
  }

  _callback(entries, observer){
    if ( !this.host[this.callback]){
      console.warn(
        `Element has no '${this.callback}' method. 
        Either add this method, or change the 'callback' argument on controller instantiation.`
      );
      return;
    }
    this.host[this.callback](entries, observer);

  }
}

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/mutation-observer.js":
/*!********************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/utils/controllers/mutation-observer.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MutationObserverController: () => (/* binding */ MutationObserverController)
/* harmony export */ });
/**
 * @class MutationObserverController
 * @classdesc Lit controller that attaches a MutationObserver to an element
 * 
 * @property {LitElement} host - 'this' from a Lit element
 * @property {Object} options - MutationObserver.observe options. Default: {childList: true}
 * @property {String} callback - Name of element method called on mutation. Default: '_onChildListMutation'
 * 
 * @examples
 * // For a basic childlist observer, instantiate this class in your element:
 *  mutationObserver = new MutationObserverController(this);
 * 
 * // or customize the options/callback:
 *  mutationObserver = new MutationObserverController(this, {childList: true, attributes: true}, 'aDifferentCallbackMethod');
 */
class MutationObserverController {

  constructor(host, options = {childList: true}, callback = "_onChildListMutation"){
    (this.host = host).addController(this);
    this.options = options;
    this.callback = callback;
  }

  hostConnected(){

    this._observer = new MutationObserver(
      (mutationsList, observer) => this._onMutation(mutationsList, observer)
    );
    this._observer.observe(this.host, this.options);
    this._onMutation();
  }

  hostDisconnected(){
    this._observer.disconnect();
  }

  _onMutation(mutationsList, observer){
    if ( !this.host[this.callback]){
      console.warn(
        `Element has no '${this.callback}' method. 
        Either add this method, or change the 'callback' argument on instantiation.`
      );
      return;
    }
    this.host[this.callback](mutationsList, observer);
  }
}

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/popstate-observer.js":
/*!********************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/utils/controllers/popstate-observer.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PopStateObserverController: () => (/* binding */ PopStateObserverController)
/* harmony export */ });
/**
 * @class PopStateObserverController
 * @classdesc Controller for attaching a popstate event listener to a Lit element.
 * 
 * @property {LitElement} host - 'this' from a Lit element
 * @property {String} callback - Name of element method called on popstate. Default: '_onPopstate'
 * 
 * @examples
 * // Instantiate this controller in the constructor of your element
 * new PopStateObserverController(this, "_onLocationChange");
 */
class PopStateObserverController{

  constructor(host, callback="_onPopstate"){
    (this.host = host).addController(this);
    this.callback = callback;
    this._onPopstate = this._onPopstate.bind(this);
  }

  hostConnected(){
    window.addEventListener('popstate', this._onPopstate);
  }

  hostDisconnected(){
    window.removeEventListener('popstate', this._onPopstate);
  }

  _onPopstate(e){
    if ( !this.host[this.callback]){
      console.warn(
        `Element has no '${this.callback}' method. 
        Either add this method, or change the 'callback' argument on instantiation.`
      );
      return;
    }
    let locationObject = this._getLocationObject();
    this.host[this.callback](locationObject, e);

  }

  _getLocationObject(){
    let location = {
      fullpath : window.location.href.replace(window.location.origin, '').replace(/^\/+/, '/'),
      pathname : window.location.pathname.replace(/^\/+/, '/'),
      path : window.location.pathname.replace(/(^\/+|\/+$)/g, '').split('/'),
      query : new URLSearchParams(window.location.search),
      hash : window.location.hash.replace(/^#/, '')
    };
    return location;
  }
}

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/sils-primo.js":
/*!*************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/utils/controllers/sils-primo.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SilsPrimoController: () => (/* binding */ SilsPrimoController)
/* harmony export */ });
/**
 * @class SilsPrimoController
 * @classdesc Utility for interacting with UC Libraries' discovery tool
 * 
 * @property {LitElement} host - 'this' from a Lit element
 * @property {Object} config - Basic Primo configuration values (host, uris, etc)
 */
class SilsPrimoController{

  /**
   * @method constructor
   * @description Called on instantiation
   * @param {LitElement} host - Element
   * @param {Object} config - Config values
   */
  constructor(host, config={}){
    (this.host = host).addController(this);
    this.updateConfig(config);
  }

  /**
   * @method updateConfig
   * @description Updates the config property.
   * @param {Object} config - Values to overide the default.
   */
  updateConfig(config){
    const UCD_TAB = "LibraryCatalog";
    let _config = {
      host: "https://search.library.ucdavis.edu",
      paths: {
        search: "discovery/search",
        browse: "discovery/browse"
      },
      defaultParams: {
        vid: "01UCD_INST:UCD"
      },
      corpora: {
        everything: {
          tab: "UCSILSDefaultSearch",
          scope: "DN_and_CI"
        },
        uc: {
          tab: "UCSDiscoveryNetwork",
          scope: "UCSDiscoveryNetwork"
        },
        ucd: {
          tab: UCD_TAB,
          scope: "MyInstitution",
        },
        specialCollections: {
          tab: UCD_TAB,
          scope: "SSPEC"
        },
        medical: {
          tab: UCD_TAB,
          scope: "BLAISDELL"
        },
        healthSciences: {
          tab: UCD_TAB,
          scope: "CARLSON"
        },
        law: {
          tab: UCD_TAB,
          scope: "Mabie"
        }
      }
    };

    this.config = Object.assign(_config, config);
  }

  /**
   * @method makeSearchUrl
   * @description Makes a Primo Search URL
   * @param {String} query - A search term or phrase
   * @param {String} corpus - The bib corpus to search against. 
   *   Sets 'tab' and 'search_scope' params. Must be a recognized keyword in the corpora config object:
   *  everything, uc, ucd, specialCollections, medical, healthSciences, law
   * @param {Boolean} advanced - Expands the advanced search interface
   * @param {Object} additionalParams - Any additional url params. Has the final say.
   * @returns 
   */
  makeSearchUrl( query, corpus="everything", advanced=false, additionalParams={} ){
    let url = `${this._trailingSlashIt(this.config.host)}${this.config.paths.search}`;

    let params = Object.assign({}, this.config.defaultParams);

    if ( advanced ) {
      params['mode'] = 'advanced';
    }

    if ( query ) {
      params['query'] = 'any,contains,' + query.replace(/,/g, ' ');
    }

    if ( this.config.corpora[corpus] ) {
      params['tab'] = this.config.corpora[corpus].tab;
      params['search_scope'] = this.config.corpora[corpus].scope;
    } else {
      console.warn(`${corpus} is not a recognized corpus`);
    }

    if ( additionalParams ){
      Object.assign(params, additionalParams);
    } 

    params = new URLSearchParams(params);
    return `${url}?${params.toString()}`;
  }

  /**
   * @method _trailingSlashIt
   * @description Adds trailing slash to string if not already present
   * @private 
   * @param {String} str 
   * @returns 
   */
  _trailingSlashIt(str){
    if ( str.endsWith('/') ){
      return str;
    }
    return str + "/";
  }
}

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/utils/controllers/wait.js":
/*!*******************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/utils/controllers/wait.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WaitController: () => (/* binding */ WaitController)
/* harmony export */ });
class WaitController{

  constructor(host){
    (this.host = host).addController(this);
  }

  /**
   * @method wait
   * @description Wait for the specified amount of time
   * @param {Number} time - Time to wait (ms)
   * @returns 
   */
  async wait(time){
    return new Promise(resolve => {
      setTimeout(resolve, time);
    });
  }

  /**
   * @method waitForUpdate
   * @description Requests and waits for Lit update.
   */
   async waitForUpdate(){
    this.host.requestUpdate();
    await this.host.updateComplete;
  }

  /**
   * @method waitForFrames
   * @description Wait for specified number of animation frames
   * @param {Number} ct Number of frames
   */
   async waitForFrames(ct=1) {
    for (let i = 0; i < ct; i++) {
      await new Promise(resolve => {
        requestAnimationFrame(resolve);
      });
    }
  }


}

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/utils/mixins/index.js":
/*!***************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/utils/mixins/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MainDomElement: () => (/* reexport safe */ _main_dom_element_js__WEBPACK_IMPORTED_MODULE_1__.MainDomElement),
/* harmony export */   Mixin: () => (/* reexport safe */ _mixin_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   NavElement: () => (/* reexport safe */ _nav_element_js__WEBPACK_IMPORTED_MODULE_2__.NavElement)
/* harmony export */ });
/* harmony import */ var _mixin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mixin.js */ "./public/node_modules/@ucd-lib/theme-elements/utils/mixins/mixin.js");
/* harmony import */ var _main_dom_element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./main-dom-element.js */ "./public/node_modules/@ucd-lib/theme-elements/utils/mixins/main-dom-element.js");
/* harmony import */ var _nav_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nav-element.js */ "./public/node_modules/@ucd-lib/theme-elements/utils/mixins/nav-element.js");






/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/utils/mixins/main-dom-element.js":
/*!**************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/utils/mixins/main-dom-element.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MainDomElement: () => (/* binding */ MainDomElement)
/* harmony export */ });
/**
 * @function MainDomElement
 * @param {Class} superClass - LitElement or child class.
 * @description set render context for lit element to main DOM instead of the
 * default shadow root
 * 
 * @returns {Class} LitElement updated createRenderRoot function.
 */
const MainDomElement = (superClass) => class extends superClass {

  /**
   * @method createRenderRoot
   * @description set the root element to render into
   * 
   * @returns {LitElement}
   */
  createRenderRoot() {
    return this;
  }

};



/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/utils/mixins/mixin.js":
/*!***************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/utils/mixins/mixin.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * From:
 * https://stackoverflow.com/questions/41839198/applying-behaviors-with-js-mixins-in-polymer-2
 **/
class MixinBuilder {  
  constructor(superclass) {
    this.superclass = superclass;
  }
  with(...mixins) { 
    return mixins.reduce((c, mixin) => mixin(c), this.superclass);
  }
}
const Mixin = (superclass) => new MixinBuilder(superclass);

// Set global if available
// Hummmm...
// if( typeof window !== 'undefined' ) { 
//   window.Mixin = Mixin;
// }
  
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Mixin);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-elements/utils/mixins/nav-element.js":
/*!*********************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-elements/utils/mixins/nav-element.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NavElement: () => (/* binding */ NavElement)
/* harmony export */ });
/**
 * @function NavElement
 * @param {Class} superClass - LitElement or child class.
 * @description Adds utilities for navigation to a LitElement
 * 
 * @returns {Class} LitElement with Nav utilities attached
 */
const NavElement = (superClass) => class extends superClass {

  constructor() {
    super();
    this.navItems = [];
    this.maxDepth = 2;
  }

  /**
   * @method parseChildren
   * @description Creates a tree-like nav Array structure from element children
   * @param {HTMLCollection} children - Element children (non-shadow)
   * @returns {Array}
   */
  parseNavChildren( children=this.children ){
    if ( !children ) return [];
    children = Array.from(this.children);
    let navItems = children.map((child) => this._makeNavItemTree(child)).filter(navItem => navItem.linkText);
    return navItems;
  }

  /**
   * @method _makeNavItemTree
   * @private
   * @description Extracts menu item data from DOM Element
   * @param {Element} ele - Element
   * @returns {Object} Formatted object describing the menu item and its children
   */
  _makeNavItemTree(ele){
    let linkText, href, subItems = [], isOpen=false, inlineStyles={}, newTab=false, mobileOnly=false, desktopOnly=false;
    if ( ele.tagName === 'LI' && ele.children.length > 0) ele = ele.children[0];

    if ( ele.tagName === 'A' ) {
      linkText = ele.innerText;
      href = ele.href;
    } else if ( ele.tagName === 'LI' ) {
      linkText = ele.innerText;
    } else if ( ele.tagName === 'OL' || ele.tagName === 'UL' ) {
      linkText = ele.getAttribute('link-text');
      href = ele.getAttribute('href');
      isOpen = ele.hasAttribute('is-open');

      for (const child of Array.from(ele.children)) {
        let childItem = this._makeNavItemTree(child);
        if ( childItem.linkText ) subItems.push(childItem);
      }
    }
    if (ele.getAttribute('target') == '_blank') newTab = true;
    if ( ele.hasAttribute('mobile-only') ) mobileOnly = true;
    if ( ele.hasAttribute('desktop-only') ) desktopOnly = true;
    if ( linkText ) linkText = linkText.trim();
    return {linkText, href, subItems, isOpen, inlineStyles, newTab, mobileOnly, desktopOnly};
  }

  /**
   * @method getNavItem
   * @description Retrieves an item from the navItems array.
   * @param {Array} location - Coordinates of the item in the 'navItems' array. i.e. [0, 1, 4].
   * @returns {Object}
   */
  getNavItem(location){
    let accessor = "this.navItems";
    if ( location && location.length > 0) {
      accessor += "[" + location.join("].subItems[") + "]";
    }
    return eval(accessor);
  }

  /**
   * @method itemHasSubNav
   * @description Utility function for determining if a menu has subitems
   * @param {Object} navItem - A member of the navItems array.
   * @returns {Boolean}
   */
  itemHasSubNav(navItem){
    if ( navItem && navItem.subItems && navItem.subItems.length) return true;
    return false;
  }

  /**
   * @method clearMobileAnimationStyles
   * @description Removes inline styles on a nav element (used for mobile transition animation)
   * @param {Object} navItem - Member of the this.navItems array
   */
  clearItemInlineStyles(navItem){
    if (
      navItem &&
      navItem.inlineStyles && 
      Object.keys(navItem.inlineStyles).length > 0 
    ) {
      navItem.inlineStyles = {};
      this.requestUpdate();
    }
  }
};



/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/1_base_html/_forms.css.js":
/*!***************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/1_base_html/_forms.css.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

fieldset {
  margin: 1rem 0;
  padding: 1rem;
  border: 1px solid #f7fafd;
  border-top: 3px solid #022851;
}
fieldset > legend {
  padding: 0.25rem;
  font-size: 1.125rem;
}

label {
  display: block;
  padding-bottom: 0.25rem;
  color: #022851;
  font-weight: 700;
}

input,
select,
textarea {
  margin: 0;
  padding: 0.25rem 0.75rem;
  border: 1px solid #999;
  border-radius: 0;
  background-color: #fff;
  background-image: none;
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.075) inset;
  color: #13639e;
  font-family: inherit;
  outline: 0;
}
input:focus,
select:focus,
textarea:focus {
  border-color: #ffbf00;
  background-color: #fffbed;
  outline: none;
}

input,
select {
  height: 2.5rem;
}

input,
textarea,
select {
  width: 100%;
}

[type=text],
[type=search],
[type=url],
[type=number],
textarea {
  appearance: none;
}

button,
[type=submit] {
  cursor: pointer;
}
button:focus,
[type=submit]:focus {
  color: #00b2e3;
}

[type=checkbox],
[type=radio] {
  width: auto;
  height: auto;
  margin-right: 0.3em;
}

[type=search] {
  box-sizing: border-box;
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/1_base_html/_headings.css.js":
/*!******************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/1_base_html/_headings.css.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

h1 {
  margin: 0.75em 0 0.25em;
  padding: 0;
  color: #022851;
  font-size: 1rem;
  font-style: normal;
  font-weight: 800;
  line-height: 1.2;
  font-size: 1.91rem;
}
h1:first-child {
  margin-top: 0;
}
h1 a {
  color: #022851;
  text-decoration: underline;
}
h1 a:hover, h1 a:focus {
  color: #022851;
  text-decoration: none;
}
@media (min-width: 768px) {
  h1 {
    font-size: 2.94rem;
  }
}

h2 {
  margin: 0.75em 0 0.25em;
  padding: 0;
  color: #022851;
  font-size: 1rem;
  font-style: normal;
  font-weight: 800;
  line-height: 1.2;
  color: #13639e;
  font-size: 1.6055rem;
}
h2:first-child {
  margin-top: 0;
}
@media (min-width: 768px) {
  h2 {
    font-size: 2.0995rem;
  }
}
h2 a {
  color: #13639e;
  text-decoration: underline;
}
h2 a:hover, h2 a:focus {
  color: #13639e;
  text-decoration: none;
}

h3 {
  margin: 0.75em 0 0.25em;
  padding: 0;
  color: #022851;
  font-size: 1rem;
  font-style: normal;
  font-weight: 800;
  line-height: 1.2;
  color: #666;
  font-size: 1.3325rem;
}
h3:first-child {
  margin-top: 0;
}
@media (min-width: 768px) {
  h3 {
    font-size: 1.7425rem;
  }
}
h3 a {
  color: #666;
  text-decoration: underline;
}
h3 a:hover, h3 a:focus {
  color: #666;
  text-decoration: none;
}

h4 {
  margin: 0.75em 0 0.25em;
  padding: 0;
  color: #022851;
  font-size: 1rem;
  font-style: normal;
  font-weight: 800;
  line-height: 1.2;
  font-size: 1.092rem;
}
h4:first-child {
  margin-top: 0;
}
h4 a {
  color: #022851;
  text-decoration: underline;
}
h4 a:hover, h4 a:focus {
  color: #022851;
  text-decoration: none;
}
@media (min-width: 768px) {
  h4 {
    font-size: 1.428rem;
  }
}

h5 {
  margin: 0.75em 0 0.25em;
  padding: 0;
  color: #022851;
  font-size: 1rem;
  font-style: normal;
  font-weight: 800;
  line-height: 1.2;
  font-size: 1rem;
}
h5:first-child {
  margin-top: 0;
}
h5 a {
  color: #022851;
  text-decoration: underline;
}
h5 a:hover, h5 a:focus {
  color: #022851;
  text-decoration: none;
}
@media (min-width: 768px) {
  h5 {
    font-size: 1.207rem;
  }
}

h6 {
  margin: 0.75em 0 0.25em;
  padding: 0;
  color: #022851;
  font-size: 1rem;
  font-style: normal;
  font-weight: 800;
  line-height: 1.2;
  font-size: 1rem;
}
h6:first-child {
  margin-top: 0;
}
h6 a {
  color: #022851;
  text-decoration: underline;
}
h6 a:hover, h6 a:focus {
  color: #022851;
  text-decoration: none;
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/2_base_class/_misc.css.js":
/*!***************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/2_base_class/_misc.css.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

.menu {
  margin: 0;
  padding: 0 0 0 1.25rem;
  padding-left: 0;
  list-style: none;
}
.menu li {
  list-style: none;
}
.menu li {
  margin: 0;
  padding: 0 0 0 1.25rem;
  padding-left: 0;
  list-style: none;
}
.menu li li {
  list-style: none;
}

.view-all {
  display: block;
  padding-top: 0.5rem;
  border-top: 1px solid #cce0f3;
}

.sf-underline {
  border-bottom: 1px solid #f7fafd;
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/4_component/_header.css.js":
/*!****************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/4_component/_header.css.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

.header {
  background-color: #fff;
  box-shadow: 0 1px 1px rgba(2, 40, 81, 0.15);
}
.header__bar {
  display: flex;
  align-items: center;
  justify-content: flex-end;
  min-height: 2rem;
  background-color: #d8d8d8;
}
@media (max-width: 991px) {
  .header__bar {
    display: none;
  }
}
.header__university {
  display: flex;
  align-items: center;
  height: 2rem;
  padding-right: 0.75rem;
  background-color: #e5e5e5;
}
.header__university:before {
  width: 0.75rem;
  height: 2rem;
  margin-right: 0.75rem;
  margin-left: -0.75rem;
  background-color: #e5e5e5;
  clip-path: polygon(93% 0, 110% 0, 110% 102%, 0% 102%);
  content: "";
}
.header__university a {
  display: flex;
  margin-left: 0.5rem;
}
.header .ucd-logo {
  width: auto;
  height: 1.25rem;
}
@media (min-width: 992px) {
  .header .ucd-logo {
    height: 0.75rem;
  }
}
.header__navbar {
  background-color: #022851;
  box-shadow: 0 2px 1px rgba(2, 40, 81, 0.15);
}
.has-mega .header__navbar {
  background-color: #fff;
}

.site-logo {
  max-height: 6.25rem;
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/4_component/_mobile-bar.css.js":
/*!********************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/4_component/_mobile-bar.css.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

.mobile-bar {
  display: flex;
  align-items: center;
  overflow: hidden;
  min-height: 3.25rem;
  background-color: #022851;
}
@media (min-width: 992px) {
  .mobile-bar {
    display: none;
  }
}
.mobile-bar__nav-toggle {
  position: relative;
  display: flex;
  flex-shrink: 0;
  margin-right: 1rem;
  background-color: #13639e;
}
.mobile-bar__nav-toggle:before {
  position: absolute;
  right: -1rem;
  width: 1rem;
  height: 100%;
  background-color: #022851;
  content: "";
  transform: skewX(16deg);
}
.mobile-bar__nav-toggle:after {
  width: 1rem;
  margin-left: 0.5rem;
  background-color: #14447a;
  content: "";
  transform: skewX(16deg);
}
.mobile-bar__fixed-site-name {
  z-index: 1;
  visibility: hidden;
  width: 0;
  height: 0;
  padding-right: 1rem;
  color: #fff;
  font-size: 1.125rem;
  font-weight: 700;
  line-height: 1;
  opacity: 0;
  transition: visibility 0s, opacity 0.5s linear;
}
@media (min-width: 768px) {
  .mobile-bar__fixed-site-name {
    font-size: 1.25rem;
    line-height: 1;
  }
}
.is-fixed .mobile-bar__fixed-site-name {
  visibility: visible;
  width: auto;
  height: auto;
  opacity: 1;
}
.mobile-bar__fixed-site-name a {
  color: #fff;
  text-decoration: none;
}
.mobile-bar__fixed-site-name a:hover {
  text-decoration: none;
}
.mobile-bar__university {
  margin-right: 1rem;
  margin-left: auto;
  line-height: 1;
}
.is-fixed .mobile-bar__university {
  display: none;
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/4_component/_nav-off-canvas.css.js":
/*!************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/4_component/_nav-off-canvas.css.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

@media (max-width: 991px) {
  .off-canvas {
    position: absolute;
    z-index: 830;
    width: 70vw;
    min-width: 15rem;
    height: 100%;
    background: #fff;
    transition: all 0.3s;
  }
  .off-canvas__container {
    position: static;
  }
  .menu--hidden .off-canvas__container {
    display: none;
  }
  .off-canvas--fixed, .l-header--fixed .off-canvas {
    position: fixed;
    z-index: 1000;
    overflow: auto;
  }
  .off-canvas--fixed .off-canvas__container, .l-header--fixed .off-canvas .off-canvas__container {
    padding-bottom: 9rem;
  }
  .off-canvas--left {
    left: 0;
  }
  .menu--closed .off-canvas--left {
    transform: translateX(-105%);
  }
  .off-canvas--right {
    right: 0;
  }
  .menu--closed .off-canvas--right {
    transform: translateX(105%);
  }
  .menu--open .off-canvas {
    box-shadow: 0 10px 10px 5px rgba(25, 25, 25, 0.4);
  }
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/4_component/_nav-primary.css.js":
/*!*********************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/4_component/_nav-primary.css.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

@charset "UTF-8";
.primary-nav {
  min-height: 3.25rem;
  background-color: #fff;
}
@media (min-width: 992px) {
  .primary-nav {
    background-color: transparent;
    font-size: 0.85rem;
  }
  .primary-nav ul ul {
    display: none;
  }
  .primary-nav li {
    float: left;
  }
  .primary-nav li:hover ul {
    background-color: #fffbed;
  }
  .primary-nav li li {
    float: none;
  }
  .primary-nav li:hover > .primary-nav__top-link a, .primary-nav li:focus-within > .primary-nav__top-link a, .primary-nav li:hover > .primary-nav__top-link .primary-nav__nolink {
    color: #022851;
  }
  .primary-nav .submenu-toggle {
    display: none;
  }
}
.primary-nav a, .primary-nav__nolink {
  display: flex;
  align-items: center;
  padding: 0.75rem;
  border-bottom: 0.15rem solid #fff;
  background-color: #dbeaf7;
  color: #022851;
  font-weight: 700;
  line-height: 1.5rem;
  text-decoration: none;
}
@media (min-width: 992px) {
  .primary-nav a, .primary-nav__nolink {
    margin-left: 1rem;
    padding: 0;
    border-bottom: 0;
    background-color: transparent;
    font-weight: 700;
    line-height: 3.25rem;
  }
  .primary-nav a:before, .primary-nav__nolink:before {
    width: 1rem;
    height: 3.25rem;
    margin-right: 0.5rem;
    margin-left: -1rem;
    background-color: transparent;
    clip-path: polygon(93% 0, 110% 0, 110% 102%, 0% 102%);
    content: "";
  }
  .primary-nav a:focus:before, .primary-nav a:hover:before, .primary-nav__nolink:focus:before, .primary-nav__nolink:hover:before {
    background-color: #ffbf00;
  }
  .primary-nav a:after, .primary-nav__nolink:after {
    z-index: 1;
    width: 1rem;
    height: 3.25rem;
    margin-right: -1rem;
    margin-left: 0.5rem;
    background-color: transparent;
    clip-path: polygon(-2px -2px, 100% -2px, 7% 102%, -2px 100%);
    content: "";
  }
  .primary-nav a:focus:after, .primary-nav a:hover:after, .primary-nav__nolink:focus:after, .primary-nav__nolink:hover:after {
    background-color: #ffbf00;
  }
}
.primary-nav a:hover, .primary-nav__nolink:hover {
  background-color: #ffbf00;
}
.primary-nav a:focus,
.primary-nav a .active, .primary-nav__nolink:focus,
.primary-nav__nolink .active {
  background-color: #ffbf00;
}
@media (min-width: 992px) {
  .primary-nav__top-link a, .primary-nav__top-link .primary-nav__nolink {
    color: #fff;
    white-space: nowrap;
  }
  .primary-nav__top-link a:hover, .primary-nav__top-link .primary-nav__nolink:hover {
    color: #022851;
  }
}
.primary-nav li li a, li li .primary-nav__nolink {
  flex-grow: 1;
  border-color: #fff;
  background-color: #fde9ac;
  font-weight: 400;
}
@media (max-width: 991px) {
  .primary-nav li li a, li li .primary-nav__nolink {
    display: flex;
    align-items: center;
  }
  .primary-nav li li a:before, li li .primary-nav__nolink:before {
    margin-right: 0.5rem;
    font-family: "Font Awesome 5 Free";
    font-weight: 900;
  }
  .primary-nav li li a:before, li li .primary-nav__nolink:before {
    color: #ffbf00;
    content: "";
    font-size: 1.25em;
  }
  .primary-nav li li a:focus:before, .primary-nav li li a:hover:before, li li .primary-nav__nolink:focus:before, li li .primary-nav__nolink:hover:before {
    color: #022851;
  }
}
@media (min-width: 992px) {
  .primary-nav li li a, li li .primary-nav__nolink {
    margin-left: 0;
    padding: 0.5rem 1rem;
    font-size: 0.9375em;
    line-height: 1.35;
  }
  .primary-nav li li a:focus, li li .primary-nav__nolink:focus {
    background-color: #ffbf00;
  }
  .primary-nav li li a:before, .primary-nav li li a:after, li li .primary-nav__nolink:before, li li .primary-nav__nolink:after {
    display: none;
  }
}
.primary-nav li li li a {
  background-color: #fff9e6;
}
@media (min-width: 992px) {
  .primary-nav--justify > .menu {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;
  }
  .primary-nav--justify li {
    float: none;
    flex-basis: 0;
    flex-grow: 1;
    width: auto;
  }
  .primary-nav--justify li:last-child .primary-nav__top-link a, .primary-nav--justify li:last-child .primary-nav__top-link .primary-nav__nolink {
    margin-right: 1rem;
  }
  .primary-nav--justify a:after,
.primary-nav--justify .primary-nav__nolink:after {
    margin-left: auto;
  }
}
@media (min-width: 992px) {
  .primary-nav--mega {
    overflow: hidden;
    max-height: 3.25rem;
    margin-right: -1rem;
    transition: max-height 0.3s;
  }
  .primary-nav--mega.is-hover {
    max-height: 600px;
  }
  .primary-nav--mega a:after,
.primary-nav--mega .primary-nav__nolink:after {
    margin-left: auto;
  }
  .primary-nav--mega > .menu {
    display: flex;
    flex-wrap: wrap;
  }
  .primary-nav--mega li {
    float: none;
    width: auto;
    min-width: 9em;
  }
  .primary-nav--mega li li a,
.primary-nav--mega li li .primary-nav__nolink {
    background: none;
  }
  .primary-nav--mega li:hover .primary-nav__top-link a,
.primary-nav--mega li:hover .primary-nav__top-link .primary-nav__nolink {
    background-color: #ffdf80;
  }
  .primary-nav--mega li:hover .primary-nav__top-link a:before, .primary-nav--mega li:hover .primary-nav__top-link a:after,
.primary-nav--mega li:hover .primary-nav__top-link .primary-nav__nolink:before,
.primary-nav--mega li:hover .primary-nav__top-link .primary-nav__nolink:after {
    background-color: #ffdf80;
  }
  .primary-nav--mega li .primary-nav__top-link a:hover {
    background-color: #ffbf00;
  }
  .primary-nav--mega li .primary-nav__top-link a:hover:before, .primary-nav--mega li .primary-nav__top-link a:hover:after {
    background-color: #ffbf00;
  }
  .primary-nav--mega .primary-nav__top-link {
    background-color: #022851;
  }
}
@media (min-width: 992px) {
  .primary-nav--superfish {
    box-shadow: inset 0 -1px 0 #14447a;
  }
  .primary-nav--superfish li {
    position: relative;
  }
  .primary-nav--superfish ul ul {
    position: absolute;
    z-index: 840;
    top: 100%;
    left: 0;
    display: none;
    min-width: 12em;
    background-color: #fff;
  }
  .primary-nav--superfish ul ul ul {
    top: 0;
    left: 100%;
  }
  .primary-nav--superfish li li a,
.primary-nav--superfish li li .primary-nav__nolink {
    background-color: #fffbed;
  }
  .primary-nav--superfish li li li a,
.primary-nav--superfish li li li .primary-nav__nolink {
    background-color: #fffbed;
  }
  .primary-nav--superfish li li li li a,
.primary-nav--superfish li li li li .primary-nav__nolink {
    background-color: #fff9e6;
  }
  .primary-nav--superfish .primary-nav__submenu-indicator {
    display: flex;
    align-items: center;
    width: 1rem;
    height: auto;
    margin-right: -0.5rem;
    margin-left: auto;
    padding-top: 0;
    padding-bottom: 0;
    background-color: transparent;
  }
  .primary-nav--superfish .primary-nav__submenu-indicator:after {
    margin-left: 0.5rem;
    font-family: "Font Awesome 5 Free";
    font-weight: 900;
  }
  .primary-nav--superfish .primary-nav__submenu-indicator:focus {
    box-shadow: none;
  }
  .primary-nav--superfish .primary-nav__submenu-indicator:after {
    color: #ffbf00;
    content: "";
    font-size: 0.75em;
  }
  .primary-nav--superfish li li .primary-nav__submenu-indicator:after {
    color: #022851;
  }
  .primary-nav--superfish li li li .primary-nav__submenu-indicator {
    display: none;
  }
  .primary-nav--superfish li:hover > ul,
.primary-nav--superfish .sf--hover > ul {
    display: block;
  }
  .primary-nav--superfish li:hover > .primary-nav__top-link a,
.primary-nav--superfish li:hover > .primary-nav__top-link .primary-nav__nolink,
.primary-nav--superfish .sf--hover > .primary-nav__top-link a,
.primary-nav--superfish .sf--hover > .primary-nav__top-link .primary-nav__nolink {
    background-color: #ffbf00;
  }
  .primary-nav--superfish li:hover > .primary-nav__top-link a:before, .primary-nav--superfish li:hover > .primary-nav__top-link a:after,
.primary-nav--superfish li:hover > .primary-nav__top-link .primary-nav__nolink:before,
.primary-nav--superfish li:hover > .primary-nav__top-link .primary-nav__nolink:after,
.primary-nav--superfish .sf--hover > .primary-nav__top-link a:before,
.primary-nav--superfish .sf--hover > .primary-nav__top-link a:after,
.primary-nav--superfish .sf--hover > .primary-nav__top-link .primary-nav__nolink:before,
.primary-nav--superfish .sf--hover > .primary-nav__top-link .primary-nav__nolink:after {
    background-color: #ffbf00;
  }
  .primary-nav--superfish li:hover > .primary-nav__top-link a .primary-nav__submenu-indicator:after,
.primary-nav--superfish li:hover > .primary-nav__top-link .primary-nav__nolink .primary-nav__submenu-indicator:after,
.primary-nav--superfish .sf--hover > .primary-nav__top-link a .primary-nav__submenu-indicator:after,
.primary-nav--superfish .sf--hover > .primary-nav__top-link .primary-nav__nolink .primary-nav__submenu-indicator:after {
    color: #022851;
  }
  .primary-nav--superfish li:hover > .primary-nav__top-link a,
.primary-nav--superfish .sf--hover > .primary-nav__top-link a,
.primary-nav--superfish li:hover > .primary-nav__top-link .primary-nav__nolink {
    color: #022851;
  }
}
.primary-nav .submenu-toggle:focus {
  box-shadow: inset 0 0 0 3px #ffbf00;
  outline: none;
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/4_component/_nav-quick.css.js":
/*!*******************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/4_component/_nav-quick.css.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

@charset "UTF-8";
.quick-links {
  position: relative;
}
.quick-links__menu {
  background-color: #fff;
}
@media (max-width: 991px) {
  .quick-links__menu a {
    display: flex;
    align-items: center;
    min-height: 3rem;
    padding-left: 1em;
    border-bottom: 1px solid #4c4c4c;
    background: #fff;
    font-weight: 400;
    line-height: 1.25;
    text-decoration: none;
  }
  .quick-links__menu a:hover {
    background: #ffbf00;
  }
  .quick-links__menu a .active {
    background: #ffbf00;
  }
}
@media (min-width: 992px) {
  .quick-links__menu {
    position: absolute;
    top: 3.25rem;
    right: 0;
    width: 22rem;
    border-top: 1px solid #13639e;
    box-shadow: 0 1px 2px rgba(2, 40, 81, 0.7);
  }
  .quick-links__menu .menu {
    position: relative;
    z-index: 840;
    padding: 1rem 0;
  }
  .quick-links__menu a {
    display: block;
    padding: 0.5rem 1.5rem;
    font-weight: 400;
    line-height: 1.35;
    text-decoration: none;
  }
  .quick-links__menu a:hover {
    text-decoration: underline;
  }
}
.quick-links__menu a {
  color: #000;
}
.quick-links__menu a:focus {
  background: #ffbf00;
}
@media (min-width: 992px) {
  .quick-links--home-site {
    border-top: 0;
  }
  .quick-links--home-site .menu {
    padding-top: 9.75rem;
  }
  .quick-links--home-site li:first-child,
.quick-links--home-site li:nth-child(2),
.quick-links--home-site li:nth-child(3) {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    border-bottom: 1px solid #fff;
    background-color: #ffecb2;
  }
  .quick-links--home-site li:first-child a,
.quick-links--home-site li:nth-child(2) a,
.quick-links--home-site li:nth-child(3) a {
    display: flex;
    align-items: center;
    padding: 1rem 1rem 1rem 0.75rem;
    font-size: 1.25rem;
    font-weight: 700;
    line-height: 1;
    text-decoration: none;
  }
  .quick-links--home-site li:first-child a:before,
.quick-links--home-site li:nth-child(2) a:before,
.quick-links--home-site li:nth-child(3) a:before {
    margin-right: 0.5rem;
    font-family: "Font Awesome 5 Free";
    font-weight: 900;
  }
  .quick-links--home-site li:first-child a:hover,
.quick-links--home-site li:nth-child(2) a:hover,
.quick-links--home-site li:nth-child(3) a:hover {
    background-color: #ffbf00;
  }
  .quick-links--home-site li:first-child a:before,
.quick-links--home-site li:nth-child(2) a:before,
.quick-links--home-site li:nth-child(3) a:before {
    min-width: 1rem;
    margin-right: 0.75rem;
    color: #13639e;
    font-size: 0.875em;
  }
  .quick-links--home-site li:nth-child(2) {
    top: 3.2175rem;
    border-top: 2px solid #fff;
  }
  .quick-links--home-site li:nth-child(3) {
    top: 6.435rem;
    border-top: 2px solid #fff;
  }
  .quick-links--home-site li:first-child a:before {
    content: "";
  }
  .quick-links--home-site li:nth-child(2) a:before {
    content: "";
  }
  .quick-links--home-site li:nth-child(3) a:before {
    content: "";
  }
}
@media (min-width: 992px) {
  .quick-links--highlight {
    border-top: 0;
  }
  .quick-links--highlight .menu {
    padding-top: 9.75rem;
  }
  .quick-links--highlight li:first-child,
.quick-links--highlight li:nth-child(2),
.quick-links--highlight li:nth-child(3) {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    border-bottom: 1px solid #fff;
    background-color: #ffecb2;
  }
  .quick-links--highlight li:first-child a,
.quick-links--highlight li:nth-child(2) a,
.quick-links--highlight li:nth-child(3) a {
    display: flex;
    align-items: center;
    padding: 1rem 1rem 1rem 0.75rem;
    font-size: 1.25rem;
    font-weight: 700;
    line-height: 1;
    text-decoration: none;
  }
  .quick-links--highlight li:first-child a:before,
.quick-links--highlight li:nth-child(2) a:before,
.quick-links--highlight li:nth-child(3) a:before {
    margin-right: 0.5rem;
    font-family: "Font Awesome 5 Free";
    font-weight: 900;
  }
  .quick-links--highlight li:first-child a:hover,
.quick-links--highlight li:nth-child(2) a:hover,
.quick-links--highlight li:nth-child(3) a:hover {
    background-color: #ffbf00;
  }
  .quick-links--highlight li:first-child a:before,
.quick-links--highlight li:nth-child(2) a:before,
.quick-links--highlight li:nth-child(3) a:before {
    min-width: 1rem;
    margin-right: 0.75rem;
    color: #13639e;
    font-size: 0.875em;
  }
  .quick-links--highlight li:nth-child(2) {
    top: 3.2175rem;
    border-top: 2px solid #fff;
  }
  .quick-links--highlight li:nth-child(3) {
    top: 6.435rem;
    border-top: 2px solid #fff;
  }
}
@media (min-width: 992px) {
  .quick-links--two-columns .menu {
    column-count: 2;
    column-gap: 0;
  }
  .quick-links--two-columns a {
    break-inside: avoid;
  }
}
.quick-links__title {
  display: flex;
  align-items: center;
  position: relative;
  z-index: 1;
  justify-content: space-between;
  margin: 0;
  padding-right: 0;
  padding-left: 1rem;
  border: 0;
  appearance: none;
  color: #fff;
  cursor: pointer;
  font-size: 1rem;
  font-weight: 400;
  text-decoration: none;
}
.quick-links__title:after {
  margin-left: 0.5rem;
  font-family: "Font Awesome 5 Free";
  font-weight: 900;
}
@media (max-width: 991px) {
  .quick-links__title {
    overflow: hidden;
    width: 100%;
    border-bottom: 0.15rem solid #fff;
    background-color: #13639e;
  }
  .quick-links__title .submenu-toggle {
    height: 3rem;
    border: 0;
  }
}
@media (min-width: 992px) {
  .quick-links__title {
    margin-left: 1rem;
    padding: 0 1rem 0 0;
    background-color: #13639e;
    font-size: 0.85rem;
  }
  .quick-links__title:before {
    width: 1rem;
    height: 3.25rem;
    margin-right: 0.5rem;
    margin-left: -1rem;
    background-color: #13639e;
    clip-path: polygon(93% 0, 110% 0, 110% 102%, 0% 102%);
    content: "";
  }
  .quick-links__title:focus:before, .quick-links__title:hover:before {
    background-color: #ffbf00;
  }
  .quick-links__title:after {
    width: 0.5rem;
    color: #ffbf00;
    content: "";
    font-size: 0.75em;
  }
  .quick-links__title .submenu-toggle {
    display: none;
  }
}
.quick-links__title:hover, .quick-links__title:focus {
  background-color: #ffbf00;
  color: #022851;
  text-decoration: none;
}
@media (min-width: 992px) {
  .quick-links__title:hover, .quick-links__title:focus {
    outline: none;
  }
  .quick-links__title:hover:before, .quick-links__title:focus:before {
    background-color: #ffbf00;
  }
  .quick-links__title:hover:after, .quick-links__title:focus:after {
    color: #022851;
  }
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/4_component/_nav-toggle.css.js":
/*!********************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/4_component/_nav-toggle.css.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

.nav-toggle {
  overflow: hidden;
  text-indent: 110%;
  white-space: nowrap;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 3.75rem;
  height: 3.25rem;
  padding: 0;
  border: 0;
  appearance: none;
  background: transparent;
  text-indent: 300%;
}
.nav-toggle:focus {
  outline: dotted #ffbf00;
  outline-offset: -0.5rem;
}
.nav-toggle__icon--menu {
  position: relative;
  margin-top: 8px;
  margin-bottom: 8px;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  margin: 0;
}
.nav-toggle__icon--menu, .nav-toggle__icon--menu::before, .nav-toggle__icon--menu::after {
  display: block;
  width: 1.4444444444rem;
  height: 3px;
  background-color: #fff;
  outline: 1px solid transparent;
  -webkit-transition-property: background-color, -webkit-transform;
  -moz-transition-property: background-color, -moz-transform;
  -o-transition-property: background-color, -o-transform;
  transition-property: background-color, transform;
  -webkit-transition-duration: 0.3s;
  -moz-transition-duration: 0.3s;
  -o-transition-duration: 0.3s;
  transition-duration: 0.3s;
}
.nav-toggle__icon--menu::before, .nav-toggle__icon--menu::after {
  position: absolute;
  content: "";
}
.nav-toggle__icon--menu::before {
  top: -8px;
}
.nav-toggle__icon--menu::after {
  top: 8px;
}
.nav-toggle--active .nav-toggle__icon--menu {
  background-color: transparent;
}
.nav-toggle--active .nav-toggle__icon--menu::before {
  -webkit-transform: translateY(8px) rotate(45deg);
  -moz-transform: translateY(8px) rotate(45deg);
  -ms-transform: translateY(8px) rotate(45deg);
  -o-transform: translateY(8px) rotate(45deg);
  transform: translateY(8px) rotate(45deg);
}
.nav-toggle--active .nav-toggle__icon--menu::after {
  -webkit-transform: translateY(-8px) rotate(-45deg);
  -moz-transform: translateY(-8px) rotate(-45deg);
  -ms-transform: translateY(-8px) rotate(-45deg);
  -o-transform: translateY(-8px) rotate(-45deg);
  transform: translateY(-8px) rotate(-45deg);
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/4_component/_search-form.css.js":
/*!*********************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/4_component/_search-form.css.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

.search-form {
  position: relative;
  background: #fff4d2;
}
.search-form__input {
  position: relative;
  box-sizing: border-box;
  width: 100%;
  height: 3rem;
  padding-right: 70px;
  border: 0;
  background: transparent;
  box-shadow: none;
  color: #022851;
  font-size: 1.25rem;
  line-height: 1.3;
}
.search-form__submit {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
  position: absolute;
  top: 50%;
  right: 1em;
  overflow: hidden;
  width: 2.1em;
  height: 2.1em;
  border: 0;
  border-radius: 2.2em;
  background-color: #13639e;
  box-shadow: none;
  color: #fffbed;
  cursor: pointer;
  font-family: "Font Awesome 5 Free";
  font-weight: 900;
  letter-spacing: 1em;
  line-height: 1.6;
  text-indent: -0.2em;
  transform: translateY(-50%);
  transition: background-color 0.25s ease-in-out;
}
.search-form__submit:hover {
  background-color: #73abdd;
}
.search-form__submit:focus {
  background-color: #ffbf00;
  color: #fffbed;
}
.search-form__input:focus, .search-form__submit:focus {
  border-color: transparent;
  box-shadow: 0 0 0 3px #022851;
  outline-color: transparent;
  outline-style: solid;
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/4_component/_search-popup.css.js":
/*!**********************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/4_component/_search-popup.css.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

@charset "UTF-8";
.search-popup {
  padding: 1rem;
  border-bottom: 1px solid #fff;
}
@media (min-width: 992px) {
  .search-popup {
    position: absolute;
    z-index: 850;
    right: 0;
    left: 0;
    display: flex;
    align-items: center;
    visibility: hidden;
    height: 8em;
    padding: initial;
    border-color: #999;
    background-color: #fff;
    opacity: 0;
    text-align: center;
    transition: opacity 0.3s;
  }
}
@media (min-width: 992px) {
  .search-popup .search-form {
    width: 60%;
    margin: 2rem auto;
  }
}
.search-popup.is-open {
  visibility: visible;
  opacity: 1;
}
.search-popup__open {
  margin-left: 1rem;
  display: none;
  align-items: center;
  margin-right: -2px;
  padding: 0;
  border: 0;
  background-color: #14447a;
}
.search-popup__open:before {
  width: 1rem;
  height: 3.25rem;
  margin-right: 0.5rem;
  margin-left: -1rem;
  background-color: #14447a;
  clip-path: polygon(93% 0, 110% 0, 110% 102%, 0% 102%);
  content: "";
}
.search-popup__open:focus:before, .search-popup__open:hover:before {
  background-color: #ffbf00;
}
.search-popup__open:after {
  z-index: 1;
  width: 1rem;
  height: 3.25rem;
  margin-right: -1rem;
  margin-left: 0.5rem;
  background-color: #14447a;
  clip-path: polygon(-2px -2px, 100% -2px, 7% 102%, -2px 100%);
  content: "";
}
.search-popup__open:focus:after, .search-popup__open:hover:after {
  background-color: #ffbf00;
}
@media (min-width: 992px) {
  .search-popup__open {
    display: flex;
  }
}
.search-popup__open:focus, .search-popup__open:hover {
  background-color: #ffbf00;
  color: #022851;
  outline: none;
}
.search-popup--edge .search-popup__open {
  padding-right: 0.5rem;
}
.search-popup__open:before {
  margin-right: 0.15rem;
}
.search-popup__open:after {
  margin-left: 0.15rem;
}
.search-popup__open-icon {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  overflow: hidden;
  width: 2.4375rem;
  height: 2.4375rem;
  padding: 0;
  border: 0;
  border-radius: 50%;
  background-color: #022851;
  background-size: 50%;
  color: #fff;
  text-indent: inherit;
}
.search-popup__open-icon:before {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  margin: 0;
  content: "";
  font-family: "Font Awesome 5 Free";
  font-weight: 900;
}
.search-popup__open-icon--close:before {
  content: "";
}
.search-popup__close-icon {
  display: block;
  width: 2.1rem;
  height: 3px;
  background-color: #999;
  transform: rotate(45deg);
}
.search-popup__close-icon:before {
  position: absolute;
  z-index: 830;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #999;
  content: "";
  transform: rotate(90deg);
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/4_component/_site-branding.css.js":
/*!***********************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/4_component/_site-branding.css.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

.site-branding {
  --o-media-gutter: var(--o-media-gutter-default, 1rem);
  --o-media-gutter--right: var(--o-media-gutter-default, 1rem);
  --o-media-gutter--left: 0;
  display: flex;
  align-items: flex-start;
  align-items: center;
}
.site-branding__figure {
  margin-right: var(--o-media-gutter--right);
  margin-left: var(--o-media-gutter--left);
}
.site-branding__body {
  display: block;
  flex: 1;
}
.site-branding__body,
.site-branding__body > :last-child {
  margin-bottom: 0;
}
.site-branding--small {
  --o-media-gutter: 0.5rem;
  --o-media-gutter--right: var(--o-media-gutter);
}
.site-branding--large {
  --o-media-gutter: 2rem;
  --o-media-gutter--right: var(--o-media-gutter);
}
.site-branding--rev {
  --o-media-gutter--right: 0;
  --o-media-gutter--left: var(--o-media-gutter, 1rem);
  flex-direction: row-reverse;
}
.site-branding--flush {
  --o-media-gutter--right: 0;
  --o-media-gutter--left: 0;
}
.site-branding__figure {
  margin-right: var(--o-media-gutter--right);
  margin-left: var(--o-media-gutter--left);
}
.site-branding__body {
  display: block;
  flex: 1;
}
.site-branding__body,
.site-branding__body > :last-child {
  margin-bottom: 0;
}
.site-branding__site-name {
  margin-bottom: 0.25rem;
  color: #022851;
  font-size: 1.5rem;
  font-weight: 700;
}
@media (min-width: 992px) {
  .site-branding__site-name {
    font-size: 2rem;
  }
}
.site-branding__site-name a {
  color: #022851;
  text-decoration: none;
}
.site-branding__site-name a:hover, .site-branding__site-name a:focus {
  color: #022851;
  text-decoration: underline;
}
.site-branding__slogan {
  color: #022851;
  font-size: 1.375rem;
  line-height: 1;
}
@media (min-width: 992px) {
  .site-branding__slogan {
    font-size: 1.5rem;
  }
}
.site-branding a {
  color: #022851;
  text-decoration: none;
}
.site-branding a:hover, .site-branding a:focus {
  color: #022851;
  text-decoration: underline;
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/4_component/_submenu-toggle.css.js":
/*!************************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/4_component/_submenu-toggle.css.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

.submenu-toggle {
  display: flex;
  float: right;
  flex-shrink: 0;
  width: 50px;
  margin-left: auto;
  padding-bottom: 1px;
  border: 0;
  border-bottom: 0.15rem solid #fff;
  appearance: none;
  background-color: #022851;
  text-align: center;
}
@media (min-width: 310px) {
  .submenu-toggle {
    width: 3rem;
  }
}
@media (min-width: 992px) {
  .submenu-toggle {
    display: none;
  }
  .submenu-toggle__icon {
    display: none;
  }
}
@media (min-width: 992px) {
  .submenu-toggle {
    display: flex;
  }
  .submenu-toggle__icon {
    display: block;
  }
}
.submenu-toggle:focus {
  box-shadow: inset 0 0 0 3px #022851;
  outline: none;
}
a:hover .submenu-toggle {
  background-color: #997300;
}
.submenu-toggle--open .submenu-toggle__icon:before {
  transform: rotate(0deg);
}
.submenu-toggle__wrapper {
  display: flex;
  align-items: stretch;
}
.submenu-toggle__wrapper a:first-child,
.submenu-toggle__wrapper .nolink:first-child {
  flex-grow: 1;
}
.submenu-toggle__icon {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
  z-index: 830;
  left: 30%;
  display: block;
  width: 40%;
  height: 3px;
  background-color: #fff;
  font-size: 0;
}
.submenu-toggle__icon:before {
  position: absolute;
  z-index: 830;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #fff;
  content: "";
  transform: rotate(90deg);
  transition: all 0.3s;
}
a:hover .submenu-toggle__icon {
  background-color: #fff;
}
a:hover .submenu-toggle__icon:before {
  background-color: #fff;
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/5_layout/_l-header.css.js":
/*!***************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/5_layout/_l-header.css.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

:host {
  --fixed-page-offset: 3.25rem;
  --fixed-header-scroll-offset: 4.0625rem;
}

.l-header__branding {
  display: flex;
  align-items: center;
  padding: 0.5rem 1rem;
}
@media (min-width: 992px) {
  .l-header__branding {
    min-height: 7.5rem;
    padding-right: 1.5rem;
    padding-left: 1.5rem;
  }
}
@media (max-width: 991px) {
  .l-header--fixed {
    padding-top: 3.25rem;
  }
}
@media (min-width: 992px) {
  .l-header--fixed.is-fixed .l-main {
    padding-top: var(--fixed-page-offset);
  }
}
.l-header--fixed .mobile-bar {
  position: fixed;
  z-index: 1000;
  top: 0;
  right: 0;
  left: 0;
  width: 100%;
}
.l-header--fixed [id] {
  scroll-margin-top: var(--fixed-header-scroll-offset);
}

.l-navbar {
  position: relative;
  z-index: 830;
  height: 100%;
  min-height: 3.25rem;
}
@media (max-width: 991px) {
  .l-navbar {
    position: absolute;
    top: 3.25rem;
    left: 0;
  }
}
@media (min-width: 992px) {
  .l-navbar {
    width: 100%;
    height: auto;
  }
}
@media (min-width: 992px) {
  .l-header--fixed .l-navbar.is-fixed {
    position: fixed;
    z-index: 1000;
    top: 0;
    right: 0;
    left: 0;
    width: 100%;
  }
}

@media (min-width: 992px) {
  .l-nav-horizontal {
    display: grid;
    grid-template-areas: "nav search quick";
    grid-template-columns: 1fr max-content max-content;
  }
  .l-nav-horizontal__primary-nav {
    grid-area: nav;
  }
  .l-nav-horizontal__search-popup {
    z-index: 3;
    grid-area: search;
  }
  .l-nav-horizontal__search-popup .search-popup__open {
    position: relative;
  }
  .l-nav-horizontal__quick-links {
    z-index: 2;
    grid-area: quick;
  }
}

.has-mega .l-navbar {
  position: absolute;
}
@media (min-width: 992px) {
  .has-mega .l-main {
    padding-top: 3.25rem;
  }
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/6_utility/_u-visibility.css.js":
/*!********************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/6_utility/_u-visibility.css.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

.u-block {
  display: block !important;
}

.u-inline {
  display: inline !important;
}

.u-hidden {
  display: none !important;
}

.u-hidden--visually {
  position: absolute !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  overflow: hidden !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  border: 0 !important;
}

.u-shown--visually {
  position: inherit !important;
  clip: auto !important;
  width: auto !important;
  height: auto !important;
}

.u-hide-text {
  overflow: hidden;
  text-indent: 110%;
  white-space: nowrap;
}

`);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/theme-sass/normalize.css.js":
/*!******************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/theme-sass/normalize.css.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit */ "./public/node_modules/lit/index.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,lit__WEBPACK_IMPORTED_MODULE_0__.css)`

/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0;
}

/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
 * Correct the font size and margin on 'h1' elements within 'section' and
 * 'article' contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
figcaption,
figure {
  display: block;
}

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
 * Add the correct display in IE.
 */
main {
  display: block;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd 'em' font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Links
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}

/**
 * Prevent the duplicate application of 'bolder' by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd 'em' font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic;
}

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent 'sub' and 'sup' elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none;
}

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
 * Show the overflow in IE.
 */
button {
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native 'audio' and 'video'
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
  /* 2 */
}

button,
[type=button],
[type=reset],
[type=submit] {
  /**
   * Remove the inner border and padding in Firefox.
   */
  /**
   * Restore the focus styles unset by the previous rule.
   */
}
button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}
button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Show the overflow in Edge.
 */
input {
  overflow: visible;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type=checkbox],
[type=radio] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type=search] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
   * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
   */
}
[type=search]::-webkit-search-cancel-button, [type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to 'inherit' in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from 'fieldset' elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    'fieldset' elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */
}

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto;
}

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE, and Firefox.
 */
details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/*
 * Add the correct display in IE 9-.
 */
menu {
  display: block;
}

/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block;
}

/**
 * Add the correct display in IE.
 */
template {
  display: none;
}

/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none;
}

`);

/***/ }),

/***/ "./public/node_modules/decode-uri-component/index.js":
/*!***********************************************************!*\
  !*** ./public/node_modules/decode-uri-component/index.js ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";

var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp(token, 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');

function decodeComponents(components, split) {
	try {
		// Try to decode the entire string first
		return decodeURIComponent(components.join(''));
	} catch (err) {
		// Do nothing
	}

	if (components.length === 1) {
		return components;
	}

	split = split || 1;

	// Split the array in 2 parts
	var left = components.slice(0, split);
	var right = components.slice(split);

	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}

function decode(input) {
	try {
		return decodeURIComponent(input);
	} catch (err) {
		var tokens = input.match(singleMatcher);

		for (var i = 1; i < tokens.length; i++) {
			input = decodeComponents(tokens, i).join('');

			tokens = input.match(singleMatcher);
		}

		return input;
	}
}

function customDecodeURIComponent(input) {
	// Keep track of all the replacements and prefill the map with the `BOM`
	var replaceMap = {
		'%FE%FF': '\uFFFD\uFFFD',
		'%FF%FE': '\uFFFD\uFFFD'
	};

	var match = multiMatcher.exec(input);
	while (match) {
		try {
			// Decode as big chunks as possible
			replaceMap[match[0]] = decodeURIComponent(match[0]);
		} catch (err) {
			var result = decode(match[0]);

			if (result !== match[0]) {
				replaceMap[match[0]] = result;
			}
		}

		match = multiMatcher.exec(input);
	}

	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
	replaceMap['%C2'] = '\uFFFD';

	var entries = Object.keys(replaceMap);

	for (var i = 0; i < entries.length; i++) {
		// Replace all decoded components
		var key = entries[i];
		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
	}

	return input;
}

module.exports = function (encodedURI) {
	if (typeof encodedURI !== 'string') {
		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
	}

	try {
		encodedURI = encodedURI.replace(/\+/g, ' ');

		// Try the built in decoder first
		return decodeURIComponent(encodedURI);
	} catch (err) {
		// Fallback to a more advanced decoder
		return customDecodeURIComponent(encodedURI);
	}
};


/***/ }),

/***/ "./public/node_modules/fast-deep-equal/index.js":
/*!******************************************************!*\
  !*** ./public/node_modules/fast-deep-equal/index.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";


var isArray = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;

module.exports = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    var arrA = isArray(a)
      , arrB = isArray(b)
      , i
      , length
      , key;

    if (arrA && arrB) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (!equal(a[i], b[i])) return false;
      return true;
    }

    if (arrA != arrB) return false;

    var dateA = a instanceof Date
      , dateB = b instanceof Date;
    if (dateA != dateB) return false;
    if (dateA && dateB) return a.getTime() == b.getTime();

    var regexpA = a instanceof RegExp
      , regexpB = b instanceof RegExp;
    if (regexpA != regexpB) return false;
    if (regexpA && regexpB) return a.toString() == b.toString();

    var keys = keyList(a);
    length = keys.length;

    if (length !== keyList(b).length)
      return false;

    for (i = length; i-- !== 0;)
      if (!hasProp.call(b, keys[i])) return false;

    for (i = length; i-- !== 0;) {
      key = keys[i];
      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  return a!==a && b!==b;
};


/***/ }),

/***/ "./public/node_modules/filter-obj/index.js":
/*!*************************************************!*\
  !*** ./public/node_modules/filter-obj/index.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";

module.exports = function (obj, predicate) {
	var ret = {};
	var keys = Object.keys(obj);
	var isArr = Array.isArray(predicate);

	for (var i = 0; i < keys.length; i++) {
		var key = keys[i];
		var val = obj[key];

		if (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {
			ret[key] = val;
		}
	}

	return ret;
};


/***/ }),

/***/ "./public/node_modules/isomorphic-fetch/fetch-npm-browserify.js":
/*!**********************************************************************!*\
  !*** ./public/node_modules/isomorphic-fetch/fetch-npm-browserify.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// the whatwg-fetch polyfill installs the fetch() function
// on the global object (window or self)
//
// Return that as the export for use in Webpack, Browserify etc.
__webpack_require__(/*! whatwg-fetch */ "./public/node_modules/whatwg-fetch/fetch.js");
module.exports = self.fetch.bind(self);


/***/ }),

/***/ "./public/node_modules/query-string/index.js":
/*!***************************************************!*\
  !*** ./public/node_modules/query-string/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

const strictUriEncode = __webpack_require__(/*! strict-uri-encode */ "./public/node_modules/strict-uri-encode/index.js");
const decodeComponent = __webpack_require__(/*! decode-uri-component */ "./public/node_modules/decode-uri-component/index.js");
const splitOnFirst = __webpack_require__(/*! split-on-first */ "./public/node_modules/split-on-first/index.js");
const filterObject = __webpack_require__(/*! filter-obj */ "./public/node_modules/filter-obj/index.js");

const isNullOrUndefined = value => value === null || value === undefined;

const encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');

function encoderForArrayFormat(options) {
	switch (options.arrayFormat) {
		case 'index':
			return key => (result, value) => {
				const index = result.length;

				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, [encode(key, options), '[', index, ']'].join('')];
				}

				return [
					...result,
					[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')
				];
			};

		case 'bracket':
			return key => (result, value) => {
				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, [encode(key, options), '[]'].join('')];
				}

				return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];
			};

		case 'colon-list-separator':
			return key => (result, value) => {
				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, [encode(key, options), ':list='].join('')];
				}

				return [...result, [encode(key, options), ':list=', encode(value, options)].join('')];
			};

		case 'comma':
		case 'separator':
		case 'bracket-separator': {
			const keyValueSep = options.arrayFormat === 'bracket-separator' ?
				'[]=' :
				'=';

			return key => (result, value) => {
				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				// Translate null to an empty string so that it doesn't serialize as 'null'
				value = value === null ? '' : value;

				if (result.length === 0) {
					return [[encode(key, options), keyValueSep, encode(value, options)].join('')];
				}

				return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
			};
		}

		default:
			return key => (result, value) => {
				if (
					value === undefined ||
					(options.skipNull && value === null) ||
					(options.skipEmptyString && value === '')
				) {
					return result;
				}

				if (value === null) {
					return [...result, encode(key, options)];
				}

				return [...result, [encode(key, options), '=', encode(value, options)].join('')];
			};
	}
}

function parserForArrayFormat(options) {
	let result;

	switch (options.arrayFormat) {
		case 'index':
			return (key, value, accumulator) => {
				result = /\[(\d*)\]$/.exec(key);

				key = key.replace(/\[\d*\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = {};
				}

				accumulator[key][result[1]] = value;
			};

		case 'bracket':
			return (key, value, accumulator) => {
				result = /(\[\])$/.exec(key);
				key = key.replace(/\[\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		case 'colon-list-separator':
			return (key, value, accumulator) => {
				result = /(:list)$/.exec(key);
				key = key.replace(/:list$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		case 'comma':
		case 'separator':
			return (key, value, accumulator) => {
				const isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);
				const isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));
				value = isEncodedArray ? decode(value, options) : value;
				const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);
				accumulator[key] = newValue;
			};

		case 'bracket-separator':
			return (key, value, accumulator) => {
				const isArray = /(\[\])$/.test(key);
				key = key.replace(/\[\]$/, '');

				if (!isArray) {
					accumulator[key] = value ? decode(value, options) : value;
					return;
				}

				const arrayValue = value === null ?
					[] :
					value.split(options.arrayFormatSeparator).map(item => decode(item, options));

				if (accumulator[key] === undefined) {
					accumulator[key] = arrayValue;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], arrayValue);
			};

		default:
			return (key, value, accumulator) => {
				if (accumulator[key] === undefined) {
					accumulator[key] = value;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};
	}
}

function validateArrayFormatSeparator(value) {
	if (typeof value !== 'string' || value.length !== 1) {
		throw new TypeError('arrayFormatSeparator must be single character string');
	}
}

function encode(value, options) {
	if (options.encode) {
		return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

function decode(value, options) {
	if (options.decode) {
		return decodeComponent(value);
	}

	return value;
}

function keysSorter(input) {
	if (Array.isArray(input)) {
		return input.sort();
	}

	if (typeof input === 'object') {
		return keysSorter(Object.keys(input))
			.sort((a, b) => Number(a) - Number(b))
			.map(key => input[key]);
	}

	return input;
}

function removeHash(input) {
	const hashStart = input.indexOf('#');
	if (hashStart !== -1) {
		input = input.slice(0, hashStart);
	}

	return input;
}

function getHash(url) {
	let hash = '';
	const hashStart = url.indexOf('#');
	if (hashStart !== -1) {
		hash = url.slice(hashStart);
	}

	return hash;
}

function extract(input) {
	input = removeHash(input);
	const queryStart = input.indexOf('?');
	if (queryStart === -1) {
		return '';
	}

	return input.slice(queryStart + 1);
}

function parseValue(value, options) {
	if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {
		value = Number(value);
	} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
		value = value.toLowerCase() === 'true';
	}

	return value;
}

function parse(query, options) {
	options = Object.assign({
		decode: true,
		sort: true,
		arrayFormat: 'none',
		arrayFormatSeparator: ',',
		parseNumbers: false,
		parseBooleans: false
	}, options);

	validateArrayFormatSeparator(options.arrayFormatSeparator);

	const formatter = parserForArrayFormat(options);

	// Create an object with no prototype
	const ret = Object.create(null);

	if (typeof query !== 'string') {
		return ret;
	}

	query = query.trim().replace(/^[?#&]/, '');

	if (!query) {
		return ret;
	}

	for (const param of query.split('&')) {
		if (param === '') {
			continue;
		}

		let [key, value] = splitOnFirst(options.decode ? param.replace(/\+/g, ' ') : param, '=');

		// Missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		value = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);
		formatter(decode(key, options), value, ret);
	}

	for (const key of Object.keys(ret)) {
		const value = ret[key];
		if (typeof value === 'object' && value !== null) {
			for (const k of Object.keys(value)) {
				value[k] = parseValue(value[k], options);
			}
		} else {
			ret[key] = parseValue(value, options);
		}
	}

	if (options.sort === false) {
		return ret;
	}

	return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
		const value = ret[key];
		if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
			// Sort object keys, not values
			result[key] = keysSorter(value);
		} else {
			result[key] = value;
		}

		return result;
	}, Object.create(null));
}

exports.extract = extract;
exports.parse = parse;

exports.stringify = (object, options) => {
	if (!object) {
		return '';
	}

	options = Object.assign({
		encode: true,
		strict: true,
		arrayFormat: 'none',
		arrayFormatSeparator: ','
	}, options);

	validateArrayFormatSeparator(options.arrayFormatSeparator);

	const shouldFilter = key => (
		(options.skipNull && isNullOrUndefined(object[key])) ||
		(options.skipEmptyString && object[key] === '')
	);

	const formatter = encoderForArrayFormat(options);

	const objectCopy = {};

	for (const key of Object.keys(object)) {
		if (!shouldFilter(key)) {
			objectCopy[key] = object[key];
		}
	}

	const keys = Object.keys(objectCopy);

	if (options.sort !== false) {
		keys.sort(options.sort);
	}

	return keys.map(key => {
		const value = object[key];

		if (value === undefined) {
			return '';
		}

		if (value === null) {
			return encode(key, options);
		}

		if (Array.isArray(value)) {
			if (value.length === 0 && options.arrayFormat === 'bracket-separator') {
				return encode(key, options) + '[]';
			}

			return value
				.reduce(formatter(key), [])
				.join('&');
		}

		return encode(key, options) + '=' + encode(value, options);
	}).filter(x => x.length > 0).join('&');
};

exports.parseUrl = (url, options) => {
	options = Object.assign({
		decode: true
	}, options);

	const [url_, hash] = splitOnFirst(url, '#');

	return Object.assign(
		{
			url: url_.split('?')[0] || '',
			query: parse(extract(url), options)
		},
		options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}
	);
};

exports.stringifyUrl = (object, options) => {
	options = Object.assign({
		encode: true,
		strict: true,
		[encodeFragmentIdentifier]: true
	}, options);

	const url = removeHash(object.url).split('?')[0] || '';
	const queryFromUrl = exports.extract(object.url);
	const parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});

	const query = Object.assign(parsedQueryFromUrl, object.query);
	let queryString = exports.stringify(query, options);
	if (queryString) {
		queryString = `?${queryString}`;
	}

	let hash = getHash(object.url);
	if (object.fragmentIdentifier) {
		hash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;
	}

	return `${url}${queryString}${hash}`;
};

exports.pick = (input, filter, options) => {
	options = Object.assign({
		parseFragmentIdentifier: true,
		[encodeFragmentIdentifier]: false
	}, options);

	const {url, query, fragmentIdentifier} = exports.parseUrl(input, options);
	return exports.stringifyUrl({
		url,
		query: filterObject(query, filter),
		fragmentIdentifier
	}, options);
};

exports.exclude = (input, filter, options) => {
	const exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);

	return exports.pick(input, exclusionFilter, options);
};


/***/ }),

/***/ "./public/node_modules/split-on-first/index.js":
/*!*****************************************************!*\
  !*** ./public/node_modules/split-on-first/index.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


module.exports = (string, separator) => {
	if (!(typeof string === 'string' && typeof separator === 'string')) {
		throw new TypeError('Expected the arguments to be of type `string`');
	}

	if (separator === '') {
		return [string];
	}

	const separatorIndex = string.indexOf(separator);

	if (separatorIndex === -1) {
		return [string];
	}

	return [
		string.slice(0, separatorIndex),
		string.slice(separatorIndex + separator.length)
	];
};


/***/ }),

/***/ "./public/node_modules/strict-uri-encode/index.js":
/*!********************************************************!*\
  !*** ./public/node_modules/strict-uri-encode/index.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";

module.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);


/***/ }),

/***/ "./public/node_modules/whatwg-fetch/fetch.js":
/*!***************************************************!*\
  !*** ./public/node_modules/whatwg-fetch/fetch.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DOMException: () => (/* binding */ DOMException),
/* harmony export */   Headers: () => (/* binding */ Headers),
/* harmony export */   Request: () => (/* binding */ Request),
/* harmony export */   Response: () => (/* binding */ Response),
/* harmony export */   fetch: () => (/* binding */ fetch)
/* harmony export */ });
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof self !== 'undefined' && self) ||
  (typeof global !== 'undefined' && global)

var support = {
  searchParams: 'URLSearchParams' in global,
  iterable: 'Symbol' in global && 'iterator' in Symbol,
  blob:
    'FileReader' in global &&
    'Blob' in global &&
    (function() {
      try {
        new Blob()
        return true
      } catch (e) {
        return false
      }
    })(),
  formData: 'FormData' in global,
  arrayBuffer: 'ArrayBuffer' in global
}

function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj)
}

if (support.arrayBuffer) {
  var viewClasses = [
    '[object Int8Array]',
    '[object Uint8Array]',
    '[object Uint8ClampedArray]',
    '[object Int16Array]',
    '[object Uint16Array]',
    '[object Int32Array]',
    '[object Uint32Array]',
    '[object Float32Array]',
    '[object Float64Array]'
  ]

  var isArrayBufferView =
    ArrayBuffer.isView ||
    function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
}

function normalizeName(name) {
  if (typeof name !== 'string') {
    name = String(name)
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
    throw new TypeError('Invalid character in header field name: "' + name + '"')
  }
  return name.toLowerCase()
}

function normalizeValue(value) {
  if (typeof value !== 'string') {
    value = String(value)
  }
  return value
}

// Build a destructive iterator for the value list
function iteratorFor(items) {
  var iterator = {
    next: function() {
      var value = items.shift()
      return {done: value === undefined, value: value}
    }
  }

  if (support.iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator
    }
  }

  return iterator
}

function Headers(headers) {
  this.map = {}

  if (headers instanceof Headers) {
    headers.forEach(function(value, name) {
      this.append(name, value)
    }, this)
  } else if (Array.isArray(headers)) {
    headers.forEach(function(header) {
      this.append(header[0], header[1])
    }, this)
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name])
    }, this)
  }
}

Headers.prototype.append = function(name, value) {
  name = normalizeName(name)
  value = normalizeValue(value)
  var oldValue = this.map[name]
  this.map[name] = oldValue ? oldValue + ', ' + value : value
}

Headers.prototype['delete'] = function(name) {
  delete this.map[normalizeName(name)]
}

Headers.prototype.get = function(name) {
  name = normalizeName(name)
  return this.has(name) ? this.map[name] : null
}

Headers.prototype.has = function(name) {
  return this.map.hasOwnProperty(normalizeName(name))
}

Headers.prototype.set = function(name, value) {
  this.map[normalizeName(name)] = normalizeValue(value)
}

Headers.prototype.forEach = function(callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this)
    }
  }
}

Headers.prototype.keys = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push(name)
  })
  return iteratorFor(items)
}

Headers.prototype.values = function() {
  var items = []
  this.forEach(function(value) {
    items.push(value)
  })
  return iteratorFor(items)
}

Headers.prototype.entries = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push([name, value])
  })
  return iteratorFor(items)
}

if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries
}

function consumed(body) {
  if (body.bodyUsed) {
    return Promise.reject(new TypeError('Already read'))
  }
  body.bodyUsed = true
}

function fileReaderReady(reader) {
  return new Promise(function(resolve, reject) {
    reader.onload = function() {
      resolve(reader.result)
    }
    reader.onerror = function() {
      reject(reader.error)
    }
  })
}

function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsArrayBuffer(blob)
  return promise
}

function readBlobAsText(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsText(blob)
  return promise
}

function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf)
  var chars = new Array(view.length)

  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i])
  }
  return chars.join('')
}

function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0)
  } else {
    var view = new Uint8Array(buf.byteLength)
    view.set(new Uint8Array(buf))
    return view.buffer
  }
}

function Body() {
  this.bodyUsed = false

  this._initBody = function(body) {
    /*
      fetch-mock wraps the Response object in an ES6 Proxy to
      provide useful test harness features such as flush. However, on
      ES5 browsers without fetch or Proxy support pollyfills must be used;
      the proxy-pollyfill is unable to proxy an attribute unless it exists
      on the object before the Proxy is created. This change ensures
      Response.bodyUsed exists on the instance, while maintaining the
      semantic of setting Request.bodyUsed in the constructor before
      _initBody is called.
    */
    this.bodyUsed = this.bodyUsed
    this._bodyInit = body
    if (!body) {
      this._bodyText = ''
    } else if (typeof body === 'string') {
      this._bodyText = body
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString()
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer)
      // IE 10-11 can't handle a DataView body.
      this._bodyInit = new Blob([this._bodyArrayBuffer])
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body)
    } else {
      this._bodyText = body = Object.prototype.toString.call(body)
    }

    if (!this.headers.get('content-type')) {
      if (typeof body === 'string') {
        this.headers.set('content-type', 'text/plain;charset=UTF-8')
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set('content-type', this._bodyBlob.type)
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
      }
    }
  }

  if (support.blob) {
    this.blob = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as blob')
      } else {
        return Promise.resolve(new Blob([this._bodyText]))
      }
    }

    this.arrayBuffer = function() {
      if (this._bodyArrayBuffer) {
        var isConsumed = consumed(this)
        if (isConsumed) {
          return isConsumed
        }
        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
          return Promise.resolve(
            this._bodyArrayBuffer.buffer.slice(
              this._bodyArrayBuffer.byteOffset,
              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
            )
          )
        } else {
          return Promise.resolve(this._bodyArrayBuffer)
        }
      } else {
        return this.blob().then(readBlobAsArrayBuffer)
      }
    }
  }

  this.text = function() {
    var rejected = consumed(this)
    if (rejected) {
      return rejected
    }

    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob)
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
    } else if (this._bodyFormData) {
      throw new Error('could not read FormData body as text')
    } else {
      return Promise.resolve(this._bodyText)
    }
  }

  if (support.formData) {
    this.formData = function() {
      return this.text().then(decode)
    }
  }

  this.json = function() {
    return this.text().then(JSON.parse)
  }

  return this
}

// HTTP methods whose capitalization should be normalized
var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

function normalizeMethod(method) {
  var upcased = method.toUpperCase()
  return methods.indexOf(upcased) > -1 ? upcased : method
}

function Request(input, options) {
  if (!(this instanceof Request)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }

  options = options || {}
  var body = options.body

  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError('Already read')
    }
    this.url = input.url
    this.credentials = input.credentials
    if (!options.headers) {
      this.headers = new Headers(input.headers)
    }
    this.method = input.method
    this.mode = input.mode
    this.signal = input.signal
    if (!body && input._bodyInit != null) {
      body = input._bodyInit
      input.bodyUsed = true
    }
  } else {
    this.url = String(input)
  }

  this.credentials = options.credentials || this.credentials || 'same-origin'
  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers)
  }
  this.method = normalizeMethod(options.method || this.method || 'GET')
  this.mode = options.mode || this.mode || null
  this.signal = options.signal || this.signal
  this.referrer = null

  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
    throw new TypeError('Body not allowed for GET or HEAD requests')
  }
  this._initBody(body)

  if (this.method === 'GET' || this.method === 'HEAD') {
    if (options.cache === 'no-store' || options.cache === 'no-cache') {
      // Search for a '_' parameter in the query string
      var reParamSearch = /([?&])_=[^&]*/
      if (reParamSearch.test(this.url)) {
        // If it already exists then set the value with the current time
        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())
      } else {
        // Otherwise add a new '_' parameter to the end with the current time
        var reQueryString = /\?/
        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()
      }
    }
  }
}

Request.prototype.clone = function() {
  return new Request(this, {body: this._bodyInit})
}

function decode(body) {
  var form = new FormData()
  body
    .trim()
    .split('&')
    .forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
  return form
}

function parseHeaders(rawHeaders) {
  var headers = new Headers()
  // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  // https://tools.ietf.org/html/rfc7230#section-3.2
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
  // https://github.com/github/fetch/issues/748
  // https://github.com/zloirock/core-js/issues/751
  preProcessedHeaders
    .split('\r')
    .map(function(header) {
      return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
    })
    .forEach(function(line) {
      var parts = line.split(':')
      var key = parts.shift().trim()
      if (key) {
        var value = parts.join(':').trim()
        headers.append(key, value)
      }
    })
  return headers
}

Body.call(Request.prototype)

function Response(bodyInit, options) {
  if (!(this instanceof Response)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }
  if (!options) {
    options = {}
  }

  this.type = 'default'
  this.status = options.status === undefined ? 200 : options.status
  this.ok = this.status >= 200 && this.status < 300
  this.statusText = options.statusText === undefined ? '' : '' + options.statusText
  this.headers = new Headers(options.headers)
  this.url = options.url || ''
  this._initBody(bodyInit)
}

Body.call(Response.prototype)

Response.prototype.clone = function() {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  })
}

Response.error = function() {
  var response = new Response(null, {status: 0, statusText: ''})
  response.type = 'error'
  return response
}

var redirectStatuses = [301, 302, 303, 307, 308]

Response.redirect = function(url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError('Invalid status code')
  }

  return new Response(null, {status: status, headers: {location: url}})
}

var DOMException = global.DOMException
try {
  new DOMException()
} catch (err) {
  DOMException = function(message, name) {
    this.message = message
    this.name = name
    var error = Error(message)
    this.stack = error.stack
  }
  DOMException.prototype = Object.create(Error.prototype)
  DOMException.prototype.constructor = DOMException
}

function fetch(input, init) {
  return new Promise(function(resolve, reject) {
    var request = new Request(input, init)

    if (request.signal && request.signal.aborted) {
      return reject(new DOMException('Aborted', 'AbortError'))
    }

    var xhr = new XMLHttpRequest()

    function abortXhr() {
      xhr.abort()
    }

    xhr.onload = function() {
      var options = {
        status: xhr.status,
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
      }
      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
      var body = 'response' in xhr ? xhr.response : xhr.responseText
      setTimeout(function() {
        resolve(new Response(body, options))
      }, 0)
    }

    xhr.onerror = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'))
      }, 0)
    }

    xhr.ontimeout = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'))
      }, 0)
    }

    xhr.onabort = function() {
      setTimeout(function() {
        reject(new DOMException('Aborted', 'AbortError'))
      }, 0)
    }

    function fixUrl(url) {
      try {
        return url === '' && global.location.href ? global.location.href : url
      } catch (e) {
        return url
      }
    }

    xhr.open(request.method, fixUrl(request.url), true)

    if (request.credentials === 'include') {
      xhr.withCredentials = true
    } else if (request.credentials === 'omit') {
      xhr.withCredentials = false
    }

    if ('responseType' in xhr) {
      if (support.blob) {
        xhr.responseType = 'blob'
      } else if (
        support.arrayBuffer &&
        request.headers.get('Content-Type') &&
        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
      ) {
        xhr.responseType = 'arraybuffer'
      }
    }

    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
      Object.getOwnPropertyNames(init.headers).forEach(function(name) {
        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))
      })
    } else {
      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })
    }

    if (request.signal) {
      request.signal.addEventListener('abort', abortXhr)

      xhr.onreadystatechange = function() {
        // DONE (success or failure)
        if (xhr.readyState === 4) {
          request.signal.removeEventListener('abort', abortXhr)
        }
      }
    }

    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
  })
}

fetch.polyfill = true

if (!global.fetch) {
  global.fetch = fetch
  global.Headers = Headers
  global.Request = Request
  global.Response = Response
}


/***/ }),

/***/ "../node_modules/clone/clone.js":
/*!**************************************!*\
  !*** ../node_modules/clone/clone.js ***!
  \**************************************/
/***/ ((module) => {

var clone = (function() {
'use strict';

/**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
*/
function clone(parent, circular, depth, prototype) {
  var filter;
  if (typeof circular === 'object') {
    depth = circular.depth;
    prototype = circular.prototype;
    filter = circular.filter;
    circular = circular.circular
  }
  // maintain two arrays for circular references, where corresponding parents
  // and children have the same index
  var allParents = [];
  var allChildren = [];

  var useBuffer = typeof Buffer != 'undefined';

  if (typeof circular == 'undefined')
    circular = true;

  if (typeof depth == 'undefined')
    depth = Infinity;

  // recurse this function so we don't reset allParents and allChildren
  function _clone(parent, depth) {
    // cloning null always returns null
    if (parent === null)
      return null;

    if (depth == 0)
      return parent;

    var child;
    var proto;
    if (typeof parent != 'object') {
      return parent;
    }

    if (clone.__isArray(parent)) {
      child = [];
    } else if (clone.__isRegExp(parent)) {
      child = new RegExp(parent.source, __getRegExpFlags(parent));
      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    } else if (clone.__isDate(parent)) {
      child = new Date(parent.getTime());
    } else if (useBuffer && Buffer.isBuffer(parent)) {
      if (Buffer.allocUnsafe) {
        // Node.js >= 4.5.0
        child = Buffer.allocUnsafe(parent.length);
      } else {
        // Older Node.js versions
        child = new Buffer(parent.length);
      }
      parent.copy(child);
      return child;
    } else {
      if (typeof prototype == 'undefined') {
        proto = Object.getPrototypeOf(parent);
        child = Object.create(proto);
      }
      else {
        child = Object.create(prototype);
        proto = prototype;
      }
    }

    if (circular) {
      var index = allParents.indexOf(parent);

      if (index != -1) {
        return allChildren[index];
      }
      allParents.push(parent);
      allChildren.push(child);
    }

    for (var i in parent) {
      var attrs;
      if (proto) {
        attrs = Object.getOwnPropertyDescriptor(proto, i);
      }

      if (attrs && attrs.set == null) {
        continue;
      }
      child[i] = _clone(parent[i], depth - 1);
    }

    return child;
  }

  return _clone(parent, depth);
}

/**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */
clone.clonePrototype = function clonePrototype(parent) {
  if (parent === null)
    return null;

  var c = function () {};
  c.prototype = parent;
  return new c();
};

// private utility functions

function __objToStr(o) {
  return Object.prototype.toString.call(o);
};
clone.__objToStr = __objToStr;

function __isDate(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Date]';
};
clone.__isDate = __isDate;

function __isArray(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Array]';
};
clone.__isArray = __isArray;

function __isRegExp(o) {
  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
};
clone.__isRegExp = __isRegExp;

function __getRegExpFlags(re) {
  var flags = '';
  if (re.global) flags += 'g';
  if (re.ignoreCase) flags += 'i';
  if (re.multiline) flags += 'm';
  return flags;
};
clone.__getRegExpFlags = __getRegExpFlags;

return clone;
})();

if ( true && module.exports) {
  module.exports = clone;
}


/***/ }),

/***/ "../node_modules/css-loader/index.js!./public/elements/styles/campus-theme-properties.css":
/*!************************************************************************************************!*\
  !*** ../node_modules/css-loader/index.js!./public/elements/styles/campus-theme-properties.css ***!
  \************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "../node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.id, "/*\n * CUSTOM CSS PROPERTIES FOR THE UC DAVIS CAMPUS THEME\n*/\nhtml {\n  /* PRIMARY COLORS */\n  --color-aggie-blue        : #002851;\n  --color-aggie-blue-90     : #14447A;\n  --color-aggie-blue-80     : #13639E;\n  --color-aggie-blue-70     : #13639E;\n  --color-aggie-blue-60     : #73ABDD;\n  --color-aggie-blue-50     : #B0D0ED;\n  --color-aggie-blue-40     : #CCE0F3;\n  --color-aggie-blue-30     : #EBF3FA;\n  --color-aggie-blue-20     : #EBF3FA;\n  --color-aggie-blue-10     : #F7FAFD;\n  --color-aggie-gold        : #FFBF00;\n  --color-aggie-gold-80     : #FFC519;\n  --color-aggie-gold-70     : #FFDF80;\n  --color-aggie-gold-60     : #FFECB2;\n  --color-aggie-gold-40     : #FDE9AC;\n  --color-aggie-gold-30     : #FFF4D2;\n  --color-aggie-gold-20     : #FFF9E6;\n  --color-aggie-gold-10     : #FFFBED;\n\n  /* SECONDARY COLORS */\n  --color-arboretum         : #00C4B3;\n  --color-bodega            : #003A5D;\n  --color-cabernet          : #481268;\n  --color-california        : #8A532F;\n  --color-delta             : #00524C;\n  --color-double-decker     : #C10230;\n  --color-farmers-market    : #AADA91;\n  --color-golden-state      : #FFFF3B;\n  --color-gunrock           : #0047BA;\n  --color-merlot            : #79242F;\n  --color-pinot             : #76236C;\n  --color-poppy             : #F18A00;\n  --color-putah-creek       : #008EAA;\n  --color-quad              : #3DAE2B;\n  --color-rain              : #03F9E6;\n  --color-rec-pool          : #6FCFEB;\n  --color-redbud            : #C6007E;\n  --color-redwood           : #266041;\n  --color-rose              : #FF8189;\n  --color-sage              : #6CCA98;\n  --color-strawberry        : #F93549;\n  --color-sunflower         : #FFDC00;\n  --color-tahoe             : #00B2E3;\n  --color-thiebaud-icing    : #F095CD;\n\n  /* BLACK TONES */\n  --color-black             : #000000;\n  --color-black-90          : #191919;\n  --color-black-80          : #333333;\n  --color-black-70          : #4C4C4C;\n  --color-black-60          : #666666;\n  --color-black-50          : #7F7F7F;\n  --color-black-40          : #999999;\n  --color-black-30          : #B2B2B2;\n  --color-black-20          : #CCCCCC;\n  --color-black-10          : #E5E5E5;\n  --color-white             : #FFFFFF;\n\n  /* DEFAULT ELEMENT COLORS */\n  --color-p                 : var(--color-black);\n  --color-html              : var(--color-black);\n  --color-h1                : var(--color-aggie-blue);\n  --color-h2                : var(--color-aggie-blue-70);\n  --color-h3                : var(--color-black-60);\n  --color-h4                : var(--color-aggie-blue);\n  --color-h5                : var(--color-aggie-blue);\n  --color-h6                : var(--color-aggie-blue);\n  --color-h1-light          : var(--color-white);\n  --color-h2-light          : var(--color-white);\n  --color-h3-light          : var(--color-white);\n  --color-h4-light          : var(--color-white);\n  --color-h5-light          : var(--color-white);\n  --color-h6-light          : var(--color-white);\n  --color-a                 : var(--color-aggie-blue-70);\n  --color-a-hover           : var(--color-tahoe);\n  --color-a-active          : #035369; /* Wrong in the spec? */\n  --color-a-visited         : var(--color-pinot);\n  --color-a-focus           : var(--color-tahoe);\n\n  /* COLOR GRADIENTS */\n  --gradient-ag-putah       : linear-gradient(0deg, rgba(111,207,235,0.8), rgba(2, 40, 81, 0.8) 100%);\n\n  /* FONT SIZES */\n  --fs-p                    : 19px;\n  --fs-html                 : var(--fs-p);\n  --fs-h1                   : 2.94rem;\n  --fs-h2                   : 2.47rem;\n  --fs-h3                   : 2.05rem;\n  --fs-h4                   : 1.68rem;\n  --fs-h5                   : 1.42rem;\n  --fs-h6                   : 1.15rem;\n  --fs-small                : 14px;\n\n  /* FONT WEIGHTS */\n  --fw-regular              : 400;\n  --fw-bold                 : 700;\n  --fw-extra-bold           : 800;\n  --fw-p                    : var(--fw-extra-regular);\n  --fw-html                 : var(--fw-extra-regular);\n  --fw-h1                   : var(--fw-extra-bold);\n  --fw-h2                   : var(--fw-extra-bold);\n  --fw-h3                   : var(--fw-extra-bold);\n  --fw-h4                   : var(--fw-extra-bold);\n  --fw-h5                   : var(--fw-extra-bold);\n  --fw-h6                   : var(--fw-extra-bold);\n\n  /* LINE HEIGHT */\n  --lh-p                    : 1.6;\n  --lh-html                 : var(--lh-p);\n  --lh-h1                   : 1.25;\n  --lh-h2                   : 1.25;\n  --lh-h3                   : 1.25;\n  --lh-h4                   : 1.25;\n  --lh-h5                   : 1.25;\n  --lh-h6                   : 1.25;\n\n  /* SPACING */\n  --spacing-default         : 19px;\n  --spacing-html            : var(--spacing-default);\n  --spacing-flush           : 0px;\n  --spacing-half            : .5rem;\n  --spacing-sm              : 2rem;\n  --spacing-md              : 4rem;\n  --spacing-lg              : 6rem;\n}\n", ""]);

// exports


/***/ }),

/***/ "../node_modules/css-loader/index.js!./public/elements/styles/campus-theme.css":
/*!*************************************************************************************!*\
  !*** ../node_modules/css-loader/index.js!./public/elements/styles/campus-theme.css ***!
  \*************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "../node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.id, "/* \n * STYLES FOR THE UC DAVIS CAMPUS THEME\n * DEPENDENT ON FELLOW CSS CUSTOM PROPERTIES FILE\n*/\nbody, html {\n  font-family      : proxima-nova,\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n  font-size        : 16px;\n  font-weight      : var(--fw-html);\n  line-height      : var(--lh-html);\n  margin           : 0;\n  padding          : 0;\n  background-color : var(--color-white);\n  color            : var(--color-html);\n  max-width        : 100vw;\n  overflow-x: hidden;\n}\n\n/* body {\n  position: relative;\n} */\n\n@media screen and (min-width: 768px) {\n  body, html {\n    font-size: calc(16px + 14 * ((100vw - 768px) / 3072));\n  }\n  h1 {\n    font-size: 2.94rem;\n    font-weight: 700;\n  }\n  h2 {\n    font-size: 2.0995rem;\n  }\n  h3 {\n    font-size: 1.7425rem;\n  }\n  h4 {\n    font-size: 1.428rem;\n  }\n  h5 {\n    font-size: 1.207rem;\n  }\n  h6 {\n    font-size: 1rem;\n  }\n}\n@media screen and (min-width: 3840px) {\n  body, html {\n    font-size: 30px;\n  }\n}\n\n/* BASIC TYPOGRAPHY */\np, .p {\n  /* font-size: var(--fs-p); */\n  font-weight: var(--fw-p);\n  line-height: var(--lh-p);\n  color: var(--color-p);\n}\n\n/* HEADINGS */\nh1, .h1 {\n  /* font-size: var(--fs-h1); */\n  /* font-weight: var(--fw-h1); */\n  /* font-size: 1.91rem; */\n  color: var(--color-h1);\n  line-height: var(--lh-h1);\n}\nh2, .h2 {\n  /* font-size: var(--fs-h2); */\n  /* font-weight: var(--fw-h2); */\n  /* font-size: 1.6055rem; */\n  color: var(--color-h2);\n  line-height: var(--lh-h2);\n}\nh3, .h3 {\n  /* font-size: var(--fs-h3); */\n  /* font-weight: var(--fw-h3); */\n  /* font-size: 1.3325rem; */\n  color: var(--color-h3);\n  line-height: var(--lh-h3);\n}\nh4, .h4 {\n  /* font-size: var(--fs-h4); */\n  /* font-weight: var(--fw-h4); */\n  /* font-weight: 1.092rem; */\n  color: var(--color-h4);\n  line-height: var(--lh-h4);\n}\nh5, .h5 {\n  /* font-size: var(--fs-h5); */\n  /* font-weight: var(--fw-h5); */\n  /* font-weight: 1rem; */\n  color: var(--color-h5);\n  line-height: var(--lh-h5);\n}\nh6, .h6 {\n  /* font-size: var(--fs-h6); */\n  /* font-weight: var(--fw-h6); */\n  color: var(--color-h6);\n  line-height: var(--lh-h6);\n}\nh1.color-light, .h1.color-light {\n  color: var(--color-h1-light);\n}\nh2.color-light, .h2.color-light {\n  color: var(--color-h2-light);\n}\nh3.color-light, .h3.color-light {\n  color: var(--color-h3-light);\n}\nh4.color-light, .h4.color-light {\n  color: var(--color-h4-light);\n}\nh5.color-light, .h5.color-light {\n  color: var(--color-h5-light);\n}\nh6.color-light, .h6.color-light {\n  color: var(--color-h6-light);\n}\n\n/* LINKS */\na {\n  color: var(--color-a);\n}\na:visited {\n  /* color: var(--color-a-visited); */\n}\na:hover {\n  color: var(--color-a-hover);\n}\na:active {\n  color: var(--color-a-active);\n}\na:focus {\n  color: var(--color-a-focus);\n}\nh1 > a, .h1 > a, \nh2 > a, .h2 > a, \nh3 > a, .h3 > a, \nh4 > a, .h4 > a, \nh5 > a, .h5 > a, \nh6 > a, .h6 > a {\n  text-decoration: underline;\n  color: inherit;\n}\nh1 > a:hover, .h1 > a:hover,\nh2 > a:hover, .h2 > a:hover,\nh3 > a:hover, .h3 > a:hover,\nh4 > a:hover, .h4 > a:hover,\nh5 > a:hover, .h5 > a:hover,\nh6 > a:hover, .h6 > a:hover {\n  text-decoration: none;\n  color: inherit;\n}\nh1 > a:active, .h1 > a:active,\nh2 > a:active, .h2 > a:active,\nh3 > a:active, .h3 > a:active,\nh4 > a:active, .h4 > a:active,\nh5 > a:active, .h5 > a:active,\nh6 > a:active, .h6 > a:active {\n  text-decoration: none;\n  color: inherit;\n}\nh1 > a:focus, .h1 > a:focus,\nh2 > a:focus, .h2 > a:focus,\nh3 > a:focus, .h3 > a:focus,\nh4 > a:focus, .h4 > a:focus,\nh5 > a:focus, .h5 > a:focus,\nh6 > a:focus, .h6 > a:focus {\n  text-decoration: none;\n  color: inherit;\n}\n/* h1 > a:visited, .h1 > a:visited,\nh2 > a:visited, .h2 > a:visited,\nh3 > a:visited, .h3 > a:visited,\nh4 > a:visited, .h4 > a:visited,\nh5 > a:visited, .h5 > a:visited,\nh6 > a:visited, .h6 > a:visited {\n  text-decoration: underline;\n} */\n\n/* */\n[hidden] {\n  display: none !important;\n}", ""]);

// exports


/***/ }),

/***/ "../node_modules/css-loader/lib/css-base.js":
/*!**************************************************!*\
  !*** ../node_modules/css-loader/lib/css-base.js ***!
  \**************************************************/
/***/ ((module) => {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "../node_modules/events/events.js":
/*!****************************************!*\
  !*** ../node_modules/events/events.js ***!
  \****************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./public/elements/styles/campus-theme-properties.css":
/*!************************************************************!*\
  !*** ./public/elements/styles/campus-theme-properties.css ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        var result = __webpack_require__(/*! !!../../../../node_modules/css-loader/index.js!./campus-theme-properties.css */ "../node_modules/css-loader/index.js!./public/elements/styles/campus-theme-properties.css");

        if (result && result.__esModule) {
            result = result.default;
        }

        if (typeof result === "string") {
            module.exports = result;
        } else {
            module.exports = result.toString();
        }
    

/***/ }),

/***/ "./public/elements/styles/campus-theme.css":
/*!*************************************************!*\
  !*** ./public/elements/styles/campus-theme.css ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


        var result = __webpack_require__(/*! !!../../../../node_modules/css-loader/index.js!./campus-theme.css */ "../node_modules/css-loader/index.js!./public/elements/styles/campus-theme.css");

        if (result && result.__esModule) {
            result = result.default;
        }

        if (typeof result === "string") {
            module.exports = result;
        } else {
            module.exports = result.toString();
        }
    

/***/ }),

/***/ "./public/node_modules/@lit/reactive-element/development/css-tag.js":
/*!**************************************************************************!*\
  !*** ./public/node_modules/@lit/reactive-element/development/css-tag.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSResult: () => (/* binding */ CSSResult),
/* harmony export */   adoptStyles: () => (/* binding */ adoptStyles),
/* harmony export */   css: () => (/* binding */ css),
/* harmony export */   getCompatibleStyle: () => (/* binding */ getCompatibleStyle),
/* harmony export */   supportsAdoptingStyleSheets: () => (/* binding */ supportsAdoptingStyleSheets),
/* harmony export */   unsafeCSS: () => (/* binding */ unsafeCSS)
/* harmony export */ });
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const NODE_MODE = false;
const global = NODE_MODE ? globalThis : window;
/**
 * Whether the current browser supports `adoptedStyleSheets`.
 */
const supportsAdoptingStyleSheets = global.ShadowRoot &&
    (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&
    'adoptedStyleSheets' in Document.prototype &&
    'replace' in CSSStyleSheet.prototype;
const constructionToken = Symbol();
const cssTagCache = new WeakMap();
/**
 * A container for a string of CSS text, that may be used to create a CSSStyleSheet.
 *
 * CSSResult is the return value of `css`-tagged template literals and
 * `unsafeCSS()`. In order to ensure that CSSResults are only created via the
 * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.
 */
class CSSResult {
    constructor(cssText, strings, safeToken) {
        // This property needs to remain unminified.
        this['_$cssResult$'] = true;
        if (safeToken !== constructionToken) {
            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
        }
        this.cssText = cssText;
        this._strings = strings;
    }
    // This is a getter so that it's lazy. In practice, this means stylesheets
    // are not created until the first element instance is made.
    get styleSheet() {
        // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is
        // constructable.
        let styleSheet = this._styleSheet;
        const strings = this._strings;
        if (supportsAdoptingStyleSheets && styleSheet === undefined) {
            const cacheable = strings !== undefined && strings.length === 1;
            if (cacheable) {
                styleSheet = cssTagCache.get(strings);
            }
            if (styleSheet === undefined) {
                (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(this.cssText);
                if (cacheable) {
                    cssTagCache.set(strings, styleSheet);
                }
            }
        }
        return styleSheet;
    }
    toString() {
        return this.cssText;
    }
}
const textFromCSSResult = (value) => {
    // This property needs to remain unminified.
    if (value['_$cssResult$'] === true) {
        return value.cssText;
    }
    else if (typeof value === 'number') {
        return value;
    }
    else {
        throw new Error(`Value passed to 'css' function must be a 'css' function result: ` +
            `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +
            `to ensure page security.`);
    }
};
/**
 * Wrap a value for interpolation in a {@linkcode css} tagged template literal.
 *
 * This is unsafe because untrusted CSS text can be used to phone home
 * or exfiltrate data to an attacker controlled site. Take care to only use
 * this with trusted input.
 */
const unsafeCSS = (value) => new CSSResult(typeof value === 'string' ? value : String(value), undefined, constructionToken);
/**
 * A template literal tag which can be used with LitElement's
 * {@linkcode LitElement.styles} property to set element styles.
 *
 * For security reasons, only literal string values and number may be used in
 * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}
 * may be used inside an expression.
 */
const css = (strings, ...values) => {
    const cssText = strings.length === 1
        ? strings[0]
        : values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);
    return new CSSResult(cssText, strings, constructionToken);
};
/**
 * Applies the given styles to a `shadowRoot`. When Shadow DOM is
 * available but `adoptedStyleSheets` is not, styles are appended to the
 * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
 * Note, when shimming is used, any styles that are subsequently placed into
 * the shadowRoot should be placed *before* any shimmed adopted styles. This
 * will match spec behavior that gives adopted sheets precedence over styles in
 * shadowRoot.
 */
const adoptStyles = (renderRoot, styles) => {
    if (supportsAdoptingStyleSheets) {
        renderRoot.adoptedStyleSheets = styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);
    }
    else {
        styles.forEach((s) => {
            const style = document.createElement('style');
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const nonce = global['litNonce'];
            if (nonce !== undefined) {
                style.setAttribute('nonce', nonce);
            }
            style.textContent = s.cssText;
            renderRoot.appendChild(style);
        });
    }
};
const cssResultFromStyleSheet = (sheet) => {
    let cssText = '';
    for (const rule of sheet.cssRules) {
        cssText += rule.cssText;
    }
    return unsafeCSS(cssText);
};
const getCompatibleStyle = supportsAdoptingStyleSheets ||
    (NODE_MODE && global.CSSStyleSheet === undefined)
    ? (s) => s
    : (s) => s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;
//# sourceMappingURL=css-tag.js.map

/***/ }),

/***/ "./public/node_modules/@lit/reactive-element/development/reactive-element.js":
/*!***********************************************************************************!*\
  !*** ./public/node_modules/@lit/reactive-element/development/reactive-element.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSResult: () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.CSSResult),
/* harmony export */   ReactiveElement: () => (/* binding */ ReactiveElement),
/* harmony export */   adoptStyles: () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.adoptStyles),
/* harmony export */   css: () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.css),
/* harmony export */   defaultConverter: () => (/* binding */ defaultConverter),
/* harmony export */   getCompatibleStyle: () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle),
/* harmony export */   notEqual: () => (/* binding */ notEqual),
/* harmony export */   supportsAdoptingStyleSheets: () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.supportsAdoptingStyleSheets),
/* harmony export */   unsafeCSS: () => (/* reexport safe */ _css_tag_js__WEBPACK_IMPORTED_MODULE_0__.unsafeCSS)
/* harmony export */ });
/* harmony import */ var _css_tag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css-tag.js */ "./public/node_modules/@lit/reactive-element/development/css-tag.js");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var _a, _b, _c, _d;
var _e;
/**
 * Use this module if you want to create your own base class extending
 * {@link ReactiveElement}.
 * @packageDocumentation
 */

// In the Node build, this import will be injected by Rollup:
// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';

const NODE_MODE = false;
const global = NODE_MODE ? globalThis : window;
if (NODE_MODE) {
    (_a = global.customElements) !== null && _a !== void 0 ? _a : (global.customElements = customElements);
}
const DEV_MODE = true;
let requestUpdateThenable;
let issueWarning;
const trustedTypes = global
    .trustedTypes;
// Temporary workaround for https://crbug.com/993268
// Currently, any attribute starting with "on" is considered to be a
// TrustedScript source. Such boolean attributes must be set to the equivalent
// trusted emptyScript value.
const emptyStringForBooleanAttribute = trustedTypes
    ? trustedTypes.emptyScript
    : '';
const polyfillSupport = DEV_MODE
    ? global.reactiveElementPolyfillSupportDevMode
    : global.reactiveElementPolyfillSupport;
if (DEV_MODE) {
    // Ensure warnings are issued only 1x, even if multiple versions of Lit
    // are loaded.
    const issuedWarnings = ((_b = global.litIssuedWarnings) !== null && _b !== void 0 ? _b : (global.litIssuedWarnings = new Set()));
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning) => {
        warning += ` See https://lit.dev/msg/${code} for more information.`;
        if (!issuedWarnings.has(warning)) {
            console.warn(warning);
            issuedWarnings.add(warning);
        }
    };
    issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`);
    // Issue polyfill support warning.
    if (((_c = global.ShadyDOM) === null || _c === void 0 ? void 0 : _c.inUse) && polyfillSupport === undefined) {
        issueWarning('polyfill-support-missing', `Shadow DOM is being polyfilled via \`ShadyDOM\` but ` +
            `the \`polyfill-support\` module has not been loaded.`);
    }
    requestUpdateThenable = (name) => ({
        then: (onfulfilled, _onrejected) => {
            issueWarning('request-update-promise', `The \`requestUpdate\` method should no longer return a Promise but ` +
                `does so on \`${name}\`. Use \`updateComplete\` instead.`);
            if (onfulfilled !== undefined) {
                onfulfilled(false);
            }
        },
    });
}
/**
 * Useful for visualizing and logging insights into what the Lit template system is doing.
 *
 * Compiled out of prod mode builds.
 */
const debugLogEvent = DEV_MODE
    ? (event) => {
        const shouldEmit = global
            .emitLitDebugLogEvents;
        if (!shouldEmit) {
            return;
        }
        global.dispatchEvent(new CustomEvent('lit-debug', {
            detail: event,
        }));
    }
    : undefined;
/*
 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
 * replaced at compile time by the munged name for object[property]. We cannot
 * alias this function, so we have to use a small shim that has the same
 * behavior when not compiling.
 */
/*@__INLINE__*/
const JSCompiler_renameProperty = (prop, _obj) => prop;
const defaultConverter = {
    toAttribute(value, type) {
        switch (type) {
            case Boolean:
                value = value ? emptyStringForBooleanAttribute : null;
                break;
            case Object:
            case Array:
                // if the value is `null` or `undefined` pass this through
                // to allow removing/no change behavior.
                value = value == null ? value : JSON.stringify(value);
                break;
        }
        return value;
    },
    fromAttribute(value, type) {
        let fromValue = value;
        switch (type) {
            case Boolean:
                fromValue = value !== null;
                break;
            case Number:
                fromValue = value === null ? null : Number(value);
                break;
            case Object:
            case Array:
                // Do *not* generate exception when invalid JSON is set as elements
                // don't normally complain on being mis-configured.
                // TODO(sorvell): Do generate exception in *dev mode*.
                try {
                    // Assert to adhere to Bazel's "must type assert JSON parse" rule.
                    fromValue = JSON.parse(value);
                }
                catch (e) {
                    fromValue = null;
                }
                break;
        }
        return fromValue;
    },
};
/**
 * Change function that returns true if `value` is different from `oldValue`.
 * This method is used as the default for a property's `hasChanged` function.
 */
const notEqual = (value, old) => {
    // This ensures (old==NaN, value==NaN) always returns false
    return old !== value && (old === old || value === value);
};
const defaultPropertyDeclaration = {
    attribute: true,
    type: String,
    converter: defaultConverter,
    reflect: false,
    hasChanged: notEqual,
};
/**
 * The Closure JS Compiler doesn't currently have good support for static
 * property semantics where "this" is dynamic (e.g.
 * https://github.com/google/closure-compiler/issues/3177 and others) so we use
 * this hack to bypass any rewriting by the compiler.
 */
const finalized = 'finalized';
/**
 * Base element class which manages element properties and attributes. When
 * properties change, the `update` method is asynchronously called. This method
 * should be supplied by subclassers to render updates as desired.
 * @noInheritDoc
 */
class ReactiveElement
// In the Node build, this `extends` clause will be substituted with
// `(globalThis.HTMLElement ?? HTMLElement)`.
//
// This way, we will first prefer any global `HTMLElement` polyfill that the
// user has assigned, and then fall back to the `HTMLElement` shim which has
// been imported (see note at the top of this file about how this import is
// generated by Rollup). Note that the `HTMLElement` variable has been
// shadowed by this import, so it no longer refers to the global.
 extends HTMLElement {
    constructor() {
        super();
        this.__instanceProperties = new Map();
        /**
         * True if there is a pending update as a result of calling `requestUpdate()`.
         * Should only be read.
         * @category updates
         */
        this.isUpdatePending = false;
        /**
         * Is set to `true` after the first update. The element code cannot assume
         * that `renderRoot` exists before the element `hasUpdated`.
         * @category updates
         */
        this.hasUpdated = false;
        /**
         * Name of currently reflecting property
         */
        this.__reflectingProperty = null;
        this.__initialize();
    }
    /**
     * Adds an initializer function to the class that is called during instance
     * construction.
     *
     * This is useful for code that runs against a `ReactiveElement`
     * subclass, such as a decorator, that needs to do work for each
     * instance, such as setting up a `ReactiveController`.
     *
     * ```ts
     * const myDecorator = (target: typeof ReactiveElement, key: string) => {
     *   target.addInitializer((instance: ReactiveElement) => {
     *     // This is run during construction of the element
     *     new MyController(instance);
     *   });
     * }
     * ```
     *
     * Decorating a field will then cause each instance to run an initializer
     * that adds a controller:
     *
     * ```ts
     * class MyElement extends LitElement {
     *   @myDecorator foo;
     * }
     * ```
     *
     * Initializers are stored per-constructor. Adding an initializer to a
     * subclass does not add it to a superclass. Since initializers are run in
     * constructors, initializers will run in order of the class hierarchy,
     * starting with superclasses and progressing to the instance's class.
     *
     * @nocollapse
     */
    static addInitializer(initializer) {
        var _a;
        this.finalize();
        ((_a = this._initializers) !== null && _a !== void 0 ? _a : (this._initializers = [])).push(initializer);
    }
    /**
     * Returns a list of attributes corresponding to the registered properties.
     * @nocollapse
     * @category attributes
     */
    static get observedAttributes() {
        // note: piggy backing on this to ensure we're finalized.
        this.finalize();
        const attributes = [];
        // Use forEach so this works even if for/of loops are compiled to for loops
        // expecting arrays
        this.elementProperties.forEach((v, p) => {
            const attr = this.__attributeNameForProperty(p, v);
            if (attr !== undefined) {
                this.__attributeToPropertyMap.set(attr, p);
                attributes.push(attr);
            }
        });
        return attributes;
    }
    /**
     * Creates a property accessor on the element prototype if one does not exist
     * and stores a {@linkcode PropertyDeclaration} for the property with the
     * given options. The property setter calls the property's `hasChanged`
     * property option or uses a strict identity check to determine whether or not
     * to request an update.
     *
     * This method may be overridden to customize properties; however,
     * when doing so, it's important to call `super.createProperty` to ensure
     * the property is setup correctly. This method calls
     * `getPropertyDescriptor` internally to get a descriptor to install.
     * To customize what properties do when they are get or set, override
     * `getPropertyDescriptor`. To customize the options for a property,
     * implement `createProperty` like this:
     *
     * ```ts
     * static createProperty(name, options) {
     *   options = Object.assign(options, {myOption: true});
     *   super.createProperty(name, options);
     * }
     * ```
     *
     * @nocollapse
     * @category properties
     */
    static createProperty(name, options = defaultPropertyDeclaration) {
        var _a;
        // if this is a state property, force the attribute to false.
        if (options.state) {
            // Cast as any since this is readonly.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            options.attribute = false;
        }
        // Note, since this can be called by the `@property` decorator which
        // is called before `finalize`, we ensure finalization has been kicked off.
        this.finalize();
        this.elementProperties.set(name, options);
        // Do not generate an accessor if the prototype already has one, since
        // it would be lost otherwise and that would never be the user's intention;
        // Instead, we expect users to call `requestUpdate` themselves from
        // user-defined accessors. Note that if the super has an accessor we will
        // still overwrite it
        if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {
            const key = typeof name === 'symbol' ? Symbol() : `__${name}`;
            const descriptor = this.getPropertyDescriptor(name, key, options);
            if (descriptor !== undefined) {
                Object.defineProperty(this.prototype, name, descriptor);
                if (DEV_MODE) {
                    // If this class doesn't have its own set, create one and initialize
                    // with the values in the set from the nearest ancestor class, if any.
                    if (!this.hasOwnProperty('__reactivePropertyKeys')) {
                        this.__reactivePropertyKeys = new Set((_a = this.__reactivePropertyKeys) !== null && _a !== void 0 ? _a : []);
                    }
                    this.__reactivePropertyKeys.add(name);
                }
            }
        }
    }
    /**
     * Returns a property descriptor to be defined on the given named property.
     * If no descriptor is returned, the property will not become an accessor.
     * For example,
     *
     * ```ts
     * class MyElement extends LitElement {
     *   static getPropertyDescriptor(name, key, options) {
     *     const defaultDescriptor =
     *         super.getPropertyDescriptor(name, key, options);
     *     const setter = defaultDescriptor.set;
     *     return {
     *       get: defaultDescriptor.get,
     *       set(value) {
     *         setter.call(this, value);
     *         // custom action.
     *       },
     *       configurable: true,
     *       enumerable: true
     *     }
     *   }
     * }
     * ```
     *
     * @nocollapse
     * @category properties
     */
    static getPropertyDescriptor(name, key, options) {
        return {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            get() {
                return this[key];
            },
            set(value) {
                const oldValue = this[name];
                this[key] = value;
                this.requestUpdate(name, oldValue, options);
            },
            configurable: true,
            enumerable: true,
        };
    }
    /**
     * Returns the property options associated with the given property.
     * These options are defined with a `PropertyDeclaration` via the `properties`
     * object or the `@property` decorator and are registered in
     * `createProperty(...)`.
     *
     * Note, this method should be considered "final" and not overridden. To
     * customize the options for a given property, override
     * {@linkcode createProperty}.
     *
     * @nocollapse
     * @final
     * @category properties
     */
    static getPropertyOptions(name) {
        return this.elementProperties.get(name) || defaultPropertyDeclaration;
    }
    /**
     * Creates property accessors for registered properties, sets up element
     * styling, and ensures any superclasses are also finalized. Returns true if
     * the element was finalized.
     * @nocollapse
     */
    static finalize() {
        if (this.hasOwnProperty(finalized)) {
            return false;
        }
        this[finalized] = true;
        // finalize any superclasses
        const superCtor = Object.getPrototypeOf(this);
        superCtor.finalize();
        // Create own set of initializers for this class if any exist on the
        // superclass and copy them down. Note, for a small perf boost, avoid
        // creating initializers unless needed.
        if (superCtor._initializers !== undefined) {
            this._initializers = [...superCtor._initializers];
        }
        this.elementProperties = new Map(superCtor.elementProperties);
        // initialize Map populated in observedAttributes
        this.__attributeToPropertyMap = new Map();
        // make any properties
        // Note, only process "own" properties since this element will inherit
        // any properties defined on the superClass, and finalization ensures
        // the entire prototype chain is finalized.
        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {
            const props = this.properties;
            // support symbols in properties (IE11 does not support this)
            const propKeys = [
                ...Object.getOwnPropertyNames(props),
                ...Object.getOwnPropertySymbols(props),
            ];
            // This for/of is ok because propKeys is an array
            for (const p of propKeys) {
                // note, use of `any` is due to TypeScript lack of support for symbol in
                // index types
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this.createProperty(p, props[p]);
            }
        }
        this.elementStyles = this.finalizeStyles(this.styles);
        // DEV mode warnings
        if (DEV_MODE) {
            const warnRemovedOrRenamed = (name, renamed = false) => {
                if (this.prototype.hasOwnProperty(name)) {
                    issueWarning(renamed ? 'renamed-api' : 'removed-api', `\`${name}\` is implemented on class ${this.name}. It ` +
                        `has been ${renamed ? 'renamed' : 'removed'} ` +
                        `in this version of LitElement.`);
                }
            };
            warnRemovedOrRenamed('initialize');
            warnRemovedOrRenamed('requestUpdateInternal');
            warnRemovedOrRenamed('_getUpdateComplete', true);
        }
        return true;
    }
    /**
     * Takes the styles the user supplied via the `static styles` property and
     * returns the array of styles to apply to the element.
     * Override this method to integrate into a style management system.
     *
     * Styles are deduplicated preserving the _last_ instance in the list. This
     * is a performance optimization to avoid duplicated styles that can occur
     * especially when composing via subclassing. The last item is kept to try
     * to preserve the cascade order with the assumption that it's most important
     * that last added styles override previous styles.
     *
     * @nocollapse
     * @category styles
     */
    static finalizeStyles(styles) {
        const elementStyles = [];
        if (Array.isArray(styles)) {
            // Dedupe the flattened array in reverse order to preserve the last items.
            // Casting to Array<unknown> works around TS error that
            // appears to come from trying to flatten a type CSSResultArray.
            const set = new Set(styles.flat(Infinity).reverse());
            // Then preserve original order by adding the set items in reverse order.
            for (const s of set) {
                elementStyles.unshift((0,_css_tag_js__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle)(s));
            }
        }
        else if (styles !== undefined) {
            elementStyles.push((0,_css_tag_js__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle)(styles));
        }
        return elementStyles;
    }
    /**
     * Returns the property name for the given attribute `name`.
     * @nocollapse
     */
    static __attributeNameForProperty(name, options) {
        const attribute = options.attribute;
        return attribute === false
            ? undefined
            : typeof attribute === 'string'
                ? attribute
                : typeof name === 'string'
                    ? name.toLowerCase()
                    : undefined;
    }
    /**
     * Internal only override point for customizing work done when elements
     * are constructed.
     */
    __initialize() {
        var _a;
        this.__updatePromise = new Promise((res) => (this.enableUpdating = res));
        this._$changedProperties = new Map();
        this.__saveInstanceProperties();
        // ensures first update will be caught by an early access of
        // `updateComplete`
        this.requestUpdate();
        (_a = this.constructor._initializers) === null || _a === void 0 ? void 0 : _a.forEach((i) => i(this));
    }
    /**
     * Registers a `ReactiveController` to participate in the element's reactive
     * update cycle. The element automatically calls into any registered
     * controllers during its lifecycle callbacks.
     *
     * If the element is connected when `addController()` is called, the
     * controller's `hostConnected()` callback will be immediately called.
     * @category controllers
     */
    addController(controller) {
        var _a, _b;
        ((_a = this.__controllers) !== null && _a !== void 0 ? _a : (this.__controllers = [])).push(controller);
        // If a controller is added after the element has been connected,
        // call hostConnected. Note, re-using existence of `renderRoot` here
        // (which is set in connectedCallback) to avoid the need to track a
        // first connected state.
        if (this.renderRoot !== undefined && this.isConnected) {
            (_b = controller.hostConnected) === null || _b === void 0 ? void 0 : _b.call(controller);
        }
    }
    /**
     * Removes a `ReactiveController` from the element.
     * @category controllers
     */
    removeController(controller) {
        var _a;
        // Note, if the indexOf is -1, the >>> will flip the sign which makes the
        // splice do nothing.
        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.splice(this.__controllers.indexOf(controller) >>> 0, 1);
    }
    /**
     * Fixes any properties set on the instance before upgrade time.
     * Otherwise these would shadow the accessor and break these properties.
     * The properties are stored in a Map which is played back after the
     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
     * (<=41), properties created for native platform properties like (`id` or
     * `name`) may not have default values set in the element constructor. On
     * these browsers native properties appear on instances and therefore their
     * default value will overwrite any element default (e.g. if the element sets
     * this.id = 'id' in the constructor, the 'id' will become '' since this is
     * the native platform default).
     */
    __saveInstanceProperties() {
        // Use forEach so this works even if for/of loops are compiled to for loops
        // expecting arrays
        this.constructor.elementProperties.forEach((_v, p) => {
            if (this.hasOwnProperty(p)) {
                this.__instanceProperties.set(p, this[p]);
                delete this[p];
            }
        });
    }
    /**
     * Returns the node into which the element should render and by default
     * creates and returns an open shadowRoot. Implement to customize where the
     * element's DOM is rendered. For example, to render into the element's
     * childNodes, return `this`.
     *
     * @return Returns a node into which to render.
     * @category rendering
     */
    createRenderRoot() {
        var _a;
        const renderRoot = (_a = this.shadowRoot) !== null && _a !== void 0 ? _a : this.attachShadow(this.constructor.shadowRootOptions);
        (0,_css_tag_js__WEBPACK_IMPORTED_MODULE_0__.adoptStyles)(renderRoot, this.constructor.elementStyles);
        return renderRoot;
    }
    /**
     * On first connection, creates the element's renderRoot, sets up
     * element styling, and enables updating.
     * @category lifecycle
     */
    connectedCallback() {
        var _a;
        // create renderRoot before first update.
        if (this.renderRoot === undefined) {
            this.renderRoot = this.createRenderRoot();
        }
        this.enableUpdating(true);
        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostConnected) === null || _a === void 0 ? void 0 : _a.call(c); });
    }
    /**
     * Note, this method should be considered final and not overridden. It is
     * overridden on the element instance with a function that triggers the first
     * update.
     * @category updates
     */
    enableUpdating(_requestedUpdate) { }
    /**
     * Allows for `super.disconnectedCallback()` in extensions while
     * reserving the possibility of making non-breaking feature additions
     * when disconnecting at some point in the future.
     * @category lifecycle
     */
    disconnectedCallback() {
        var _a;
        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostDisconnected) === null || _a === void 0 ? void 0 : _a.call(c); });
    }
    /**
     * Synchronizes property values when attributes change.
     *
     * Specifically, when an attribute is set, the corresponding property is set.
     * You should rarely need to implement this callback. If this method is
     * overridden, `super.attributeChangedCallback(name, _old, value)` must be
     * called.
     *
     * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)
     * on MDN for more information about the `attributeChangedCallback`.
     * @category attributes
     */
    attributeChangedCallback(name, _old, value) {
        this._$attributeToProperty(name, value);
    }
    __propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
        var _a;
        const attr = this.constructor.__attributeNameForProperty(name, options);
        if (attr !== undefined && options.reflect === true) {
            const converter = ((_a = options.converter) === null || _a === void 0 ? void 0 : _a.toAttribute) !==
                undefined
                ? options.converter
                : defaultConverter;
            const attrValue = converter.toAttribute(value, options.type);
            if (DEV_MODE &&
                this.constructor.enabledWarnings.indexOf('migration') >= 0 &&
                attrValue === undefined) {
                issueWarning('undefined-attribute-value', `The attribute value for the ${name} property is ` +
                    `undefined on element ${this.localName}. The attribute will be ` +
                    `removed, but in the previous version of \`ReactiveElement\`, ` +
                    `the attribute would not have changed.`);
            }
            // Track if the property is being reflected to avoid
            // setting the property again via `attributeChangedCallback`. Note:
            // 1. this takes advantage of the fact that the callback is synchronous.
            // 2. will behave incorrectly if multiple attributes are in the reaction
            // stack at time of calling. However, since we process attributes
            // in `update` this should not be possible (or an extreme corner case
            // that we'd like to discover).
            // mark state reflecting
            this.__reflectingProperty = name;
            if (attrValue == null) {
                this.removeAttribute(attr);
            }
            else {
                this.setAttribute(attr, attrValue);
            }
            // mark state not reflecting
            this.__reflectingProperty = null;
        }
    }
    /** @internal */
    _$attributeToProperty(name, value) {
        var _a;
        const ctor = this.constructor;
        // Note, hint this as an `AttributeMap` so closure clearly understands
        // the type; it has issues with tracking types through statics
        const propName = ctor.__attributeToPropertyMap.get(name);
        // Use tracking info to avoid reflecting a property value to an attribute
        // if it was just set because the attribute changed.
        if (propName !== undefined && this.__reflectingProperty !== propName) {
            const options = ctor.getPropertyOptions(propName);
            const converter = typeof options.converter === 'function'
                ? { fromAttribute: options.converter }
                : ((_a = options.converter) === null || _a === void 0 ? void 0 : _a.fromAttribute) !== undefined
                    ? options.converter
                    : defaultConverter;
            // mark state reflecting
            this.__reflectingProperty = propName;
            this[propName] = converter.fromAttribute(value, options.type
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            );
            // mark state not reflecting
            this.__reflectingProperty = null;
        }
    }
    /**
     * Requests an update which is processed asynchronously. This should be called
     * when an element should update based on some state not triggered by setting
     * a reactive property. In this case, pass no arguments. It should also be
     * called when manually implementing a property setter. In this case, pass the
     * property `name` and `oldValue` to ensure that any configured property
     * options are honored.
     *
     * @param name name of requesting property
     * @param oldValue old value of requesting property
     * @param options property options to use instead of the previously
     *     configured options
     * @category updates
     */
    requestUpdate(name, oldValue, options) {
        let shouldRequestUpdate = true;
        // If we have a property key, perform property update steps.
        if (name !== undefined) {
            options =
                options ||
                    this.constructor.getPropertyOptions(name);
            const hasChanged = options.hasChanged || notEqual;
            if (hasChanged(this[name], oldValue)) {
                if (!this._$changedProperties.has(name)) {
                    this._$changedProperties.set(name, oldValue);
                }
                // Add to reflecting properties set.
                // Note, it's important that every change has a chance to add the
                // property to `_reflectingProperties`. This ensures setting
                // attribute + property reflects correctly.
                if (options.reflect === true && this.__reflectingProperty !== name) {
                    if (this.__reflectingProperties === undefined) {
                        this.__reflectingProperties = new Map();
                    }
                    this.__reflectingProperties.set(name, options);
                }
            }
            else {
                // Abort the request if the property should not be considered changed.
                shouldRequestUpdate = false;
            }
        }
        if (!this.isUpdatePending && shouldRequestUpdate) {
            this.__updatePromise = this.__enqueueUpdate();
        }
        // Note, since this no longer returns a promise, in dev mode we return a
        // thenable which warns if it's called.
        return DEV_MODE
            ? requestUpdateThenable(this.localName)
            : undefined;
    }
    /**
     * Sets up the element to asynchronously update.
     */
    async __enqueueUpdate() {
        this.isUpdatePending = true;
        try {
            // Ensure any previous update has resolved before updating.
            // This `await` also ensures that property changes are batched.
            await this.__updatePromise;
        }
        catch (e) {
            // Refire any previous errors async so they do not disrupt the update
            // cycle. Errors are refired so developers have a chance to observe
            // them, and this can be done by implementing
            // `window.onunhandledrejection`.
            Promise.reject(e);
        }
        const result = this.scheduleUpdate();
        // If `scheduleUpdate` returns a Promise, we await it. This is done to
        // enable coordinating updates with a scheduler. Note, the result is
        // checked to avoid delaying an additional microtask unless we need to.
        if (result != null) {
            await result;
        }
        return !this.isUpdatePending;
    }
    /**
     * Schedules an element update. You can override this method to change the
     * timing of updates by returning a Promise. The update will await the
     * returned Promise, and you should resolve the Promise to allow the update
     * to proceed. If this method is overridden, `super.scheduleUpdate()`
     * must be called.
     *
     * For instance, to schedule updates to occur just before the next frame:
     *
     * ```ts
     * override protected async scheduleUpdate(): Promise<unknown> {
     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
     *   super.scheduleUpdate();
     * }
     * ```
     * @category updates
     */
    scheduleUpdate() {
        return this.performUpdate();
    }
    /**
     * Performs an element update. Note, if an exception is thrown during the
     * update, `firstUpdated` and `updated` will not be called.
     *
     * Call `performUpdate()` to immediately process a pending update. This should
     * generally not be needed, but it can be done in rare cases when you need to
     * update synchronously.
     *
     * Note: To ensure `performUpdate()` synchronously completes a pending update,
     * it should not be overridden. In LitElement 2.x it was suggested to override
     * `performUpdate()` to also customizing update scheduling. Instead, you should now
     * override `scheduleUpdate()`. For backwards compatibility with LitElement 2.x,
     * scheduling updates via `performUpdate()` continues to work, but will make
     * also calling `performUpdate()` to synchronously process updates difficult.
     *
     * @category updates
     */
    performUpdate() {
        var _a, _b;
        // Abort any update if one is not pending when this is called.
        // This can happen if `performUpdate` is called early to "flush"
        // the update.
        if (!this.isUpdatePending) {
            return;
        }
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({ kind: 'update' });
        // create renderRoot before first update.
        if (!this.hasUpdated) {
            // Produce warning if any class properties are shadowed by class fields
            if (DEV_MODE) {
                const shadowedProperties = [];
                (_a = this.constructor.__reactivePropertyKeys) === null || _a === void 0 ? void 0 : _a.forEach((p) => {
                    var _a;
                    if (this.hasOwnProperty(p) && !((_a = this.__instanceProperties) === null || _a === void 0 ? void 0 : _a.has(p))) {
                        shadowedProperties.push(p);
                    }
                });
                if (shadowedProperties.length) {
                    throw new Error(`The following properties on element ${this.localName} will not ` +
                        `trigger updates as expected because they are set using class ` +
                        `fields: ${shadowedProperties.join(', ')}. ` +
                        `Native class fields and some compiled output will overwrite ` +
                        `accessors used for detecting changes. See ` +
                        `https://lit.dev/msg/class-field-shadowing ` +
                        `for more information.`);
                }
            }
        }
        // Mixin instance properties once, if they exist.
        if (this.__instanceProperties) {
            // Use forEach so this works even if for/of loops are compiled to for loops
            // expecting arrays
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.__instanceProperties.forEach((v, p) => (this[p] = v));
            this.__instanceProperties = undefined;
        }
        let shouldUpdate = false;
        const changedProperties = this._$changedProperties;
        try {
            shouldUpdate = this.shouldUpdate(changedProperties);
            if (shouldUpdate) {
                this.willUpdate(changedProperties);
                (_b = this.__controllers) === null || _b === void 0 ? void 0 : _b.forEach((c) => { var _a; return (_a = c.hostUpdate) === null || _a === void 0 ? void 0 : _a.call(c); });
                this.update(changedProperties);
            }
            else {
                this.__markUpdated();
            }
        }
        catch (e) {
            // Prevent `firstUpdated` and `updated` from running when there's an
            // update exception.
            shouldUpdate = false;
            // Ensure element can accept additional updates after an exception.
            this.__markUpdated();
            throw e;
        }
        // The update is no longer considered pending and further updates are now allowed.
        if (shouldUpdate) {
            this._$didUpdate(changedProperties);
        }
    }
    /**
     * Invoked before `update()` to compute values needed during the update.
     *
     * Implement `willUpdate` to compute property values that depend on other
     * properties and are used in the rest of the update process.
     *
     * ```ts
     * willUpdate(changedProperties) {
     *   // only need to check changed properties for an expensive computation.
     *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {
     *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);
     *   }
     * }
     *
     * render() {
     *   return html`SHA: ${this.sha}`;
     * }
     * ```
     *
     * @category updates
     */
    willUpdate(_changedProperties) { }
    // Note, this is an override point for polyfill-support.
    // @internal
    _$didUpdate(changedProperties) {
        var _a;
        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostUpdated) === null || _a === void 0 ? void 0 : _a.call(c); });
        if (!this.hasUpdated) {
            this.hasUpdated = true;
            this.firstUpdated(changedProperties);
        }
        this.updated(changedProperties);
        if (DEV_MODE &&
            this.isUpdatePending &&
            this.constructor.enabledWarnings.indexOf('change-in-update') >= 0) {
            issueWarning('change-in-update', `Element ${this.localName} scheduled an update ` +
                `(generally because a property was set) ` +
                `after an update completed, causing a new update to be scheduled. ` +
                `This is inefficient and should be avoided unless the next update ` +
                `can only be scheduled as a side effect of the previous update.`);
        }
    }
    __markUpdated() {
        this._$changedProperties = new Map();
        this.isUpdatePending = false;
    }
    /**
     * Returns a Promise that resolves when the element has completed updating.
     * The Promise value is a boolean that is `true` if the element completed the
     * update without triggering another update. The Promise result is `false` if
     * a property was set inside `updated()`. If the Promise is rejected, an
     * exception was thrown during the update.
     *
     * To await additional asynchronous work, override the `getUpdateComplete`
     * method. For example, it is sometimes useful to await a rendered element
     * before fulfilling this Promise. To do this, first await
     * `super.getUpdateComplete()`, then any subsequent state.
     *
     * @return A promise of a boolean that resolves to true if the update completed
     *     without triggering another update.
     * @category updates
     */
    get updateComplete() {
        return this.getUpdateComplete();
    }
    /**
     * Override point for the `updateComplete` promise.
     *
     * It is not safe to override the `updateComplete` getter directly due to a
     * limitation in TypeScript which means it is not possible to call a
     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
     * This method should be overridden instead. For example:
     *
     * ```ts
     * class MyElement extends LitElement {
     *   override async getUpdateComplete() {
     *     const result = await super.getUpdateComplete();
     *     await this._myChild.updateComplete;
     *     return result;
     *   }
     * }
     * ```
     *
     * @return A promise of a boolean that resolves to true if the update completed
     *     without triggering another update.
     * @category updates
     */
    getUpdateComplete() {
        return this.__updatePromise;
    }
    /**
     * Controls whether or not `update()` should be called when the element requests
     * an update. By default, this method always returns `true`, but this can be
     * customized to control when to update.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */
    shouldUpdate(_changedProperties) {
        return true;
    }
    /**
     * Updates the element. This method reflects property values to attributes.
     * It can be overridden to render and keep updated element DOM.
     * Setting properties inside this method will *not* trigger
     * another update.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */
    update(_changedProperties) {
        if (this.__reflectingProperties !== undefined) {
            // Use forEach so this works even if for/of loops are compiled to for
            // loops expecting arrays
            this.__reflectingProperties.forEach((v, k) => this.__propertyToAttribute(k, this[k], v));
            this.__reflectingProperties = undefined;
        }
        this.__markUpdated();
    }
    /**
     * Invoked whenever the element is updated. Implement to perform
     * post-updating tasks via DOM APIs, for example, focusing an element.
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */
    updated(_changedProperties) { }
    /**
     * Invoked when the element is first updated. Implement to perform one time
     * work on the element after update.
     *
     * ```ts
     * firstUpdated() {
     *   this.renderRoot.getElementById('my-text-area').focus();
     * }
     * ```
     *
     * Setting properties inside this method will trigger the element to update
     * again after this update cycle completes.
     *
     * @param _changedProperties Map of changed properties with old values
     * @category updates
     */
    firstUpdated(_changedProperties) { }
}
_e = finalized;
/**
 * Marks class as having finished creating properties.
 */
ReactiveElement[_e] = true;
/**
 * Memoized list of all element properties, including any superclass properties.
 * Created lazily on user subclasses when finalizing the class.
 * @nocollapse
 * @category properties
 */
ReactiveElement.elementProperties = new Map();
/**
 * Memoized list of all element styles.
 * Created lazily on user subclasses when finalizing the class.
 * @nocollapse
 * @category styles
 */
ReactiveElement.elementStyles = [];
/**
 * Options used when calling `attachShadow`. Set this property to customize
 * the options for the shadowRoot; for example, to create a closed
 * shadowRoot: `{mode: 'closed'}`.
 *
 * Note, these options are used in `createRenderRoot`. If this method
 * is customized, options should be respected if possible.
 * @nocollapse
 * @category rendering
 */
ReactiveElement.shadowRootOptions = { mode: 'open' };
// Apply polyfills if available
polyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport({ ReactiveElement });
// Dev mode warnings...
if (DEV_MODE) {
    // Default warning set.
    ReactiveElement.enabledWarnings = ['change-in-update'];
    const ensureOwnWarnings = function (ctor) {
        if (!ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))) {
            ctor.enabledWarnings = ctor.enabledWarnings.slice();
        }
    };
    ReactiveElement.enableWarning = function (warning) {
        ensureOwnWarnings(this);
        if (this.enabledWarnings.indexOf(warning) < 0) {
            this.enabledWarnings.push(warning);
        }
    };
    ReactiveElement.disableWarning = function (warning) {
        ensureOwnWarnings(this);
        const i = this.enabledWarnings.indexOf(warning);
        if (i >= 0) {
            this.enabledWarnings.splice(i, 1);
        }
    };
}
// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for ReactiveElement usage.
((_d = global.reactiveElementVersions) !== null && _d !== void 0 ? _d : (global.reactiveElementVersions = [])).push('1.6.3');
if (DEV_MODE && global.reactiveElementVersions.length > 1) {
    issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` +
        `is not recommended.`);
}
//# sourceMappingURL=reactive-element.js.map

/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-state/index.js":
/*!**************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-state/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AppStateModel: () => (/* reexport safe */ _lib_AppStateModel_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   AppStateStore: () => (/* reexport safe */ _lib_AppStateStore_js__WEBPACK_IMPORTED_MODULE_1__["default"])
/* harmony export */ });
/* harmony import */ var _lib_AppStateModel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/AppStateModel.js */ "./public/node_modules/@ucd-lib/cork-app-state/lib/AppStateModel.js");
/* harmony import */ var _lib_AppStateStore_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/AppStateStore.js */ "./public/node_modules/@ucd-lib/cork-app-state/lib/AppStateStore.js");





/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-state/lib/AppStateModel.js":
/*!**************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-state/lib/AppStateModel.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ucd_lib_cork_app_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ucd-lib/cork-app-utils */ "./public/node_modules/@ucd-lib/cork-app-utils/index.js");
/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! query-string */ "./public/node_modules/query-string/index.js");
/* harmony import */ var _globalOnClick_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./globalOnClick.js */ "./public/node_modules/@ucd-lib/cork-app-state/lib/globalOnClick.js");





/**
 * Controller for handling various states of the application.
 * This includes current catalog and page and if we are editing a mark.
 */
class AppStateModel extends _ucd_lib_cork_app_utils__WEBPACK_IMPORTED_MODULE_0__.BaseModel {

  constructor() {
    super();
    this.register('AppStateModel');
  }

  init(appRoutes) {
    // inspect global dom clicks and hijack if it's a link to a know app path
    (0,_globalOnClick_js__WEBPACK_IMPORTED_MODULE_2__["default"])({
      appRoutes,
      callback : e => {
        // the iron-location element sets history state with no info. lame.
        // let's override that.
        this._replaceHistoryState();
        this._onLocationChange()
      }
    });

    this._setLocationObject();
    let location = this._getFullPath();
    window.history.replaceState({location: this.location}, null, location);
    this._onLocationChange();

    window.addEventListener('popstate', e => {
      if( !e.state ) return;
      this.location = e.state.location;
      this._onLocationChange()
    });
  }

  /**
   * @method _replaceHistoryState
   * @description set the location object and string using replaceState.  This should be called
   * after iron-location's location-changed event which doesn't set the location object information.
   */
  _replaceHistoryState(fullpath) {
    this._setLocationObject(fullpath);
    window.history.replaceState({location: this.location}, null, this.location.fullpath);
  }

  /**
   * @method setLocation
   * @description manually set the url location.  This should be used instead of
   * window.location.href = '/foo'.  This method passes location to the global
   * app-route element which handles updating the window.history state and fires
   * the AppStateStore state-update event.
   *
   * @param {String} location new url location
   */
  setLocation(location) {
    if( typeof location === 'object' ) {
      let p = location.path;
      if( location.qs ) {
        let tmp = [];
        for( let key in location.qs ) {
          tmp.push(encodeURIComponent(key)+'='+encodeURIComponent(location.qs[key]));
        }
        p += '?'+tmp.join('&');
      }
      if( location.hash ) p += '#'+location.hash;
      location = p;
    }

    if( window.history.state &&
        window.history.state.location &&
        window.history.state.location.fullpath === location )  {
      return;
    }

    // set state without hash info, this will update window location object,
    // then we parse, then we replace state
    window.history.pushState({}, null, location);

    // finalize state object, send update event
    this._replaceHistoryState(location);

    this._onLocationChange();
  }

  _setLocationObject(fullpath) {
    let query = query_string__WEBPACK_IMPORTED_MODULE_1__.parse(window.location.search);
    query = Object.keys(query).length ? query : {};

    this.location = {
      fullpath : fullpath || this._getFullPath(),
      pathname : window.location.pathname.replace(/^\/+/, '/'),
      path : window.location.pathname.replace(/(^\/+|\/+$)/g, '').split('/'),
      query,
      hash : window.location.hash.replace(/^#/, '')
    };
    return location;
  }

  _getFullPath() {
    return window.location.href.replace(window.location.origin, '').replace(/^\/+/, '/');
  }

  _onLocationChange() {
    this.set({
      location : this.location
    });
  }

  /**
   * Get the current redux appState
   * @returns {Object} appState
   */
  async get() {
    return this.store.data;
  }

  /**
   * Update the app state
   * @returns {Object} update - keys to be updated
   */
  set(update) {
    this.store.set(update);
    return this.get();
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AppStateModel);


/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-state/lib/AppStateStore.js":
/*!**************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-state/lib/AppStateStore.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ucd_lib_cork_app_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ucd-lib/cork-app-utils */ "./public/node_modules/@ucd-lib/cork-app-utils/index.js");


class AppStateStore extends _ucd_lib_cork_app_utils__WEBPACK_IMPORTED_MODULE_0__.BaseStore {

  constructor() {
    super();

    this.data = {
      location : {}
    }

    this.events = {
      APP_STATE_UPDATE : 'app-state-update'
    }
  }

  set(state) {
    if( !this.stateChanged(this.data, state) ) return;
    this.data = Object.assign({}, this.data, state);
    this.emit(this.events.APP_STATE_UPDATE, this.data);
  }

  get() {
    return this.data;
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AppStateStore);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-state/lib/globalOnClick.js":
/*!**************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-state/lib/globalOnClick.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Port of the old Polymer iron-location element logic.  Just the bits we need.
 */

let _urlSpaceRegExp;
let _callback;
let appRoutes;
let _location = window.location;

function init(opts) {
  _urlSpaceRegExp = _makeRegex(opts.appRoutes);
  appRoutes = opts.appRoutes;
  _callback = opts.callback;
  if( opts.debug ) {
    _initDebugging();
  }

  document.addEventListener('click', _globalOnClick);
}

/**
 * A necessary evil so that links work as expected. Does its best to
 * bail out early if possible.
 *
 * @param {MouseEvent} event .
 */
function _globalOnClick(event) {
  // If another event handler has stopped this event then there's nothing
  // for us to do. This can happen e.g. when there are multiple
  // iron-location elements in a page.
  if (event.defaultPrevented) {
    return;
  }

  var href = _getSameOriginLinkHref(event);

  if (!href) {
    return;
  }

  event.preventDefault();

  // If the navigation is to the current page we shouldn't add a history
  // entry or fire a change event.
  if (href === _location.href) {
    return;
  }

  window.history.pushState({}, '', href);
  // this.fire('location-changed', {}, {node: window});
  _callback();
}

/**
 * Returns the absolute URL of the link (if any) that this click event
 * is clicking on, if we can and should override the resulting full
 * page navigation. Returns null otherwise.
 *
 * @param {MouseEvent} event .
 * @return {string?} .
 */
function _getSameOriginLinkHref(event) {
  // We only care about left-clicks.
  if (event.button !== 0) {
    return null;
  }

  // We don't want modified clicks, where the intent is to open the page
  // in a new tab.
  if (event.metaKey || event.ctrlKey) {
    return null;
  }

  // var eventPath = dom(event).path;
  var eventPath = event.composedPath();
  var anchor = null;

  for (var i = 0; i < eventPath.length; i++) {
    var element = eventPath[i];

    if (element.tagName === 'A' && element.href) {
      anchor = element;
      break;
    }
  }

  // If there's no link there's nothing to do.
  if (!anchor) {
    return null;
  }

  // Target blank is a new tab, don't intercept.
  if (anchor.target === '_blank') {
    return null;
  }

  // If the link is for an existing parent frame, don't intercept.
  if ((anchor.target === '_top' || anchor.target === '_parent') &&
      window.top !== window) {
    return null;
  }

  // If the link is a download, don't intercept.
  if (anchor.download) {
    return null;
  }

  var href = anchor.href;

  // It only makes sense for us to intercept same-origin navigations.
  // pushState/replaceState don't work with cross-origin links.
  var url;

  if (document.baseURI != null) {
    url = new URL(href, /** @type {string} */ (document.baseURI));
  } else {
    url = new URL(href);
  }

  var origin;

  // IE Polyfill
  if (_location.origin) {
    origin = _location.origin;
  } else {
    origin = _location.protocol + '//' + _location.host;
  }

  var urlOrigin;

  if (url.origin) {
    urlOrigin = url.origin;
  } else {
    // IE always adds port number on HTTP and HTTPS on <a>.host but not on
    // window.location.host
    var urlHost = url.host;
    var urlPort = url.port;
    var urlProtocol = url.protocol;
    var isExtraneousHTTPS = urlProtocol === 'https:' && urlPort === '443';
    var isExtraneousHTTP = urlProtocol === 'http:' && urlPort === '80';

    if (isExtraneousHTTPS || isExtraneousHTTP) {
      urlHost = url.hostname;
    }
    urlOrigin = urlProtocol + '//' + urlHost;
  }

  if (urlOrigin !== origin) {
    return null;
  }

  var normalizedHref = url.pathname + url.search + url.hash;

  // pathname should start with '/', but may not if `new URL` is not supported
  if (normalizedHref[0] !== '/') {
    normalizedHref = '/' + normalizedHref;
  }

  // If we've been configured not to handle this url... don't handle it!
  if (_urlSpaceRegExp && !_urlSpaceRegExp.test(normalizedHref)) {
    return null;
  }

  // Need to use a full URL in case the containing page has a base URI.
  var fullNormalizedHref = new URL(normalizedHref, _location.href).href;
  return fullNormalizedHref;
}

function _makeRegex(appRoutes) {
  let arr = appRoutes.map(route => '/'+route+'(\\?|#|/|$).*')
  arr.push('/(\\?|#)+.*');
  arr.push('/');

  let re = '^('+ arr.join('|') + ')$';
  re = new RegExp(re, 'i');
  return re;
}

function _initDebugging() {
  let pushState = history.pushState;
  let replaceState = history.replaceState;
  
  history.pushState = function(state) {
    let event = new CustomEvent('history-push-state', {detail: state});
    window.dispatchEvent(event);
    return pushState.apply(history, arguments);
  };

  history.replaceState = function(state) {
    let event = new CustomEvent('history-replace-state', {detail: state});
    window.dispatchEvent(event);
    return replaceState.apply(history, arguments);
  };

  window.addEventListener('history-push-state', e => console.log('history-push-state', e.detail));
  window.addEventListener('history-replace-state', e => console.log('history-replace-state', e.detail));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-utils/index.js":
/*!**************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-utils/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseMixin: () => (/* reexport safe */ _lib_BaseMixin_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   BaseModel: () => (/* reexport safe */ _lib_BaseModel_js__WEBPACK_IMPORTED_MODULE_0__.BaseModel),
/* harmony export */   BaseService: () => (/* reexport safe */ _lib_BaseService_js__WEBPACK_IMPORTED_MODULE_2__.BaseService),
/* harmony export */   BaseStore: () => (/* reexport safe */ _lib_BaseStore_js__WEBPACK_IMPORTED_MODULE_1__.BaseStore),
/* harmony export */   EventBus: () => (/* reexport safe */ _lib_EventBus_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   LightDom: () => (/* reexport safe */ _lib_LightDom_js__WEBPACK_IMPORTED_MODULE_9__["default"]),
/* harmony export */   LitCorkUtils: () => (/* reexport safe */ _lib_LitCorkUtils_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   Mixin: () => (/* reexport safe */ _lib_Mixin_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   Registry: () => (/* reexport safe */ _lib_Registry_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   fetch: () => (/* reexport default export from named module */ isomorphic_fetch__WEBPACK_IMPORTED_MODULE_8__)
/* harmony export */ });
/* harmony import */ var _lib_BaseModel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/BaseModel.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/BaseModel.js");
/* harmony import */ var _lib_BaseStore_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/BaseStore.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/BaseStore.js");
/* harmony import */ var _lib_BaseService_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/BaseService.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/BaseService.js");
/* harmony import */ var _lib_BaseMixin_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/BaseMixin.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/BaseMixin.js");
/* harmony import */ var _lib_Mixin_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/Mixin.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/Mixin.js");
/* harmony import */ var _lib_EventBus_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/EventBus.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/EventBus.js");
/* harmony import */ var _lib_Registry_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/Registry.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/Registry.js");
/* harmony import */ var _lib_LitCorkUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/LitCorkUtils.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/LitCorkUtils.js");
/* harmony import */ var isomorphic_fetch__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! isomorphic-fetch */ "./public/node_modules/isomorphic-fetch/fetch-npm-browserify.js");
/* harmony import */ var _lib_LightDom_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/LightDom.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/LightDom.js");













/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-utils/lib/BaseMixin.js":
/*!**********************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-utils/lib/BaseMixin.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
class BaseMixin {
  ready() {
    // set listening to true
    this.listening = true;
  }
}

// Set global if available
if( typeof window !== 'undefined' ) { 
  window.BaseMixin = BaseMixin;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BaseMixin);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-utils/lib/BaseModel.js":
/*!**********************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-utils/lib/BaseModel.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseModel: () => (/* binding */ BaseModel)
/* harmony export */ });
/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventBus.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/EventBus.js");
/* harmony import */ var _Registry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Registry.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/Registry.js");



/**
 * @class BaseModel
 * 
 * @description This class should be extended by all app models.  This will allow models to
 * be registered with the global Registry.  Once registered; models can access other
 * models w/o worry of cyclical dependency issues, interface mixins can add models via model name
 * and automatically bind to events of interest.
 * 
 * If a model has a store, it should be set to the models this.store in the contructor.  This
 * allows teh EventInterface to automatically bind to both model and store events (most events
 * will be fired from the store on state update).
 * 
 * The other common pattern is to set this.service to the model service if one exists.
 * 
 * Example:
 * 
 * import MyStore from '../stores/MyStore';
 * import MyService from '../service/MyService';
 * 
 * class MyModel extends BaseModel {
 *  
 *   constructor() {
 *     super();
 *     this.store = MyStore;
 *     this.service = MyService;
 *   }
 * 
 *   async doCoolThings(args) {
 *     // some buisness logic here    
 *  
 *     // most services should return a promise so caller can handle success/promise
 *     // without having to watch for store state update events.
 *     return this.service.getCoolThing(args);
 *   }
 * }
 */
class BaseModel {

  /**
   * @property EventBus
   * @description get the EventBus object
   */
  get EventBus() {
    return _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"];
  }

  get Registry() {
    return _Registry_js__WEBPACK_IMPORTED_MODULE_1__["default"];
  }

  /**
   * @method register
   * 
   * @description Register a Model by name with the Registry.  Note, the name is required
   * to be compatible with IE.
   * @param {String} name Model name.  This name will be used by interfaces wishing to inject the model
   */
  register(name) {
    if( !name ) {
      console.warn('Name not passed to register().  This will fail in IE, cause, you know, IE.')
    }

    var className = name || this.__proto__.constructor.name;
    _Registry_js__WEBPACK_IMPORTED_MODULE_1__["default"].registerModel(className, this);
  }

  /**
   * @method _injectModel
   * @description Add model reference to this object.
   *
   * @param {String} names Model name to inject and bind to events 
   */
  inject(...names) {
    this.Registry.addInjectHandler(() => {
      names.forEach(name => {
        this[name] = _Registry_js__WEBPACK_IMPORTED_MODULE_1__["default"].getModel(name);
      });
    });
  }

  /**
   * @method emit
   * @description Send a event on the EventBus event bus.
   * 
   * @param {String} event event name
   * @param {Object} payload event payload
   */
  emit(event, payload) {
    // make events async
    setTimeout(() => {
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit(event, payload);
    }, 0);
  }
}



/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-utils/lib/BaseService.js":
/*!************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-utils/lib/BaseService.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseService: () => (/* binding */ BaseService)
/* harmony export */ });
/* harmony import */ var isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! isomorphic-fetch */ "./public/node_modules/isomorphic-fetch/fetch-npm-browserify.js");
// help: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch


/**
 * @class BaseService
 * @description Base class for services.  Adds promise based request with helpers for
 * checking the store to see if a object is already loaded.  Also has wrapper for checking
 * response for errors, rejecting promise if error condition is tripped.
 * 
 * Most methods making a request should return the promise so other Models/Elements can bind
 * to the handling of the promise
 * 
 * Example:
 * 
 * import MyStore from '../stores/MyStore';
 * 
 * class MyService extends BaseService {
 *  
 *   constructor() {
 *     super();
 *     this.store = MyStore;
 *   }
 * 
 *   async doCoolThing(id) {     
 *     return await this.request({
 *       request : {
 *         method : 'GET',
 *         uri    : '/some/api/get?id='+id
 *       },
 *       checkCached : () => this.store.data.byId[id],
 *       onLoading : (promise) => this.store.setCoolThingLoading(promise),
 *       onLoad : ({response, body}) => this.store.setCoolThingLoaded(body),
 *       onError : (err) => this.store.setCoolThingError(err)
 *     });
 *   }
 * 
 * }
 * 
 */
class BaseService {

  constructor() {
    this.rootUrl = '';
    if( typeof window !== 'undefined' ) {
      this.rootUrl = window.location.protocol+'//'+window.location.host;
    }

    this.ERROR_MESSAGES = {
      REQUEST : 'Request Error',
      STATUS_CODE : 'Invalid status code',
      JSON : 'Invalid JSON response',
      APPLICATION_ERROR : 'Application Error'
    }
  }

  /**
   * @method request
   * @description Help make service calls updating store w/ result.  All parameters are optional
   * but the request parameter.
   * 
   * @param {Object} options
   * @param {Object} options.url - request url
   * @param {Object} options.fetchOptions - fetch api options
   * @param {Object} options.qs - query string object to append to url
   * @param {Boolean} options.json - if posting json set true, will automatically stringify body and set correct content type
   * @param {Function} options.checkCached - return object to see if in loaded or loading (see BaseStore States)
   * @param {Function} options.store - Store class (options, will default to this.store)
   * @param {Function} options.onLoading - Store class method to call onLoad start
   * @param {Function} options.onError - Store class method to call onError
   * @param {Function} options.onLoad - Store class method to call onLoad
   * 
   * @returns {Promise}
   */
  async request(options) {
    // inject class store if none provided
    if( !options.store ) {
      if( this.store ) options.store = this.store;
      else return console.error(new Error('No store provided'));
    }

    // default to include all cookies
    if( !options.fetchOptions ) options.fetchOptions = {};
    if( !options.fetchOptions.credentials ) {
      options.fetchOptions.credentials = 'include';
    }

    // if json flag, stringify body, set content type
    if( options.json && 
        options.fetchOptions &&
        options.fetchOptions.body &&
        typeof options.fetchOptions.body === 'object') {
  
      options.fetchOptions.body = JSON.stringify(options.fetchOptions.body);
      if( !options.fetchOptions.headers ) options.fetchOptions.headers = {};
      options.fetchOptions.headers['Content-Type'] = 'application/json'
    }

    // append query string url
    if( options.qs ) {
      let qs = [];
      for( var key in options.qs) {
        qs.push(`${key}=${encodeURIComponent(options.qs[key])}`);
      }
      options.url += '?'+qs.join('&');
    }

    if( options.checkCached  ) {
      // return object if loaded
      var cachedObject = options.checkCached();

      if( this.isLoaded(cachedObject) ) {
        return cachedObject;
      
      // return stored promise if loading
      } else if( this.isLoading(cachedObject) ) {
        if( !cachedObject.request ) {
          throw new Error('checkCached set but no request object found', cachedObject)
        }
        return cachedObject.request;
      }
    }

    let promise = this._request(options);
    if( options.onLoading ) options.onLoading(promise);

    return await promise;
  }

  _request(options) {
    if( !options.fetchOptions ) {
      options.fetchOptions = {};
    }

    return new Promise(async (resolve, reject) => {
      var response = null;

      try {
        response = await isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0__(options.url, options.fetchOptions)
      } catch(e) {
        return this._handleError(
          options, reject,
          { 
            error: true, 
            details: e, 
            response,
            message: this.ERROR_MESSAGES.REQUEST
          }
        );
      }

      if( response.status < 200 || response.status > 299 ) {
        return this._handleError(
          options, reject,
          { 
            error: true, 
            response: response, 
            message: this.ERROR_MESSAGES.STATUS_CODE
          }
        );
      }

      if( response.headers.has('Content-Type') && 
        response.headers.get('Content-Type').match(/application\/json/i) ) {
        
        var body = null;
        try {
          body = await response.json();
        } catch(e) {
          return this._handleError(
            options, reject,
            { 
              error: true, 
              details: e,
              response: response,
              message: this.ERROR_MESSAGES.JSON
            }
          );
        }

        // you can get a null body from response.json();
        if( body === null ) {
          body = {
            error: true,
            message: 'null body response from service'
          };
        }

        if( body.error ) {
          return this._handleError(
            options, reject,
            { 
              error: true, 
              details: body,
              response : response,
              message: this.ERROR_MESSAGES.APPLICATION_ERROR
            }
          );
        }
      } else {
        body = await response.text();
      }

      if( options.onLoad ) options.onLoad({response, body});
      resolve({response, body});
    });
  }

  async _handleError(options, reject, error) {
    if( error.response && !error.payload ) {
      if( error.response.headers.has('Content-Type') && 
        error.response.headers.get('Content-Type').match(/application\/json/i) ) {
        try {
          error.payload = await error.response.json();
        } catch(e) {
          error.payload = {};
        }
      } else {
        error.payload = await error.response.text();
      }
    }

    if( options.onError ) options.onError(error);
    reject(error);
  }

  /**
   * Checks if object exists and has state equal to the stores
   * loaded state
   */
  isLoaded(object) {
    if( !this.store ) {
      return console.warn('Checking LOADED state but no store set for service');
    }

    if( object && object.state === this.store.STATE.LOADED ) {
      return true;
    }
    return false;
  }

  /**
   * Checks if object exists and has state equal to the stores
   * loading state
   */
  isLoading(object) {
    if( !this.store ) {
      return console.warn('Checking LOADED state but no store set for service');
    }
    
    if( object && object.state === this.store.STATE.LOADING ) {
      return true;
    }
    return false;
  }

}



/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-utils/lib/BaseStore.js":
/*!**********************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-utils/lib/BaseStore.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseStore: () => (/* binding */ BaseStore)
/* harmony export */ });
/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventBus.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/EventBus.js");
/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fast-deep-equal */ "./public/node_modules/fast-deep-equal/index.js");



/**
 * @class BaseStore
 * @description All stores should extend this class.  It really provides two simple 
 * things.  First a emit() method for firing events that are async.  Second, it
 * provides standard STATE names for data payload wrappers.  Store data in similar way
 * really helps the reactive side of the app.
 * 
 * Example
 * 
 * class MyStore extends BaseStore {
 * 
 *   constructor() {
 *     super();
 *     
 *     this.data = {
 *       aSingleThing : {
 *         state : this.STATE.INIT
 *       }
 *     }
 *     
 *     // these events will be automatically bound to elements
 *     this.events = {
 *       THING_UPDATED : 'thing-updated'
 *     }
 *   }
 *   
 *   // promise is the request promise
 *   setThingLoading(promise) {
 *      this.updateThing({state: this.STATE.LOADING, request: promise});
 *   }
 * 
 *   setThingLoaded(newData) {
 *      this.updateThing({state: this.STATE.LOADED, payload: newData});
 *   }
 * 
 *   setThingError(err) {
 *      this.updateThing({state: this.STATE.ERROR, error: err});
 *   }
 *   
 *   // actually set data state and fire event
 *   updateThing(data) {
 *     // new state is same as old state, just quit out
 *     if( !this.stateChanged(this.data.aSingleThing, data) ) return;
 * 
 *     this.data.aSingleThing = data;
 *     this.emit(this.events.THING_UPDATED, this.data.aSingleThing);
 *   }
 * 
 * }
 * 
 */
class BaseStore {

  constructor() {
    // general states that should be used if possible
    this.STATE = {
      INIT         : 'init',
      LOADING      : 'loading',
      LOADED       : 'loaded',
      ERROR        : 'error',
      SAVING       : 'saving',
      SAVE_ERROR   : 'save-error',
      SAVE_SUCCESS : 'save-success',
      DELETING     : 'deleting',
      DELETE_ERROR : 'delete-error',
      DELETED      : 'deleted'
    }
  }

  get EventBus() {
    return _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"];
  }

  /**
   * @method emit
   * @description Fire a async event on EventBus event bus.
   * 
   * @param {String} event event name
   * @param {Object} payload event payload
   */
  emit(event, payload) {
    // make events async
    setTimeout(() => {
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit(event, payload);
    }, 0);
  }

  /**
   * @method stateChanged
   * @description given two state objects, check there is a difference
   * between them.  This is a deep check, not a direct object comparison.
   * 
   * @param {Object} currentState objects currently store state
   * @param {Object} newState new state for object
   * 
   * @returns {Boolean}
   */
  stateChanged(currentState, newState) {
    if( !currentState && newState ) return true;
    if( currentState && !newState ) return true;
    if( !currentState && !newState ) return false;
    if( currentState.state !== newState.state ) return true;
    return !fast_deep_equal__WEBPACK_IMPORTED_MODULE_1__(currentState, newState);
  }
}



/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-utils/lib/EventBus.js":
/*!*********************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-utils/lib/EventBus.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ "../node_modules/events/events.js");


/**
 * @class EventBus
 * 
 * @description This is the global object that acts as a event bus for all models and 
 * elements, allowing stores to notify elements of application state updates.  Elements
 * and models can use this as a open communication platform as well.  
 */
class EventBus extends events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {

  constructor() {
    super();

    let maxListeners = 10000;
    if( typeof window !== 'undefined' ) {
      if( window.EVENT_BUS_MAX_LISTENERS ) {
        maxListeners = window.EVENT_BUS_MAX_LISTENERS;
      }
    }
    
    // setup event bus listeners.
    this.setMaxListeners(maxListeners);
  }
}

const eventBus = new EventBus();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (eventBus);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-utils/lib/LightDom.js":
/*!*********************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-utils/lib/LightDom.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const LightDom = subclass =>
  class LightDomMixin extends subclass {

  _attachDom(dom) {
    if( window.ShadyDOM && window.ShadyDOM.inUse ) {
      return super._attachDom(dom);
    }
    
    // promote element styles to head
    let styles = dom.querySelectorAll('style');
    for( var i = 0; i < styles.length; i++ ) {
      styles[i].parentNode.removeChild(styles[i]);
      if( this._stylesInserted ) continue;
      styles[i].setAttribute('id', this.nodeName.toLowerCase()+'-styles');
      document.head.appendChild(styles[i]);
    }
    // append dom template to local dom (instead of a shadowroot)
    this.appendChild(dom);
    return dom;
  }

  querySelector(selector) {
    if( this.shadowRoot ) {
      return this.shadowRoot.querySelector(selector);
    }
    return super.querySelector(selector);
  }

  querySelectorAll(selector) {
    if( this.shadowRoot ) {
      return this.shadowRoot.querySelectorAll(selector);
    }
    return super.querySelectorAll(selector);
  }

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LightDom);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-utils/lib/LitCorkUtils.js":
/*!*************************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-utils/lib/LitCorkUtils.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _EventBus_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EventBus.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/EventBus.js");
/* harmony import */ var _Registry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Registry.js */ "./public/node_modules/@ucd-lib/cork-app-utils/lib/Registry.js");



/**
 * @mixin LitCorkUtils
 * @description This is the base mixin to use for any element that wants to 
 * bind to a model, it's events and the models store events.  All interface
 * mixins that wrap models will assume this class has been mixed into the 
 * element class using:
 * 
 * class MyElement extends Mixin(LitElement)
 *                 .with(LitCorkUtils) {
 *  // do stuff
 * }
 * 
 */
const LitCorkUtils = subclass =>
  class EventMixin extends subclass {

    static get properties() {
      return {
        /**
         * @property listening
         * @description The listening flag toggles if this element to fire
         * off event listeners.  When false, no event handling methods 
         * will fire.  Set to true (default) when you want this element to react 
         * to events
         * 
         * This flag wires in really well with iron-pages.  Allowing you
         * to toggle the attribute.  Just set selected-attribute="listening".
         */
        listening : {
          type : Boolean
        }
      }
    }
    
    /**
     * @property bind
     * @description Merge value with current bind object.  The bind
     * object is a set of key/value pairs where the key is the event
     * to listen for and the value is the element method name to call
     * when the event is triggered.
     */
    set bind(value) {
      this._bind = Object.assign(this.bind, value)
    }

    get bind() {
      if( !this._bind ) this._bind = {};
      return this._bind;
    }
    
    constructor() {
      super();

      // initialize handlers
      this.bind = {};
      
      // actual function called by handler
      this._eb_handlers = {};

      // have we initialized the handlers?
      this._eb_handlersSet = false;
      
      // do we want to detach listeners when element is detached
      // (prevent memory leaks)
      this._eb_unregisterOnDetach = true;

      this._debounce_handlers = {};

      this.listening = true;
    }

    /**
     * @method createRenderRoot
     * @description be default we are going to use light DOM
     * 
     * TODO: work on this
     */
    // createRenderRoot() {
    //   if( this.useShadowDom ) {
    //     return super.createRenderRoot();
    //   }
    //   return this;
    // }
    
    connectedCallback() {
      super.connectedCallback();
      this._eb_init();
    }
    
    /**
     * @method _eb_init
     * @private
     * 
     * @description loops they key/value pairs in this.bind and sets
     * the event listener and method to fire using this._eb_init_fn().
     * If a method does not exist on this element and console warning 
     * is fired.
     */
    _eb_init() {
      if( this._eb_handlersSet ) return;
      this._eb_handlersSet = true;

      if( this._debugLitCorkUtils ) {
        console.log(this.nodeName, 'ready and connected to DOM, attaching event listeners', this.bind);
      }
      
      for( var key in this.bind ) {
        if( !this[this.bind[key]] ) {
          console.warn(`${this.nodeName} could not bind event ${key} to ${this.bind[key]}`);
          continue;
        }
        this._eb_init_fn(key);
      }
    }
    
    /**
     * @method _eb_init_fn
     * @private
     * @description Given a this.bind key (event name), bind to 
     * the event bus this elements method.
     * 
     * @param {String} eventName event name 
     */
    _eb_init_fn(eventName) {
      this[this.bind[eventName]] = this[this.bind[eventName]].bind(this);

      this._eb_handlers[eventName] = (...args) => {
        // if we are not listening, quit
        if( !this.listening ) {
          if( this._debugLitCorkUtils ) {
            console.warn(this.nodeName, 'ignoring', eventName, 'event, element not listening');
          }
          return;
        }

        if( this._debugLitCorkUtils ) {
          console.log(this.nodeName, 'received event', eventName, ', triggering function:', this.bind[eventName]);
        }
        this[this.bind[eventName]].apply(this, args);
      }

      // actually wire up event 
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].on(eventName, this._eb_handlers[eventName]);
    }
    
    /**
     * @method
     * @description when this element is disconnected from the DOM,
     * remove the event listener to prevent memory leaks.
     */
    disconnectedCallback() {
      super.disconnectedCallback();

      if( this._debugLitCorkUtils ) {
        console.log(this.nodeName, 'disconnected from DOM, removing event listeners');
      }
      
      if( !this._eb_unregisterOnDetach ) return;
      if( !this._eb_handlersSet ) return;

      this._eb_handlersSet = false;
      
      for( var key in this.bind ) {
        if( !this[this.bind[key]] ) continue;
        
        // do a little verification that listener was actually detached
        let count = _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].listenerCount(key);

        _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].removeListener(key, this._eb_handlers[key]);

        if( _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].listenerCount(key) !== count-1 ) {
          console.warn(this.nodeName, 'On element detach, failed to remove event listener for: ', key);
        }

        if( this._debugLitCorkUtils ) {
          console.log(this.nodeName, 'removing event listener for:', key);
        }
      }
    }
    
    /**
     * @property EventBus
     * @description return reference to the global event bus.
     * Proly shouldn't really need to access this, but here just in case.
     */
    EventBus() {
      return _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"];
    }
    
    /**
     * @method _injectModel
     * @description Add model reference to this element and register the
     * Models and Model Stores events for any method that matches the event name.
     * 
     * This should be called by mixin interface classes to inject their parent Model
     * into the element for access to model methods.  The model name should be the
     * same name the model used to register itself with the Registry.  This name 
     * will also be used to set a reference on the element.
     * 
     * Example: this._injectModel('MyModel') will set this.MyModel.
     * 
     * Events will be automatically wired up that have associated method handers.  The
     * method name should be called as follows:
     * 
     * Assuming a event name of: my-cool-event
     * 
     * To listen to my-cool-event you should define a method on this element called:
     * _onMyCoolEvent(e) {
     *   // do stuff
     * }
     * 
     * Note, the above method will only fire when this.listening = true.
     * 
     * @param {String} names Model name to inject and bind to events 
     */
    _injectModel(...names) {
      names.forEach(name => {
        if( typeof name === 'string' ) this._injectModelStr(name);
        else this._bindModelObj(name);
      });
    }

    _injectModelStr(name) {
      this[name] = _Registry_js__WEBPACK_IMPORTED_MODULE_1__["default"].getModel(name);
      this._bindModelObj(this[name]);
    }

    _bindModelObj(model) {
      // wire up any events from injected model
      if( model.events ) {
        this._registerModelEvents(model.events);
      }

      // wire up any events from injected models store
      if( model.store && model.store.events ) {
        this._registerModelEvents(model.store.events);
      }
    }
    
    /**
     * @method _registerModelEvents
     * @private
     * @description called by _injectModel.  Adds event names to this.bind for any
     * event that has a associated method defined in the class.
     * 
     * @param {Object} events the key/value hash of events defined by a Model 
     * or a store
     */
    _registerModelEvents(events) {
      for( var key in events ) {
        var methodName = this._getMethodNameFromEvent(events[key]);
        
        // class did not define and event handler
        if( !this[methodName] ) {
          if( this._debugLitCorkUtils ) {
            console.log(this.nodeName, 'auto-bind:', methodName+' -> '+events[key], false);
          }
          continue;
        }

        if( this._debugLitCorkUtils ) {
          console.log(this.nodeName, 'auto-bind:', methodName+' -> '+events[key], true);
        }
        this.bind[events[key]] = methodName;
      }
    }
    
    /**
     * @method _getMethodNameFromEvent
     * @private
     * @description given a event name, ex: 'my-cool-event' return the method
     * name that needs to exist to register the event handler, ex: _onMyCoolEvent.
     * 
     * @param {String} eventName event name
     */
    _getMethodNameFromEvent(eventName) {
      return '_on' + eventName
                      .split('-')
                      .map((part) => {
                        return part.charAt(0).toUpperCase() + part.slice(1)
                      })
                      .join('');
    
    }
    
    /**
     * @method emit
     * @description Fire a custom event on the event bus.
     * 
     * @param {String} event name of event to fire
     * @param {Object} payload payload of event
     */
    emit(event, payload) {
      _EventBus_js__WEBPACK_IMPORTED_MODULE_0__["default"].emit(event, payload);
    }
    
    /**
     * @method fire
     * @description Adding polymer 1.0 helper back in.  Fire a custom 
     * dom event.
     * 
     * @param {String} event name of event to fire
     * @param {Object} payload payload of event
     */
    fire(event, payload = {}) {
      this.dispatchEvent(
        new CustomEvent(
          event, 
          {
            detail: payload,
            bubbles: true, 
            composed: true
          }
        )
      );
    }

    updated(changedProperties) {
      if( changedProperties.has('listening') ) this._onListenUpdate();
      super.updated();
    }
    
    /**
     * @method _onListenUpdate
     * @description fires when element is either activated and listening to events or
     * deactivated and no longer listening to events.
     * 
     * Default functionality is to do nothing.
     */
    _onListenUpdate() {
      // implement me
    }
    
  }

if( typeof window !== 'undefined' ) {
  window.LitCorkUtils = LitCorkUtils;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LitCorkUtils);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-utils/lib/Mixin.js":
/*!******************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-utils/lib/Mixin.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
 /**
  * From:
  * https://stackoverflow.com/questions/41839198/applying-behaviors-with-js-mixins-in-polymer-2
  * */
class MixinBuilder {  
  constructor(superclass) {
    this.superclass = superclass;
  }
  with(...mixins) { 
    return mixins.reduce((c, mixin) => mixin(c), this.superclass);
  }
}
const Mixin = (superclass) => new MixinBuilder(superclass);

// Set global if available
if( typeof window !== 'undefined' ) { 
  window.Mixin = Mixin;
}
  
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Mixin);

/***/ }),

/***/ "./public/node_modules/@ucd-lib/cork-app-utils/lib/Registry.js":
/*!*********************************************************************!*\
  !*** ./public/node_modules/@ucd-lib/cork-app-utils/lib/Registry.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @class Registry
 * 
 * @description The Registry stores references to the application Models.
 */
class Registry {

  constructor() {
    this.models = {};
    this.onLoadHandlers = [];
    this.injectHandlers = [];
    this.isReady = false;
  }

  /**
   * @method addLoadHandler
   * @description register a handler for when all models are loaded
   * 
   * @param {Function} handler 
   */
  addLoadHandler(handler) {
    if( this.isReady === true ) {
      return handler();
    }
    this.onLoadHandlers.push(handler);
  }

  /**
   * @method addInjectHandler
   * @description register a handler for injecting model
   * 
   * @param {Function} handler 
   */
  addInjectHandler(handler) {
    if( this.isReady === true ) {
      throw new Error('addInjectHandler needs to be called before ready()');
    }
    this.injectHandlers.push(handler);
  }

  /**
   * @method registerModel
   * @description Register a model.  This is called from the BaseModel classes register() method.
   * 
   * @param {String} name model name
   * @param {Object} model the model object to register
   */
  registerModel(name, model) {
    if( this.models[name] ) {
      throw new Error(`A model has already been registered with name: ${name}`);
    }

    this.models[name] = model;
  }

  /**
   * @method getModel
   * @description Get a globally registered model.  Normally called by a elements interface mixin.
   * Sometimes called by another model to avoid cyclical depenency issues.
   * 
   * Throws error if model does not exist
   * 
   * @param {String} name model name to get
   * @returns {Object} model object
   */
  getModel(name) {
    if( !this.models[name] ) {
      throw new Error(`No model has been registered with name: ${name}`);
    }

    return this.models[name];
  }

  /**
   * @method ready
   * @description call this function after you have imported all models. 
   * Will allow other models to inject siblings
   */
  ready() {
    for( let handler of this.injectHandlers ) {
      handler(this);
    }

    this.isReady = true;
    for( let handler of this.onLoadHandlers ) {
      handler(this);
    }
  }
}

const registery = new Registry();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (registery);

/***/ }),

/***/ "./public/node_modules/lit-element/development/lit-element.js":
/*!********************************************************************!*\
  !*** ./public/node_modules/lit-element/development/lit-element.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSResult: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.CSSResult),
/* harmony export */   LitElement: () => (/* binding */ LitElement),
/* harmony export */   ReactiveElement: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement),
/* harmony export */   UpdatingElement: () => (/* binding */ UpdatingElement),
/* harmony export */   _$LE: () => (/* binding */ _$LE),
/* harmony export */   _$LH: () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__._$LH),
/* harmony export */   adoptStyles: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.adoptStyles),
/* harmony export */   css: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.css),
/* harmony export */   defaultConverter: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.defaultConverter),
/* harmony export */   getCompatibleStyle: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.getCompatibleStyle),
/* harmony export */   html: () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.html),
/* harmony export */   noChange: () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.noChange),
/* harmony export */   notEqual: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.notEqual),
/* harmony export */   nothing: () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.nothing),
/* harmony export */   render: () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.render),
/* harmony export */   supportsAdoptingStyleSheets: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.supportsAdoptingStyleSheets),
/* harmony export */   svg: () => (/* reexport safe */ lit_html__WEBPACK_IMPORTED_MODULE_1__.svg),
/* harmony export */   unsafeCSS: () => (/* reexport safe */ _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.unsafeCSS)
/* harmony export */ });
/* harmony import */ var _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lit/reactive-element */ "./public/node_modules/@lit/reactive-element/development/reactive-element.js");
/* harmony import */ var lit_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit-html */ "./public/node_modules/lit-html/development/lit-html.js");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var _a, _b, _c;
/**
 * The main LitElement module, which defines the {@linkcode LitElement} base
 * class and related APIs.
 *
 *  LitElement components can define a template and a set of observed
 * properties. Changing an observed property triggers a re-render of the
 * element.
 *
 *  Import {@linkcode LitElement} and {@linkcode html} from this module to
 * create a component:
 *
 *  ```js
 * import {LitElement, html} from 'lit-element';
 *
 * class MyElement extends LitElement {
 *
 *   // Declare observed properties
 *   static get properties() {
 *     return {
 *       adjective: {}
 *     }
 *   }
 *
 *   constructor() {
 *     this.adjective = 'awesome';
 *   }
 *
 *   // Define the element's template
 *   render() {
 *     return html`<p>your ${adjective} template here</p>`;
 *   }
 * }
 *
 * customElements.define('my-element', MyElement);
 * ```
 *
 * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html
 * templating. The `ReactiveElement` class is provided for users that want to
 * build their own custom element base classes that don't use lit-html.
 *
 * @packageDocumentation
 */




// For backwards compatibility export ReactiveElement as UpdatingElement. Note,
// IE transpilation requires exporting like this.
const UpdatingElement = _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement;
const DEV_MODE = true;
let issueWarning;
if (DEV_MODE) {
    // Ensure warnings are issued only 1x, even if multiple versions of Lit
    // are loaded.
    const issuedWarnings = ((_a = globalThis.litIssuedWarnings) !== null && _a !== void 0 ? _a : (globalThis.litIssuedWarnings = new Set()));
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning) => {
        warning += ` See https://lit.dev/msg/${code} for more information.`;
        if (!issuedWarnings.has(warning)) {
            console.warn(warning);
            issuedWarnings.add(warning);
        }
    };
}
/**
 * Base element class that manages element properties and attributes, and
 * renders a lit-html template.
 *
 * To define a component, subclass `LitElement` and implement a
 * `render` method to provide the component's template. Define properties
 * using the {@linkcode LitElement.properties properties} property or the
 * {@linkcode property} decorator.
 */
class LitElement extends _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement {
    constructor() {
        super(...arguments);
        /**
         * @category rendering
         */
        this.renderOptions = { host: this };
        this.__childPart = undefined;
    }
    /**
     * @category rendering
     */
    createRenderRoot() {
        var _a;
        var _b;
        const renderRoot = super.createRenderRoot();
        // When adoptedStyleSheets are shimmed, they are inserted into the
        // shadowRoot by createRenderRoot. Adjust the renderBefore node so that
        // any styles in Lit content render before adoptedStyleSheets. This is
        // important so that adoptedStyleSheets have precedence over styles in
        // the shadowRoot.
        (_a = (_b = this.renderOptions).renderBefore) !== null && _a !== void 0 ? _a : (_b.renderBefore = renderRoot.firstChild);
        return renderRoot;
    }
    /**
     * Updates the element. This method reflects property values to attributes
     * and calls `render` to render DOM via lit-html. Setting properties inside
     * this method will *not* trigger another update.
     * @param changedProperties Map of changed properties with old values
     * @category updates
     */
    update(changedProperties) {
        // Setting properties in `render` should not trigger an update. Since
        // updates are allowed after super.update, it's important to call `render`
        // before that.
        const value = this.render();
        if (!this.hasUpdated) {
            this.renderOptions.isConnected = this.isConnected;
        }
        super.update(changedProperties);
        this.__childPart = (0,lit_html__WEBPACK_IMPORTED_MODULE_1__.render)(value, this.renderRoot, this.renderOptions);
    }
    /**
     * Invoked when the component is added to the document's DOM.
     *
     * In `connectedCallback()` you should setup tasks that should only occur when
     * the element is connected to the document. The most common of these is
     * adding event listeners to nodes external to the element, like a keydown
     * event handler added to the window.
     *
     * ```ts
     * connectedCallback() {
     *   super.connectedCallback();
     *   addEventListener('keydown', this._handleKeydown);
     * }
     * ```
     *
     * Typically, anything done in `connectedCallback()` should be undone when the
     * element is disconnected, in `disconnectedCallback()`.
     *
     * @category lifecycle
     */
    connectedCallback() {
        var _a;
        super.connectedCallback();
        (_a = this.__childPart) === null || _a === void 0 ? void 0 : _a.setConnected(true);
    }
    /**
     * Invoked when the component is removed from the document's DOM.
     *
     * This callback is the main signal to the element that it may no longer be
     * used. `disconnectedCallback()` should ensure that nothing is holding a
     * reference to the element (such as event listeners added to nodes external
     * to the element), so that it is free to be garbage collected.
     *
     * ```ts
     * disconnectedCallback() {
     *   super.disconnectedCallback();
     *   window.removeEventListener('keydown', this._handleKeydown);
     * }
     * ```
     *
     * An element may be re-connected after being disconnected.
     *
     * @category lifecycle
     */
    disconnectedCallback() {
        var _a;
        super.disconnectedCallback();
        (_a = this.__childPart) === null || _a === void 0 ? void 0 : _a.setConnected(false);
    }
    /**
     * Invoked on each update to perform rendering tasks. This method may return
     * any value renderable by lit-html's `ChildPart` - typically a
     * `TemplateResult`. Setting properties inside this method will *not* trigger
     * the element to update.
     * @category rendering
     */
    render() {
        return lit_html__WEBPACK_IMPORTED_MODULE_1__.noChange;
    }
}
/**
 * Ensure this class is marked as `finalized` as an optimization ensuring
 * it will not needlessly try to `finalize`.
 *
 * Note this property name is a string to prevent breaking Closure JS Compiler
 * optimizations. See @lit/reactive-element for more information.
 */
LitElement['finalized'] = true;
// This property needs to remain unminified.
LitElement['_$litElement$'] = true;
// Install hydration if available
(_b = globalThis.litElementHydrateSupport) === null || _b === void 0 ? void 0 : _b.call(globalThis, { LitElement });
// Apply polyfills if available
const polyfillSupport = DEV_MODE
    ? globalThis.litElementPolyfillSupportDevMode
    : globalThis.litElementPolyfillSupport;
polyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport({ LitElement });
// DEV mode warnings
if (DEV_MODE) {
    /* eslint-disable @typescript-eslint/no-explicit-any */
    // Note, for compatibility with closure compilation, this access
    // needs to be as a string property index.
    LitElement['finalize'] = function () {
        const finalized = _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__.ReactiveElement.finalize.call(this);
        if (!finalized) {
            return false;
        }
        const warnRemovedOrRenamed = (obj, name, renamed = false) => {
            if (obj.hasOwnProperty(name)) {
                const ctorName = (typeof obj === 'function' ? obj : obj.constructor)
                    .name;
                issueWarning(renamed ? 'renamed-api' : 'removed-api', `\`${name}\` is implemented on class ${ctorName}. It ` +
                    `has been ${renamed ? 'renamed' : 'removed'} ` +
                    `in this version of LitElement.`);
            }
        };
        warnRemovedOrRenamed(this, 'render');
        warnRemovedOrRenamed(this, 'getStyles', true);
        warnRemovedOrRenamed(this.prototype, 'adoptStyles');
        return true;
    };
    /* eslint-enable @typescript-eslint/no-explicit-any */
}
/**
 * END USERS SHOULD NOT RELY ON THIS OBJECT.
 *
 * Private exports for use by other Lit packages, not intended for use by
 * external users.
 *
 * We currently do not make a mangled rollup build of the lit-ssr code. In order
 * to keep a number of (otherwise private) top-level exports  mangled in the
 * client side code, we export a _$LE object containing those members (or
 * helper methods for accessing private fields of those members), and then
 * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the
 * client-side code is being used in `dev` mode or `prod` mode.
 *
 * This has a unique name, to disambiguate it from private exports in
 * lit-html, since this module re-exports all of lit-html.
 *
 * @private
 */
const _$LE = {
    _$attributeToProperty: (el, name, value) => {
        // eslint-disable-next-line
        el._$attributeToProperty(name, value);
    },
    // eslint-disable-next-line
    _$changedProperties: (el) => el._$changedProperties,
};
// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for LitElement usage.
((_c = globalThis.litElementVersions) !== null && _c !== void 0 ? _c : (globalThis.litElementVersions = [])).push('3.3.3');
if (DEV_MODE && globalThis.litElementVersions.length > 1) {
    issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` +
        `is not recommended.`);
}
//# sourceMappingURL=lit-element.js.map

/***/ }),

/***/ "./public/node_modules/lit-html/development/directive.js":
/*!***************************************************************!*\
  !*** ./public/node_modules/lit-html/development/directive.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Directive: () => (/* binding */ Directive),
/* harmony export */   PartType: () => (/* binding */ PartType),
/* harmony export */   directive: () => (/* binding */ directive)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const PartType = {
    ATTRIBUTE: 1,
    CHILD: 2,
    PROPERTY: 3,
    BOOLEAN_ATTRIBUTE: 4,
    EVENT: 5,
    ELEMENT: 6,
};
/**
 * Creates a user-facing directive function from a Directive class. This
 * function has the same parameters as the directive's render() method.
 */
const directive = (c) => (...values) => ({
    // This property needs to remain unminified.
    ['_$litDirective$']: c,
    values,
});
/**
 * Base class for creating custom directives. Users should extend this class,
 * implement `render` and/or `update`, and then pass their subclass to
 * `directive`.
 */
class Directive {
    constructor(_partInfo) { }
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        return this._$parent._$isConnected;
    }
    /** @internal */
    _$initialize(part, parent, attributeIndex) {
        this.__part = part;
        this._$parent = parent;
        this.__attributeIndex = attributeIndex;
    }
    /** @internal */
    _$resolve(part, props) {
        return this.update(part, props);
    }
    update(_part, props) {
        return this.render(...props);
    }
}
//# sourceMappingURL=directive.js.map

/***/ }),

/***/ "./public/node_modules/lit-html/development/directives/class-map.js":
/*!**************************************************************************!*\
  !*** ./public/node_modules/lit-html/development/directives/class-map.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   classMap: () => (/* binding */ classMap)
/* harmony export */ });
/* harmony import */ var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lit-html.js */ "./public/node_modules/lit-html/development/lit-html.js");
/* harmony import */ var _directive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../directive.js */ "./public/node_modules/lit-html/development/directive.js");
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */


class ClassMapDirective extends _directive_js__WEBPACK_IMPORTED_MODULE_1__.Directive {
    constructor(partInfo) {
        var _a;
        super(partInfo);
        if (partInfo.type !== _directive_js__WEBPACK_IMPORTED_MODULE_1__.PartType.ATTRIBUTE ||
            partInfo.name !== 'class' ||
            ((_a = partInfo.strings) === null || _a === void 0 ? void 0 : _a.length) > 2) {
            throw new Error('`classMap()` can only be used in the `class` attribute ' +
                'and must be the only part in the attribute.');
        }
    }
    render(classInfo) {
        // Add spaces to ensure separation from static classes
        return (' ' +
            Object.keys(classInfo)
                .filter((key) => classInfo[key])
                .join(' ') +
            ' ');
    }
    update(part, [classInfo]) {
        var _a, _b;
        // Remember dynamic classes on the first render
        if (this._previousClasses === undefined) {
            this._previousClasses = new Set();
            if (part.strings !== undefined) {
                this._staticClasses = new Set(part.strings
                    .join(' ')
                    .split(/\s/)
                    .filter((s) => s !== ''));
            }
            for (const name in classInfo) {
                if (classInfo[name] && !((_a = this._staticClasses) === null || _a === void 0 ? void 0 : _a.has(name))) {
                    this._previousClasses.add(name);
                }
            }
            return this.render(classInfo);
        }
        const classList = part.element.classList;
        // Remove old classes that no longer apply
        // We use forEach() instead of for-of so that we don't require down-level
        // iteration.
        this._previousClasses.forEach((name) => {
            if (!(name in classInfo)) {
                classList.remove(name);
                this._previousClasses.delete(name);
            }
        });
        // Add or remove classes based on their classMap value
        for (const name in classInfo) {
            // We explicitly want a loose truthy check of `value` because it seems
            // more convenient that '' and 0 are skipped.
            const value = !!classInfo[name];
            if (value !== this._previousClasses.has(name) &&
                !((_b = this._staticClasses) === null || _b === void 0 ? void 0 : _b.has(name))) {
                if (value) {
                    classList.add(name);
                    this._previousClasses.add(name);
                }
                else {
                    classList.remove(name);
                    this._previousClasses.delete(name);
                }
            }
        }
        return _lit_html_js__WEBPACK_IMPORTED_MODULE_0__.noChange;
    }
}
/**
 * A directive that applies dynamic CSS classes.
 *
 * This must be used in the `class` attribute and must be the only part used in
 * the attribute. It takes each property in the `classInfo` argument and adds
 * the property name to the element's `classList` if the property value is
 * truthy; if the property value is falsey, the property name is removed from
 * the element's `class`.
 *
 * For example `{foo: bar}` applies the class `foo` if the value of `bar` is
 * truthy.
 *
 * @param classInfo
 */
const classMap = (0,_directive_js__WEBPACK_IMPORTED_MODULE_1__.directive)(ClassMapDirective);
//# sourceMappingURL=class-map.js.map

/***/ }),

/***/ "./public/node_modules/lit-html/development/directives/if-defined.js":
/*!***************************************************************************!*\
  !*** ./public/node_modules/lit-html/development/directives/if-defined.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ifDefined: () => (/* binding */ ifDefined)
/* harmony export */ });
/* harmony import */ var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lit-html.js */ "./public/node_modules/lit-html/development/lit-html.js");
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * For AttributeParts, sets the attribute if the value is defined and removes
 * the attribute if the value is undefined.
 *
 * For other part types, this directive is a no-op.
 */
const ifDefined = (value) => value !== null && value !== void 0 ? value : _lit_html_js__WEBPACK_IMPORTED_MODULE_0__.nothing;
//# sourceMappingURL=if-defined.js.map

/***/ }),

/***/ "./public/node_modules/lit-html/development/directives/style-map.js":
/*!**************************************************************************!*\
  !*** ./public/node_modules/lit-html/development/directives/style-map.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styleMap: () => (/* binding */ styleMap)
/* harmony export */ });
/* harmony import */ var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lit-html.js */ "./public/node_modules/lit-html/development/lit-html.js");
/* harmony import */ var _directive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../directive.js */ "./public/node_modules/lit-html/development/directive.js");
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */


const important = 'important';
// The leading space is important
const importantFlag = ' !' + important;
// How many characters to remove from a value, as a negative number
const flagTrim = 0 - importantFlag.length;
class StyleMapDirective extends _directive_js__WEBPACK_IMPORTED_MODULE_1__.Directive {
    constructor(partInfo) {
        var _a;
        super(partInfo);
        if (partInfo.type !== _directive_js__WEBPACK_IMPORTED_MODULE_1__.PartType.ATTRIBUTE ||
            partInfo.name !== 'style' ||
            ((_a = partInfo.strings) === null || _a === void 0 ? void 0 : _a.length) > 2) {
            throw new Error('The `styleMap` directive must be used in the `style` attribute ' +
                'and must be the only part in the attribute.');
        }
    }
    render(styleInfo) {
        return Object.keys(styleInfo).reduce((style, prop) => {
            const value = styleInfo[prop];
            if (value == null) {
                return style;
            }
            // Convert property names from camel-case to dash-case, i.e.:
            //  `backgroundColor` -> `background-color`
            // Vendor-prefixed names need an extra `-` appended to front:
            //  `webkitAppearance` -> `-webkit-appearance`
            // Exception is any property name containing a dash, including
            // custom properties; we assume these are already dash-cased i.e.:
            //  `--my-button-color` --> `--my-button-color`
            prop = prop.includes('-')
                ? prop
                : prop
                    .replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&')
                    .toLowerCase();
            return style + `${prop}:${value};`;
        }, '');
    }
    update(part, [styleInfo]) {
        const { style } = part.element;
        if (this._previousStyleProperties === undefined) {
            this._previousStyleProperties = new Set();
            for (const name in styleInfo) {
                this._previousStyleProperties.add(name);
            }
            return this.render(styleInfo);
        }
        // Remove old properties that no longer exist in styleInfo
        // We use forEach() instead of for-of so that re don't require down-level
        // iteration.
        this._previousStyleProperties.forEach((name) => {
            // If the name isn't in styleInfo or it's null/undefined
            if (styleInfo[name] == null) {
                this._previousStyleProperties.delete(name);
                if (name.includes('-')) {
                    style.removeProperty(name);
                }
                else {
                    // Note reset using empty string (vs null) as IE11 does not always
                    // reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    style[name] = '';
                }
            }
        });
        // Add or update properties
        for (const name in styleInfo) {
            const value = styleInfo[name];
            if (value != null) {
                this._previousStyleProperties.add(name);
                const isImportant = typeof value === 'string' && value.endsWith(importantFlag);
                if (name.includes('-') || isImportant) {
                    style.setProperty(name, isImportant
                        ? value.slice(0, flagTrim)
                        : value, isImportant ? important : '');
                }
                else {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    style[name] = value;
                }
            }
        }
        return _lit_html_js__WEBPACK_IMPORTED_MODULE_0__.noChange;
    }
}
/**
 * A directive that applies CSS properties to an element.
 *
 * `styleMap` can only be used in the `style` attribute and must be the only
 * expression in the attribute. It takes the property names in the
 * {@link StyleInfo styleInfo} object and adds the properties to the inline
 * style of the element.
 *
 * Property names with dashes (`-`) are assumed to be valid CSS
 * property names and set on the element's style object using `setProperty()`.
 * Names without dashes are assumed to be camelCased JavaScript property names
 * and set on the element's style object using property assignment, allowing the
 * style object to translate JavaScript-style names to CSS property names.
 *
 * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':
 * '0'})` sets the `background-color`, `border-top` and `--size` properties.
 *
 * @param styleInfo
 * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}
 */
const styleMap = (0,_directive_js__WEBPACK_IMPORTED_MODULE_1__.directive)(StyleMapDirective);
//# sourceMappingURL=style-map.js.map

/***/ }),

/***/ "./public/node_modules/lit-html/development/is-server.js":
/*!***************************************************************!*\
  !*** ./public/node_modules/lit-html/development/is-server.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isServer: () => (/* binding */ isServer)
/* harmony export */ });
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @fileoverview
 *
 * This file exports a boolean const whose value will depend on what environment
 * the module is being imported from.
 */
const NODE_MODE = false;
/**
 * A boolean that will be `true` in server environments like Node, and `false`
 * in browser environments. Note that your server environment or toolchain must
 * support the `"node"` export condition for this to be `true`.
 *
 * This can be used when authoring components to change behavior based on
 * whether or not the component is executing in an SSR context.
 */
const isServer = NODE_MODE;
//# sourceMappingURL=is-server.js.map

/***/ }),

/***/ "./public/node_modules/lit-html/development/lit-html.js":
/*!**************************************************************!*\
  !*** ./public/node_modules/lit-html/development/lit-html.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _$LH: () => (/* binding */ _$LH),
/* harmony export */   html: () => (/* binding */ html),
/* harmony export */   noChange: () => (/* binding */ noChange),
/* harmony export */   nothing: () => (/* binding */ nothing),
/* harmony export */   render: () => (/* binding */ render),
/* harmony export */   svg: () => (/* binding */ svg)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var _a, _b, _c, _d;
const DEV_MODE = true;
const ENABLE_EXTRA_SECURITY_HOOKS = true;
const ENABLE_SHADYDOM_NOPATCH = true;
const NODE_MODE = false;
// Use window for browser builds because IE11 doesn't have globalThis.
const global = NODE_MODE ? globalThis : window;
/**
 * Useful for visualizing and logging insights into what the Lit template system is doing.
 *
 * Compiled out of prod mode builds.
 */
const debugLogEvent = DEV_MODE
    ? (event) => {
        const shouldEmit = global
            .emitLitDebugLogEvents;
        if (!shouldEmit) {
            return;
        }
        global.dispatchEvent(new CustomEvent('lit-debug', {
            detail: event,
        }));
    }
    : undefined;
// Used for connecting beginRender and endRender events when there are nested
// renders when errors are thrown preventing an endRender event from being
// called.
let debugLogRenderId = 0;
let issueWarning;
if (DEV_MODE) {
    (_a = global.litIssuedWarnings) !== null && _a !== void 0 ? _a : (global.litIssuedWarnings = new Set());
    // Issue a warning, if we haven't already.
    issueWarning = (code, warning) => {
        warning += code
            ? ` See https://lit.dev/msg/${code} for more information.`
            : '';
        if (!global.litIssuedWarnings.has(warning)) {
            console.warn(warning);
            global.litIssuedWarnings.add(warning);
        }
    };
    issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`);
}
const wrap = ENABLE_SHADYDOM_NOPATCH &&
    ((_b = global.ShadyDOM) === null || _b === void 0 ? void 0 : _b.inUse) &&
    ((_c = global.ShadyDOM) === null || _c === void 0 ? void 0 : _c.noPatch) === true
    ? global.ShadyDOM.wrap
    : (node) => node;
const trustedTypes = global.trustedTypes;
/**
 * Our TrustedTypePolicy for HTML which is declared using the html template
 * tag function.
 *
 * That HTML is a developer-authored constant, and is parsed with innerHTML
 * before any untrusted expressions have been mixed in. Therefor it is
 * considered safe by construction.
 */
const policy = trustedTypes
    ? trustedTypes.createPolicy('lit-html', {
        createHTML: (s) => s,
    })
    : undefined;
const identityFunction = (value) => value;
const noopSanitizer = (_node, _name, _type) => identityFunction;
/** Sets the global sanitizer factory. */
const setSanitizer = (newSanitizer) => {
    if (!ENABLE_EXTRA_SECURITY_HOOKS) {
        return;
    }
    if (sanitizerFactoryInternal !== noopSanitizer) {
        throw new Error(`Attempted to overwrite existing lit-html security policy.` +
            ` setSanitizeDOMValueFactory should be called at most once.`);
    }
    sanitizerFactoryInternal = newSanitizer;
};
/**
 * Only used in internal tests, not a part of the public API.
 */
const _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {
    sanitizerFactoryInternal = noopSanitizer;
};
const createSanitizer = (node, name, type) => {
    return sanitizerFactoryInternal(node, name, type);
};
// Added to an attribute name to mark the attribute as bound so we can find
// it easily.
const boundAttributeSuffix = '$lit$';
// This marker is used in many syntactic positions in HTML, so it must be
// a valid element name and attribute name. We don't support dynamic names (yet)
// but this at least ensures that the parse tree is closer to the template
// intention.
const marker = `lit$${String(Math.random()).slice(9)}$`;
// String used to tell if a comment is a marker comment
const markerMatch = '?' + marker;
// Text used to insert a comment marker node. We use processing instruction
// syntax because it's slightly smaller, but parses as a comment node.
const nodeMarker = `<${markerMatch}>`;
const d = NODE_MODE && global.document === undefined
    ? {
        createTreeWalker() {
            return {};
        },
    }
    : document;
// Creates a dynamic marker. We never have to search for these in the DOM.
const createMarker = () => d.createComment('');
const isPrimitive = (value) => value === null || (typeof value != 'object' && typeof value != 'function');
const isArray = Array.isArray;
const isIterable = (value) => isArray(value) ||
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    typeof (value === null || value === void 0 ? void 0 : value[Symbol.iterator]) === 'function';
const SPACE_CHAR = `[ \t\n\f\r]`;
const ATTR_VALUE_CHAR = `[^ \t\n\f\r"'\`<>=]`;
const NAME_CHAR = `[^\\s"'>=/]`;
// These regexes represent the five parsing states that we care about in the
// Template's HTML scanner. They match the *end* of the state they're named
// after.
// Depending on the match, we transition to a new state. If there's no match,
// we stay in the same state.
// Note that the regexes are stateful. We utilize lastIndex and sync it
// across the multiple regexes used. In addition to the five regexes below
// we also dynamically create a regex to find the matching end tags for raw
// text elements.
/**
 * End of text is: `<` followed by:
 *   (comment start) or (tag) or (dynamic tag binding)
 */
const textEndRegex = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
const COMMENT_START = 1;
const TAG_NAME = 2;
const DYNAMIC_TAG_NAME = 3;
const commentEndRegex = /-->/g;
/**
 * Comments not started with <!--, like </{, can be ended by a single `>`
 */
const comment2EndRegex = />/g;
/**
 * The tagEnd regex matches the end of the "inside an opening" tag syntax
 * position. It either matches a `>`, an attribute-like sequence, or the end
 * of the string after a space (attribute-name position ending).
 *
 * See attributes in the HTML spec:
 * https://www.w3.org/TR/html5/syntax.html#elements-attributes
 *
 * " \t\n\f\r" are HTML space characters:
 * https://infra.spec.whatwg.org/#ascii-whitespace
 *
 * So an attribute is:
 *  * The name: any character except a whitespace character, ("), ('), ">",
 *    "=", or "/". Note: this is different from the HTML spec which also excludes control characters.
 *  * Followed by zero or more space characters
 *  * Followed by "="
 *  * Followed by zero or more space characters
 *  * Followed by:
 *    * Any character except space, ('), ("), "<", ">", "=", (`), or
 *    * (") then any non-("), or
 *    * (') then any non-(')
 */
const tagEndRegex = new RegExp(`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|("|')|))|$)`, 'g');
const ENTIRE_MATCH = 0;
const ATTRIBUTE_NAME = 1;
const SPACES_AND_EQUALS = 2;
const QUOTE_CHAR = 3;
const singleQuoteAttrEndRegex = /'/g;
const doubleQuoteAttrEndRegex = /"/g;
/**
 * Matches the raw text elements.
 *
 * Comments are not parsed within raw text elements, so we need to search their
 * text content for marker strings.
 */
const rawTextElement = /^(?:script|style|textarea|title)$/i;
/** TemplateResult types */
const HTML_RESULT = 1;
const SVG_RESULT = 2;
// TemplatePart types
// IMPORTANT: these must match the values in PartType
const ATTRIBUTE_PART = 1;
const CHILD_PART = 2;
const PROPERTY_PART = 3;
const BOOLEAN_ATTRIBUTE_PART = 4;
const EVENT_PART = 5;
const ELEMENT_PART = 6;
const COMMENT_PART = 7;
/**
 * Generates a template literal tag function that returns a TemplateResult with
 * the given result type.
 */
const tag = (type) => (strings, ...values) => {
    // Warn against templates octal escape sequences
    // We do this here rather than in render so that the warning is closer to the
    // template definition.
    if (DEV_MODE && strings.some((s) => s === undefined)) {
        console.warn('Some template strings are undefined.\n' +
            'This is probably caused by illegal octal escape sequences.');
    }
    return {
        // This property needs to remain unminified.
        ['_$litType$']: type,
        strings,
        values,
    };
};
/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 *
 * ```ts
 * const header = (title: string) => html`<h1>${title}</h1>`;
 * ```
 *
 * The `html` tag returns a description of the DOM to render as a value. It is
 * lazy, meaning no work is done until the template is rendered. When rendering,
 * if a template comes from the same expression as a previously rendered result,
 * it's efficiently updated instead of replaced.
 */
const html = tag(HTML_RESULT);
/**
 * Interprets a template literal as an SVG fragment that can efficiently
 * render to and update a container.
 *
 * ```ts
 * const rect = svg`<rect width="10" height="10"></rect>`;
 *
 * const myImage = html`
 *   <svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg">
 *     ${rect}
 *   </svg>`;
 * ```
 *
 * The `svg` *tag function* should only be used for SVG fragments, or elements
 * that would be contained **inside** an `<svg>` HTML element. A common error is
 * placing an `<svg>` *element* in a template tagged with the `svg` tag
 * function. The `<svg>` element is an HTML element and should be used within a
 * template tagged with the {@linkcode html} tag function.
 *
 * In LitElement usage, it's invalid to return an SVG fragment from the
 * `render()` method, as the SVG fragment will be contained within the element's
 * shadow root and thus cannot be used within an `<svg>` HTML element.
 */
const svg = tag(SVG_RESULT);
/**
 * A sentinel value that signals that a value was handled by a directive and
 * should not be written to the DOM.
 */
const noChange = Symbol.for('lit-noChange');
/**
 * A sentinel value that signals a ChildPart to fully clear its content.
 *
 * ```ts
 * const button = html`${
 *  user.isAdmin
 *    ? html`<button>DELETE</button>`
 *    : nothing
 * }`;
 * ```
 *
 * Prefer using `nothing` over other falsy values as it provides a consistent
 * behavior between various expression binding contexts.
 *
 * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the
 * same and render no nodes. In attribute expressions, `nothing` _removes_ the
 * attribute, while `undefined` and `null` will render an empty string. In
 * property expressions `nothing` becomes `undefined`.
 */
const nothing = Symbol.for('lit-nothing');
/**
 * The cache of prepared templates, keyed by the tagged TemplateStringsArray
 * and _not_ accounting for the specific template tag used. This means that
 * template tags cannot be dynamic - the must statically be one of html, svg,
 * or attr. This restriction simplifies the cache lookup, which is on the hot
 * path for rendering.
 */
const templateCache = new WeakMap();
const walker = d.createTreeWalker(d, 129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */, null, false);
let sanitizerFactoryInternal = noopSanitizer;
function trustFromTemplateString(tsa, stringFromTSA) {
    // A security check to prevent spoofing of Lit template results.
    // In the future, we may be able to replace this with Array.isTemplateObject,
    // though we might need to make that check inside of the html and svg
    // functions, because precompiled templates don't come in as
    // TemplateStringArray objects.
    if (!Array.isArray(tsa) || !tsa.hasOwnProperty('raw')) {
        let message = 'invalid template strings array';
        if (DEV_MODE) {
            message = `
          Internal Error: expected template strings to be an array
          with a 'raw' field. Faking a template strings array by
          calling html or svg like an ordinary function is effectively
          the same as calling unsafeHtml and can lead to major security
          issues, e.g. opening your code up to XSS attacks.
          If you're using the html or svg tagged template functions normally
          and still seeing this error, please file a bug at
          https://github.com/lit/lit/issues/new?template=bug_report.md
          and include information about your build tooling, if any.
        `
                .trim()
                .replace(/\n */g, '\n');
        }
        throw new Error(message);
    }
    return policy !== undefined
        ? policy.createHTML(stringFromTSA)
        : stringFromTSA;
}
/**
 * Returns an HTML string for the given TemplateStringsArray and result type
 * (HTML or SVG), along with the case-sensitive bound attribute names in
 * template order. The HTML contains comment markers denoting the `ChildPart`s
 * and suffixes on bound attributes denoting the `AttributeParts`.
 *
 * @param strings template strings array
 * @param type HTML or SVG
 * @return Array containing `[html, attrNames]` (array returned for terseness,
 *     to avoid object fields since this code is shared with non-minified SSR
 *     code)
 */
const getTemplateHtml = (strings, type) => {
    // Insert makers into the template HTML to represent the position of
    // bindings. The following code scans the template strings to determine the
    // syntactic position of the bindings. They can be in text position, where
    // we insert an HTML comment, attribute value position, where we insert a
    // sentinel string and re-write the attribute name, or inside a tag where
    // we insert the sentinel string.
    const l = strings.length - 1;
    // Stores the case-sensitive bound attribute names in the order of their
    // parts. ElementParts are also reflected in this array as undefined
    // rather than a string, to disambiguate from attribute bindings.
    const attrNames = [];
    let html = type === SVG_RESULT ? '<svg>' : '';
    // When we're inside a raw text tag (not it's text content), the regex
    // will still be tagRegex so we can find attributes, but will switch to
    // this regex when the tag ends.
    let rawTextEndRegex;
    // The current parsing state, represented as a reference to one of the
    // regexes
    let regex = textEndRegex;
    for (let i = 0; i < l; i++) {
        const s = strings[i];
        // The index of the end of the last attribute name. When this is
        // positive at end of a string, it means we're in an attribute value
        // position and need to rewrite the attribute name.
        // We also use a special value of -2 to indicate that we encountered
        // the end of a string in attribute name position.
        let attrNameEndIndex = -1;
        let attrName;
        let lastIndex = 0;
        let match;
        // The conditions in this loop handle the current parse state, and the
        // assignments to the `regex` variable are the state transitions.
        while (lastIndex < s.length) {
            // Make sure we start searching from where we previously left off
            regex.lastIndex = lastIndex;
            match = regex.exec(s);
            if (match === null) {
                break;
            }
            lastIndex = regex.lastIndex;
            if (regex === textEndRegex) {
                if (match[COMMENT_START] === '!--') {
                    regex = commentEndRegex;
                }
                else if (match[COMMENT_START] !== undefined) {
                    // We started a weird comment, like </{
                    regex = comment2EndRegex;
                }
                else if (match[TAG_NAME] !== undefined) {
                    if (rawTextElement.test(match[TAG_NAME])) {
                        // Record if we encounter a raw-text element. We'll switch to
                        // this regex at the end of the tag.
                        rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');
                    }
                    regex = tagEndRegex;
                }
                else if (match[DYNAMIC_TAG_NAME] !== undefined) {
                    if (DEV_MODE) {
                        throw new Error('Bindings in tag names are not supported. Please use static templates instead. ' +
                            'See https://lit.dev/docs/templates/expressions/#static-expressions');
                    }
                    regex = tagEndRegex;
                }
            }
            else if (regex === tagEndRegex) {
                if (match[ENTIRE_MATCH] === '>') {
                    // End of a tag. If we had started a raw-text element, use that
                    // regex
                    regex = rawTextEndRegex !== null && rawTextEndRegex !== void 0 ? rawTextEndRegex : textEndRegex;
                    // We may be ending an unquoted attribute value, so make sure we
                    // clear any pending attrNameEndIndex
                    attrNameEndIndex = -1;
                }
                else if (match[ATTRIBUTE_NAME] === undefined) {
                    // Attribute name position
                    attrNameEndIndex = -2;
                }
                else {
                    attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;
                    attrName = match[ATTRIBUTE_NAME];
                    regex =
                        match[QUOTE_CHAR] === undefined
                            ? tagEndRegex
                            : match[QUOTE_CHAR] === '"'
                                ? doubleQuoteAttrEndRegex
                                : singleQuoteAttrEndRegex;
                }
            }
            else if (regex === doubleQuoteAttrEndRegex ||
                regex === singleQuoteAttrEndRegex) {
                regex = tagEndRegex;
            }
            else if (regex === commentEndRegex || regex === comment2EndRegex) {
                regex = textEndRegex;
            }
            else {
                // Not one of the five state regexes, so it must be the dynamically
                // created raw text regex and we're at the close of that element.
                regex = tagEndRegex;
                rawTextEndRegex = undefined;
            }
        }
        if (DEV_MODE) {
            // If we have a attrNameEndIndex, which indicates that we should
            // rewrite the attribute name, assert that we're in a valid attribute
            // position - either in a tag, or a quoted attribute value.
            console.assert(attrNameEndIndex === -1 ||
                regex === tagEndRegex ||
                regex === singleQuoteAttrEndRegex ||
                regex === doubleQuoteAttrEndRegex, 'unexpected parse state B');
        }
        // We have four cases:
        //  1. We're in text position, and not in a raw text element
        //     (regex === textEndRegex): insert a comment marker.
        //  2. We have a non-negative attrNameEndIndex which means we need to
        //     rewrite the attribute name to add a bound attribute suffix.
        //  3. We're at the non-first binding in a multi-binding attribute, use a
        //     plain marker.
        //  4. We're somewhere else inside the tag. If we're in attribute name
        //     position (attrNameEndIndex === -2), add a sequential suffix to
        //     generate a unique attribute name.
        // Detect a binding next to self-closing tag end and insert a space to
        // separate the marker from the tag end:
        const end = regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';
        html +=
            regex === textEndRegex
                ? s + nodeMarker
                : attrNameEndIndex >= 0
                    ? (attrNames.push(attrName),
                        s.slice(0, attrNameEndIndex) +
                            boundAttributeSuffix +
                            s.slice(attrNameEndIndex)) +
                        marker +
                        end
                    : s +
                        marker +
                        (attrNameEndIndex === -2 ? (attrNames.push(undefined), i) : end);
    }
    const htmlResult = html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : '');
    // Returned as an array for terseness
    return [trustFromTemplateString(strings, htmlResult), attrNames];
};
class Template {
    constructor(
    // This property needs to remain unminified.
    { strings, ['_$litType$']: type }, options) {
        this.parts = [];
        let node;
        let nodeIndex = 0;
        let attrNameIndex = 0;
        const partCount = strings.length - 1;
        const parts = this.parts;
        // Create template element
        const [html, attrNames] = getTemplateHtml(strings, type);
        this.el = Template.createElement(html, options);
        walker.currentNode = this.el.content;
        // Reparent SVG nodes into template root
        if (type === SVG_RESULT) {
            const content = this.el.content;
            const svgElement = content.firstChild;
            svgElement.remove();
            content.append(...svgElement.childNodes);
        }
        // Walk the template to find binding markers and create TemplateParts
        while ((node = walker.nextNode()) !== null && parts.length < partCount) {
            if (node.nodeType === 1) {
                if (DEV_MODE) {
                    const tag = node.localName;
                    // Warn if `textarea` includes an expression and throw if `template`
                    // does since these are not supported. We do this by checking
                    // innerHTML for anything that looks like a marker. This catches
                    // cases like bindings in textarea there markers turn into text nodes.
                    if (/^(?:textarea|template)$/i.test(tag) &&
                        node.innerHTML.includes(marker)) {
                        const m = `Expressions are not supported inside \`${tag}\` ` +
                            `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +
                            `information.`;
                        if (tag === 'template') {
                            throw new Error(m);
                        }
                        else
                            issueWarning('', m);
                    }
                }
                // TODO (justinfagnani): for attempted dynamic tag names, we don't
                // increment the bindingIndex, and it'll be off by 1 in the element
                // and off by two after it.
                if (node.hasAttributes()) {
                    // We defer removing bound attributes because on IE we might not be
                    // iterating attributes in their template order, and would sometimes
                    // remove an attribute that we still need to create a part for.
                    const attrsToRemove = [];
                    for (const name of node.getAttributeNames()) {
                        // `name` is the name of the attribute we're iterating over, but not
                        // _necessarily_ the name of the attribute we will create a part
                        // for. They can be different in browsers that don't iterate on
                        // attributes in source order. In that case the attrNames array
                        // contains the attribute name we'll process next. We only need the
                        // attribute name here to know if we should process a bound attribute
                        // on this element.
                        if (name.endsWith(boundAttributeSuffix) ||
                            name.startsWith(marker)) {
                            const realName = attrNames[attrNameIndex++];
                            attrsToRemove.push(name);
                            if (realName !== undefined) {
                                // Lowercase for case-sensitive SVG attributes like viewBox
                                const value = node.getAttribute(realName.toLowerCase() + boundAttributeSuffix);
                                const statics = value.split(marker);
                                const m = /([.?@])?(.*)/.exec(realName);
                                parts.push({
                                    type: ATTRIBUTE_PART,
                                    index: nodeIndex,
                                    name: m[2],
                                    strings: statics,
                                    ctor: m[1] === '.'
                                        ? PropertyPart
                                        : m[1] === '?'
                                            ? BooleanAttributePart
                                            : m[1] === '@'
                                                ? EventPart
                                                : AttributePart,
                                });
                            }
                            else {
                                parts.push({
                                    type: ELEMENT_PART,
                                    index: nodeIndex,
                                });
                            }
                        }
                    }
                    for (const name of attrsToRemove) {
                        node.removeAttribute(name);
                    }
                }
                // TODO (justinfagnani): benchmark the regex against testing for each
                // of the 3 raw text element names.
                if (rawTextElement.test(node.tagName)) {
                    // For raw text elements we need to split the text content on
                    // markers, create a Text node for each segment, and create
                    // a TemplatePart for each marker.
                    const strings = node.textContent.split(marker);
                    const lastIndex = strings.length - 1;
                    if (lastIndex > 0) {
                        node.textContent = trustedTypes
                            ? trustedTypes.emptyScript
                            : '';
                        // Generate a new text node for each literal section
                        // These nodes are also used as the markers for node parts
                        // We can't use empty text nodes as markers because they're
                        // normalized when cloning in IE (could simplify when
                        // IE is no longer supported)
                        for (let i = 0; i < lastIndex; i++) {
                            node.append(strings[i], createMarker());
                            // Walk past the marker node we just added
                            walker.nextNode();
                            parts.push({ type: CHILD_PART, index: ++nodeIndex });
                        }
                        // Note because this marker is added after the walker's current
                        // node, it will be walked to in the outer loop (and ignored), so
                        // we don't need to adjust nodeIndex here
                        node.append(strings[lastIndex], createMarker());
                    }
                }
            }
            else if (node.nodeType === 8) {
                const data = node.data;
                if (data === markerMatch) {
                    parts.push({ type: CHILD_PART, index: nodeIndex });
                }
                else {
                    let i = -1;
                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
                        // Comment node has a binding marker inside, make an inactive part
                        // The binding won't work, but subsequent bindings will
                        parts.push({ type: COMMENT_PART, index: nodeIndex });
                        // Move to the end of the match
                        i += marker.length - 1;
                    }
                }
            }
            nodeIndex++;
        }
        // We could set walker.currentNode to another node here to prevent a memory
        // leak, but every time we prepare a template, we immediately render it
        // and re-use the walker in new TemplateInstance._clone().
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
            kind: 'template prep',
            template: this,
            clonableTemplate: this.el,
            parts: this.parts,
            strings,
        });
    }
    // Overridden via `litHtmlPolyfillSupport` to provide platform support.
    /** @nocollapse */
    static createElement(html, _options) {
        const el = d.createElement('template');
        el.innerHTML = html;
        return el;
    }
}
function resolveDirective(part, value, parent = part, attributeIndex) {
    var _a, _b, _c;
    var _d;
    // Bail early if the value is explicitly noChange. Note, this means any
    // nested directive is still attached and is not run.
    if (value === noChange) {
        return value;
    }
    let currentDirective = attributeIndex !== undefined
        ? (_a = parent.__directives) === null || _a === void 0 ? void 0 : _a[attributeIndex]
        : parent.__directive;
    const nextDirectiveConstructor = isPrimitive(value)
        ? undefined
        : // This property needs to remain unminified.
            value['_$litDirective$'];
    if ((currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective.constructor) !== nextDirectiveConstructor) {
        // This property needs to remain unminified.
        (_b = currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective['_$notifyDirectiveConnectionChanged']) === null || _b === void 0 ? void 0 : _b.call(currentDirective, false);
        if (nextDirectiveConstructor === undefined) {
            currentDirective = undefined;
        }
        else {
            currentDirective = new nextDirectiveConstructor(part);
            currentDirective._$initialize(part, parent, attributeIndex);
        }
        if (attributeIndex !== undefined) {
            ((_c = (_d = parent).__directives) !== null && _c !== void 0 ? _c : (_d.__directives = []))[attributeIndex] =
                currentDirective;
        }
        else {
            parent.__directive = currentDirective;
        }
    }
    if (currentDirective !== undefined) {
        value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);
    }
    return value;
}
/**
 * An updateable instance of a Template. Holds references to the Parts used to
 * update the template instance.
 */
class TemplateInstance {
    constructor(template, parent) {
        this._$parts = [];
        /** @internal */
        this._$disconnectableChildren = undefined;
        this._$template = template;
        this._$parent = parent;
    }
    // Called by ChildPart parentNode getter
    get parentNode() {
        return this._$parent.parentNode;
    }
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        return this._$parent._$isConnected;
    }
    // This method is separate from the constructor because we need to return a
    // DocumentFragment and we don't want to hold onto it with an instance field.
    _clone(options) {
        var _a;
        const { el: { content }, parts: parts, } = this._$template;
        const fragment = ((_a = options === null || options === void 0 ? void 0 : options.creationScope) !== null && _a !== void 0 ? _a : d).importNode(content, true);
        walker.currentNode = fragment;
        let node = walker.nextNode();
        let nodeIndex = 0;
        let partIndex = 0;
        let templatePart = parts[0];
        while (templatePart !== undefined) {
            if (nodeIndex === templatePart.index) {
                let part;
                if (templatePart.type === CHILD_PART) {
                    part = new ChildPart(node, node.nextSibling, this, options);
                }
                else if (templatePart.type === ATTRIBUTE_PART) {
                    part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);
                }
                else if (templatePart.type === ELEMENT_PART) {
                    part = new ElementPart(node, this, options);
                }
                this._$parts.push(part);
                templatePart = parts[++partIndex];
            }
            if (nodeIndex !== (templatePart === null || templatePart === void 0 ? void 0 : templatePart.index)) {
                node = walker.nextNode();
                nodeIndex++;
            }
        }
        // We need to set the currentNode away from the cloned tree so that we
        // don't hold onto the tree even if the tree is detached and should be
        // freed.
        walker.currentNode = d;
        return fragment;
    }
    _update(values) {
        let i = 0;
        for (const part of this._$parts) {
            if (part !== undefined) {
                debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
                    kind: 'set part',
                    part,
                    value: values[i],
                    valueIndex: i,
                    values,
                    templateInstance: this,
                });
                if (part.strings !== undefined) {
                    part._$setValue(values, part, i);
                    // The number of values the part consumes is part.strings.length - 1
                    // since values are in between template spans. We increment i by 1
                    // later in the loop, so increment it by part.strings.length - 2 here
                    i += part.strings.length - 2;
                }
                else {
                    part._$setValue(values[i]);
                }
            }
            i++;
        }
    }
}
class ChildPart {
    constructor(startNode, endNode, parent, options) {
        var _a;
        this.type = CHILD_PART;
        this._$committedValue = nothing;
        // The following fields will be patched onto ChildParts when required by
        // AsyncDirective
        /** @internal */
        this._$disconnectableChildren = undefined;
        this._$startNode = startNode;
        this._$endNode = endNode;
        this._$parent = parent;
        this.options = options;
        // Note __isConnected is only ever accessed on RootParts (i.e. when there is
        // no _$parent); the value on a non-root-part is "don't care", but checking
        // for parent would be more code
        this.__isConnected = (_a = options === null || options === void 0 ? void 0 : options.isConnected) !== null && _a !== void 0 ? _a : true;
        if (ENABLE_EXTRA_SECURITY_HOOKS) {
            // Explicitly initialize for consistent class shape.
            this._textSanitizer = undefined;
        }
    }
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        var _a, _b;
        // ChildParts that are not at the root should always be created with a
        // parent; only RootChildNode's won't, so they return the local isConnected
        // state
        return (_b = (_a = this._$parent) === null || _a === void 0 ? void 0 : _a._$isConnected) !== null && _b !== void 0 ? _b : this.__isConnected;
    }
    /**
     * The parent node into which the part renders its content.
     *
     * A ChildPart's content consists of a range of adjacent child nodes of
     * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and
     * `.endNode`).
     *
     * - If both `.startNode` and `.endNode` are non-null, then the part's content
     * consists of all siblings between `.startNode` and `.endNode`, exclusively.
     *
     * - If `.startNode` is non-null but `.endNode` is null, then the part's
     * content consists of all siblings following `.startNode`, up to and
     * including the last child of `.parentNode`. If `.endNode` is non-null, then
     * `.startNode` will always be non-null.
     *
     * - If both `.endNode` and `.startNode` are null, then the part's content
     * consists of all child nodes of `.parentNode`.
     */
    get parentNode() {
        let parentNode = wrap(this._$startNode).parentNode;
        const parent = this._$parent;
        if (parent !== undefined &&
            (parentNode === null || parentNode === void 0 ? void 0 : parentNode.nodeType) === 11 /* Node.DOCUMENT_FRAGMENT */) {
            // If the parentNode is a DocumentFragment, it may be because the DOM is
            // still in the cloned fragment during initial render; if so, get the real
            // parentNode the part will be committed into by asking the parent.
            parentNode = parent.parentNode;
        }
        return parentNode;
    }
    /**
     * The part's leading marker node, if any. See `.parentNode` for more
     * information.
     */
    get startNode() {
        return this._$startNode;
    }
    /**
     * The part's trailing marker node, if any. See `.parentNode` for more
     * information.
     */
    get endNode() {
        return this._$endNode;
    }
    _$setValue(value, directiveParent = this) {
        var _a;
        if (DEV_MODE && this.parentNode === null) {
            throw new Error(`This \`ChildPart\` has no \`parentNode\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \`innerHTML\` or \`textContent\` can do this.`);
        }
        value = resolveDirective(this, value, directiveParent);
        if (isPrimitive(value)) {
            // Non-rendering child values. It's important that these do not render
            // empty text nodes to avoid issues with preventing default <slot>
            // fallback content.
            if (value === nothing || value == null || value === '') {
                if (this._$committedValue !== nothing) {
                    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
                        kind: 'commit nothing to child',
                        start: this._$startNode,
                        end: this._$endNode,
                        parent: this._$parent,
                        options: this.options,
                    });
                    this._$clear();
                }
                this._$committedValue = nothing;
            }
            else if (value !== this._$committedValue && value !== noChange) {
                this._commitText(value);
            }
            // This property needs to remain unminified.
        }
        else if (value['_$litType$'] !== undefined) {
            this._commitTemplateResult(value);
        }
        else if (value.nodeType !== undefined) {
            if (DEV_MODE && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.host) === value) {
                this._commitText(`[probable mistake: rendered a template's host in itself ` +
                    `(commonly caused by writing \${this} in a template]`);
                console.warn(`Attempted to render the template host`, value, `inside itself. This is almost always a mistake, and in dev mode `, `we render some warning text. In production however, we'll `, `render it, which will usually result in an error, and sometimes `, `in the element disappearing from the DOM.`);
                return;
            }
            this._commitNode(value);
        }
        else if (isIterable(value)) {
            this._commitIterable(value);
        }
        else {
            // Fallback, will render the string representation
            this._commitText(value);
        }
    }
    _insert(node) {
        return wrap(wrap(this._$startNode).parentNode).insertBefore(node, this._$endNode);
    }
    _commitNode(value) {
        var _a;
        if (this._$committedValue !== value) {
            this._$clear();
            if (ENABLE_EXTRA_SECURITY_HOOKS &&
                sanitizerFactoryInternal !== noopSanitizer) {
                const parentNodeName = (_a = this._$startNode.parentNode) === null || _a === void 0 ? void 0 : _a.nodeName;
                if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {
                    let message = 'Forbidden';
                    if (DEV_MODE) {
                        if (parentNodeName === 'STYLE') {
                            message =
                                `Lit does not support binding inside style nodes. ` +
                                    `This is a security risk, as style injection attacks can ` +
                                    `exfiltrate data and spoof UIs. ` +
                                    `Consider instead using css\`...\` literals ` +
                                    `to compose styles, and make do dynamic styling with ` +
                                    `css custom properties, ::parts, <slot>s, ` +
                                    `and by mutating the DOM rather than stylesheets.`;
                        }
                        else {
                            message =
                                `Lit does not support binding inside script nodes. ` +
                                    `This is a security risk, as it could allow arbitrary ` +
                                    `code execution.`;
                        }
                    }
                    throw new Error(message);
                }
            }
            debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
                kind: 'commit node',
                start: this._$startNode,
                parent: this._$parent,
                value: value,
                options: this.options,
            });
            this._$committedValue = this._insert(value);
        }
    }
    _commitText(value) {
        // If the committed value is a primitive it means we called _commitText on
        // the previous render, and we know that this._$startNode.nextSibling is a
        // Text node. We can now just replace the text content (.data) of the node.
        if (this._$committedValue !== nothing &&
            isPrimitive(this._$committedValue)) {
            const node = wrap(this._$startNode).nextSibling;
            if (ENABLE_EXTRA_SECURITY_HOOKS) {
                if (this._textSanitizer === undefined) {
                    this._textSanitizer = createSanitizer(node, 'data', 'property');
                }
                value = this._textSanitizer(value);
            }
            debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
                kind: 'commit text',
                node,
                value,
                options: this.options,
            });
            node.data = value;
        }
        else {
            if (ENABLE_EXTRA_SECURITY_HOOKS) {
                const textNode = d.createTextNode('');
                this._commitNode(textNode);
                // When setting text content, for security purposes it matters a lot
                // what the parent is. For example, <style> and <script> need to be
                // handled with care, while <span> does not. So first we need to put a
                // text node into the document, then we can sanitize its content.
                if (this._textSanitizer === undefined) {
                    this._textSanitizer = createSanitizer(textNode, 'data', 'property');
                }
                value = this._textSanitizer(value);
                debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
                    kind: 'commit text',
                    node: textNode,
                    value,
                    options: this.options,
                });
                textNode.data = value;
            }
            else {
                this._commitNode(d.createTextNode(value));
                debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
                    kind: 'commit text',
                    node: wrap(this._$startNode).nextSibling,
                    value,
                    options: this.options,
                });
            }
        }
        this._$committedValue = value;
    }
    _commitTemplateResult(result) {
        var _a;
        // This property needs to remain unminified.
        const { values, ['_$litType$']: type } = result;
        // If $litType$ is a number, result is a plain TemplateResult and we get
        // the template from the template cache. If not, result is a
        // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need
        // to create the <template> element the first time we see it.
        const template = typeof type === 'number'
            ? this._$getTemplate(result)
            : (type.el === undefined &&
                (type.el = Template.createElement(trustFromTemplateString(type.h, type.h[0]), this.options)),
                type);
        if (((_a = this._$committedValue) === null || _a === void 0 ? void 0 : _a._$template) === template) {
            debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
                kind: 'template updating',
                template,
                instance: this._$committedValue,
                parts: this._$committedValue._$parts,
                options: this.options,
                values,
            });
            this._$committedValue._update(values);
        }
        else {
            const instance = new TemplateInstance(template, this);
            const fragment = instance._clone(this.options);
            debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
                kind: 'template instantiated',
                template,
                instance,
                parts: instance._$parts,
                options: this.options,
                fragment,
                values,
            });
            instance._update(values);
            debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
                kind: 'template instantiated and updated',
                template,
                instance,
                parts: instance._$parts,
                options: this.options,
                fragment,
                values,
            });
            this._commitNode(fragment);
            this._$committedValue = instance;
        }
    }
    // Overridden via `litHtmlPolyfillSupport` to provide platform support.
    /** @internal */
    _$getTemplate(result) {
        let template = templateCache.get(result.strings);
        if (template === undefined) {
            templateCache.set(result.strings, (template = new Template(result)));
        }
        return template;
    }
    _commitIterable(value) {
        // For an Iterable, we create a new InstancePart per item, then set its
        // value to the item. This is a little bit of overhead for every item in
        // an Iterable, but it lets us recurse easily and efficiently update Arrays
        // of TemplateResults that will be commonly returned from expressions like:
        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
        // If value is an array, then the previous render was of an
        // iterable and value will contain the ChildParts from the previous
        // render. If value is not an array, clear this part and make a new
        // array for ChildParts.
        if (!isArray(this._$committedValue)) {
            this._$committedValue = [];
            this._$clear();
        }
        // Lets us keep track of how many items we stamped so we can clear leftover
        // items from a previous render
        const itemParts = this._$committedValue;
        let partIndex = 0;
        let itemPart;
        for (const item of value) {
            if (partIndex === itemParts.length) {
                // If no existing part, create a new one
                // TODO (justinfagnani): test perf impact of always creating two parts
                // instead of sharing parts between nodes
                // https://github.com/lit/lit/issues/1266
                itemParts.push((itemPart = new ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options)));
            }
            else {
                // Reuse an existing part
                itemPart = itemParts[partIndex];
            }
            itemPart._$setValue(item);
            partIndex++;
        }
        if (partIndex < itemParts.length) {
            // itemParts always have end nodes
            this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex);
            // Truncate the parts array so _value reflects the current state
            itemParts.length = partIndex;
        }
    }
    /**
     * Removes the nodes contained within this Part from the DOM.
     *
     * @param start Start node to clear from, for clearing a subset of the part's
     *     DOM (used when truncating iterables)
     * @param from  When `start` is specified, the index within the iterable from
     *     which ChildParts are being removed, used for disconnecting directives in
     *     those Parts.
     *
     * @internal
     */
    _$clear(start = wrap(this._$startNode).nextSibling, from) {
        var _a;
        (_a = this._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(this, false, true, from);
        while (start && start !== this._$endNode) {
            const n = wrap(start).nextSibling;
            wrap(start).remove();
            start = n;
        }
    }
    /**
     * Implementation of RootPart's `isConnected`. Note that this metod
     * should only be called on `RootPart`s (the `ChildPart` returned from a
     * top-level `render()` call). It has no effect on non-root ChildParts.
     * @param isConnected Whether to set
     * @internal
     */
    setConnected(isConnected) {
        var _a;
        if (this._$parent === undefined) {
            this.__isConnected = isConnected;
            (_a = this._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(this, isConnected);
        }
        else if (DEV_MODE) {
            throw new Error('part.setConnected() may only be called on a ' +
                'RootPart returned from render().');
        }
    }
}
class AttributePart {
    constructor(element, name, strings, parent, options) {
        this.type = ATTRIBUTE_PART;
        /** @internal */
        this._$committedValue = nothing;
        /** @internal */
        this._$disconnectableChildren = undefined;
        this.element = element;
        this.name = name;
        this._$parent = parent;
        this.options = options;
        if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {
            this._$committedValue = new Array(strings.length - 1).fill(new String());
            this.strings = strings;
        }
        else {
            this._$committedValue = nothing;
        }
        if (ENABLE_EXTRA_SECURITY_HOOKS) {
            this._sanitizer = undefined;
        }
    }
    get tagName() {
        return this.element.tagName;
    }
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        return this._$parent._$isConnected;
    }
    /**
     * Sets the value of this part by resolving the value from possibly multiple
     * values and static strings and committing it to the DOM.
     * If this part is single-valued, `this._strings` will be undefined, and the
     * method will be called with a single value argument. If this part is
     * multi-value, `this._strings` will be defined, and the method is called
     * with the value array of the part's owning TemplateInstance, and an offset
     * into the value array from which the values should be read.
     * This method is overloaded this way to eliminate short-lived array slices
     * of the template instance values, and allow a fast-path for single-valued
     * parts.
     *
     * @param value The part value, or an array of values for multi-valued parts
     * @param valueIndex the index to start reading values from. `undefined` for
     *   single-valued parts
     * @param noCommit causes the part to not commit its value to the DOM. Used
     *   in hydration to prime attribute parts with their first-rendered value,
     *   but not set the attribute, and in SSR to no-op the DOM operation and
     *   capture the value for serialization.
     *
     * @internal
     */
    _$setValue(value, directiveParent = this, valueIndex, noCommit) {
        const strings = this.strings;
        // Whether any of the values has changed, for dirty-checking
        let change = false;
        if (strings === undefined) {
            // Single-value binding case
            value = resolveDirective(this, value, directiveParent, 0);
            change =
                !isPrimitive(value) ||
                    (value !== this._$committedValue && value !== noChange);
            if (change) {
                this._$committedValue = value;
            }
        }
        else {
            // Interpolation case
            const values = value;
            value = strings[0];
            let i, v;
            for (i = 0; i < strings.length - 1; i++) {
                v = resolveDirective(this, values[valueIndex + i], directiveParent, i);
                if (v === noChange) {
                    // If the user-provided value is `noChange`, use the previous value
                    v = this._$committedValue[i];
                }
                change || (change = !isPrimitive(v) || v !== this._$committedValue[i]);
                if (v === nothing) {
                    value = nothing;
                }
                else if (value !== nothing) {
                    value += (v !== null && v !== void 0 ? v : '') + strings[i + 1];
                }
                // We always record each value, even if one is `nothing`, for future
                // change detection.
                this._$committedValue[i] = v;
            }
        }
        if (change && !noCommit) {
            this._commitValue(value);
        }
    }
    /** @internal */
    _commitValue(value) {
        if (value === nothing) {
            wrap(this.element).removeAttribute(this.name);
        }
        else {
            if (ENABLE_EXTRA_SECURITY_HOOKS) {
                if (this._sanitizer === undefined) {
                    this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'attribute');
                }
                value = this._sanitizer(value !== null && value !== void 0 ? value : '');
            }
            debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
                kind: 'commit attribute',
                element: this.element,
                name: this.name,
                value,
                options: this.options,
            });
            wrap(this.element).setAttribute(this.name, (value !== null && value !== void 0 ? value : ''));
        }
    }
}
class PropertyPart extends AttributePart {
    constructor() {
        super(...arguments);
        this.type = PROPERTY_PART;
    }
    /** @internal */
    _commitValue(value) {
        if (ENABLE_EXTRA_SECURITY_HOOKS) {
            if (this._sanitizer === undefined) {
                this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'property');
            }
            value = this._sanitizer(value);
        }
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
            kind: 'commit property',
            element: this.element,
            name: this.name,
            value,
            options: this.options,
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.element[this.name] = value === nothing ? undefined : value;
    }
}
// Temporary workaround for https://crbug.com/993268
// Currently, any attribute starting with "on" is considered to be a
// TrustedScript source. Such boolean attributes must be set to the equivalent
// trusted emptyScript value.
const emptyStringForBooleanAttribute = trustedTypes
    ? trustedTypes.emptyScript
    : '';
class BooleanAttributePart extends AttributePart {
    constructor() {
        super(...arguments);
        this.type = BOOLEAN_ATTRIBUTE_PART;
    }
    /** @internal */
    _commitValue(value) {
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
            kind: 'commit boolean attribute',
            element: this.element,
            name: this.name,
            value: !!(value && value !== nothing),
            options: this.options,
        });
        if (value && value !== nothing) {
            wrap(this.element).setAttribute(this.name, emptyStringForBooleanAttribute);
        }
        else {
            wrap(this.element).removeAttribute(this.name);
        }
    }
}
class EventPart extends AttributePart {
    constructor(element, name, strings, parent, options) {
        super(element, name, strings, parent, options);
        this.type = EVENT_PART;
        if (DEV_MODE && this.strings !== undefined) {
            throw new Error(`A \`<${element.localName}>\` has a \`@${name}=...\` listener with ` +
                'invalid content. Event listeners in templates must have exactly ' +
                'one expression and no surrounding text.');
        }
    }
    // EventPart does not use the base _$setValue/_resolveValue implementation
    // since the dirty checking is more complex
    /** @internal */
    _$setValue(newListener, directiveParent = this) {
        var _a;
        newListener =
            (_a = resolveDirective(this, newListener, directiveParent, 0)) !== null && _a !== void 0 ? _a : nothing;
        if (newListener === noChange) {
            return;
        }
        const oldListener = this._$committedValue;
        // If the new value is nothing or any options change we have to remove the
        // part as a listener.
        const shouldRemoveListener = (newListener === nothing && oldListener !== nothing) ||
            newListener.capture !==
                oldListener.capture ||
            newListener.once !==
                oldListener.once ||
            newListener.passive !==
                oldListener.passive;
        // If the new value is not nothing and we removed the listener, we have
        // to add the part as a listener.
        const shouldAddListener = newListener !== nothing &&
            (oldListener === nothing || shouldRemoveListener);
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
            kind: 'commit event listener',
            element: this.element,
            name: this.name,
            value: newListener,
            options: this.options,
            removeListener: shouldRemoveListener,
            addListener: shouldAddListener,
            oldListener,
        });
        if (shouldRemoveListener) {
            this.element.removeEventListener(this.name, this, oldListener);
        }
        if (shouldAddListener) {
            // Beware: IE11 and Chrome 41 don't like using the listener as the
            // options object. Figure out how to deal w/ this in IE11 - maybe
            // patch addEventListener?
            this.element.addEventListener(this.name, this, newListener);
        }
        this._$committedValue = newListener;
    }
    handleEvent(event) {
        var _a, _b;
        if (typeof this._$committedValue === 'function') {
            this._$committedValue.call((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : this.element, event);
        }
        else {
            this._$committedValue.handleEvent(event);
        }
    }
}
class ElementPart {
    constructor(element, parent, options) {
        this.element = element;
        this.type = ELEMENT_PART;
        /** @internal */
        this._$disconnectableChildren = undefined;
        this._$parent = parent;
        this.options = options;
    }
    // See comment in Disconnectable interface for why this is a getter
    get _$isConnected() {
        return this._$parent._$isConnected;
    }
    _$setValue(value) {
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
            kind: 'commit to element binding',
            element: this.element,
            value,
            options: this.options,
        });
        resolveDirective(this, value);
    }
}
/**
 * END USERS SHOULD NOT RELY ON THIS OBJECT.
 *
 * Private exports for use by other Lit packages, not intended for use by
 * external users.
 *
 * We currently do not make a mangled rollup build of the lit-ssr code. In order
 * to keep a number of (otherwise private) top-level exports  mangled in the
 * client side code, we export a _$LH object containing those members (or
 * helper methods for accessing private fields of those members), and then
 * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the
 * client-side code is being used in `dev` mode or `prod` mode.
 *
 * This has a unique name, to disambiguate it from private exports in
 * lit-element, which re-exports all of lit-html.
 *
 * @private
 */
const _$LH = {
    // Used in lit-ssr
    _boundAttributeSuffix: boundAttributeSuffix,
    _marker: marker,
    _markerMatch: markerMatch,
    _HTML_RESULT: HTML_RESULT,
    _getTemplateHtml: getTemplateHtml,
    // Used in tests and private-ssr-support
    _TemplateInstance: TemplateInstance,
    _isIterable: isIterable,
    _resolveDirective: resolveDirective,
    _ChildPart: ChildPart,
    _AttributePart: AttributePart,
    _BooleanAttributePart: BooleanAttributePart,
    _EventPart: EventPart,
    _PropertyPart: PropertyPart,
    _ElementPart: ElementPart,
};
// Apply polyfills if available
const polyfillSupport = DEV_MODE
    ? global.litHtmlPolyfillSupportDevMode
    : global.litHtmlPolyfillSupport;
polyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport(Template, ChildPart);
// IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for lit-html usage.
((_d = global.litHtmlVersions) !== null && _d !== void 0 ? _d : (global.litHtmlVersions = [])).push('2.8.0');
if (DEV_MODE && global.litHtmlVersions.length > 1) {
    issueWarning('multiple-versions', `Multiple versions of Lit loaded. ` +
        `Loading multiple versions is not recommended.`);
}
/**
 * Renders a value, usually a lit-html TemplateResult, to the container.
 *
 * This example renders the text "Hello, Zoe!" inside a paragraph tag, appending
 * it to the container `document.body`.
 *
 * ```js
 * import {html, render} from 'lit';
 *
 * const name = "Zoe";
 * render(html`<p>Hello, ${name}!</p>`, document.body);
 * ```
 *
 * @param value Any [renderable
 *   value](https://lit.dev/docs/templates/expressions/#child-expressions),
 *   typically a {@linkcode TemplateResult} created by evaluating a template tag
 *   like {@linkcode html} or {@linkcode svg}.
 * @param container A DOM container to render to. The first render will append
 *   the rendered value to the container, and subsequent renders will
 *   efficiently update the rendered value if the same result type was
 *   previously rendered there.
 * @param options See {@linkcode RenderOptions} for options documentation.
 * @see
 * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}
 */
const render = (value, container, options) => {
    var _a, _b;
    if (DEV_MODE && container == null) {
        // Give a clearer error message than
        //     Uncaught TypeError: Cannot read properties of null (reading
        //     '_$litPart$')
        // which reads like an internal Lit error.
        throw new TypeError(`The container to render into may not be ${container}`);
    }
    const renderId = DEV_MODE ? debugLogRenderId++ : 0;
    const partOwnerNode = (_a = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _a !== void 0 ? _a : container;
    // This property needs to remain unminified.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let part = partOwnerNode['_$litPart$'];
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: 'begin render',
        id: renderId,
        value,
        container,
        options,
        part,
    });
    if (part === undefined) {
        const endNode = (_b = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _b !== void 0 ? _b : null;
        // This property needs to remain unminified.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        partOwnerNode['_$litPart$'] = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, undefined, options !== null && options !== void 0 ? options : {});
    }
    part._$setValue(value);
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: 'end render',
        id: renderId,
        value,
        container,
        options,
        part,
    });
    return part;
};
if (ENABLE_EXTRA_SECURITY_HOOKS) {
    render.setSanitizer = setSanitizer;
    render.createSanitizer = createSanitizer;
    if (DEV_MODE) {
        render._testOnlyClearSanitizerFactoryDoNotCallOrElse =
            _testOnlyClearSanitizerFactoryDoNotCallOrElse;
    }
}
//# sourceMappingURL=lit-html.js.map

/***/ }),

/***/ "./public/node_modules/lit/directives/class-map.js":
/*!*********************************************************!*\
  !*** ./public/node_modules/lit/directives/class-map.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   classMap: () => (/* reexport safe */ lit_html_directives_class_map_js__WEBPACK_IMPORTED_MODULE_0__.classMap)
/* harmony export */ });
/* harmony import */ var lit_html_directives_class_map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit-html/directives/class-map.js */ "./public/node_modules/lit-html/development/directives/class-map.js");

//# sourceMappingURL=class-map.js.map


/***/ }),

/***/ "./public/node_modules/lit/directives/if-defined.js":
/*!**********************************************************!*\
  !*** ./public/node_modules/lit/directives/if-defined.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ifDefined: () => (/* reexport safe */ lit_html_directives_if_defined_js__WEBPACK_IMPORTED_MODULE_0__.ifDefined)
/* harmony export */ });
/* harmony import */ var lit_html_directives_if_defined_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit-html/directives/if-defined.js */ "./public/node_modules/lit-html/development/directives/if-defined.js");

//# sourceMappingURL=if-defined.js.map


/***/ }),

/***/ "./public/node_modules/lit/directives/style-map.js":
/*!*********************************************************!*\
  !*** ./public/node_modules/lit/directives/style-map.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   styleMap: () => (/* reexport safe */ lit_html_directives_style_map_js__WEBPACK_IMPORTED_MODULE_0__.styleMap)
/* harmony export */ });
/* harmony import */ var lit_html_directives_style_map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lit-html/directives/style-map.js */ "./public/node_modules/lit-html/development/directives/style-map.js");

//# sourceMappingURL=style-map.js.map


/***/ }),

/***/ "./public/node_modules/lit/index.js":
/*!******************************************!*\
  !*** ./public/node_modules/lit/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSResult: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.CSSResult),
/* harmony export */   LitElement: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.LitElement),
/* harmony export */   ReactiveElement: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.ReactiveElement),
/* harmony export */   UpdatingElement: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.UpdatingElement),
/* harmony export */   _$LE: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__._$LE),
/* harmony export */   _$LH: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__._$LH),
/* harmony export */   adoptStyles: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.adoptStyles),
/* harmony export */   css: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.css),
/* harmony export */   defaultConverter: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.defaultConverter),
/* harmony export */   getCompatibleStyle: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.getCompatibleStyle),
/* harmony export */   html: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.html),
/* harmony export */   isServer: () => (/* reexport safe */ lit_html_is_server_js__WEBPACK_IMPORTED_MODULE_3__.isServer),
/* harmony export */   noChange: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.noChange),
/* harmony export */   notEqual: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.notEqual),
/* harmony export */   nothing: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.nothing),
/* harmony export */   render: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.render),
/* harmony export */   supportsAdoptingStyleSheets: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.supportsAdoptingStyleSheets),
/* harmony export */   svg: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.svg),
/* harmony export */   unsafeCSS: () => (/* reexport safe */ lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__.unsafeCSS)
/* harmony export */ });
/* harmony import */ var _lit_reactive_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lit/reactive-element */ "./public/node_modules/@lit/reactive-element/development/reactive-element.js");
/* harmony import */ var lit_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lit-html */ "./public/node_modules/lit-html/development/lit-html.js");
/* harmony import */ var lit_element_lit_element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lit-element/lit-element.js */ "./public/node_modules/lit-element/development/lit-element.js");
/* harmony import */ var lit_html_is_server_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lit-html/is-server.js */ "./public/node_modules/lit-html/development/is-server.js");

//# sourceMappingURL=index.js.map


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*************************!*\
  !*** ./public/index.js ***!
  \*************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ucd_lib_cork_app_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ucd-lib/cork-app-utils */ "./public/node_modules/@ucd-lib/cork-app-utils/index.js");
/* harmony import */ var _elements_fin_app_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./elements/fin-app.js */ "./public/elements/fin-app.js");
/* harmony import */ var _lib_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/index.js */ "./public/lib/index.js");
/* harmony import */ var _lib_index_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_lib_index_js__WEBPACK_IMPORTED_MODULE_2__);




})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,