* Aggie Experts Elasticsearch documents

  Aggie Experts elastic search documents are the JSON documents that are stored
  within elasticsearch, and which are the standard documents searched in aggie
  experts.  These differ from their LDP counterparts in that they include more
  information then a single LDP node. For example a person's document includes
  detailed information about the citations they have authored, not just a link
  to the work.

  Elastic search documents are managed incrementally, with updates happening
  when relevant documents are added to or changed on the LDP.

  This document describes overall basic format of the elastic search documents;
  various important identifiers, and types.  Then the representation of each
  type are described in more detail.

  Finally, the workflow for how nodes are combined into the elasticsearch
  document via our updating methodology is described.

** Basic format

   All elastic search documents contain a ~@graph~ list of objects that would
   form a valid jsonld if combined with the proper ~@context~ that simplifies
   the names of the properties of the file. The JSON-LD data is framed so that
   some minor objects are embedded into larger objects.  Informally, we call these
   larger objects nodes.  In the elastic search document, all ~nodes~ are are
   stored in the ~@graph~.  Nodes have their own ~@ids~ and ~@types~, the ~@ids~
   describe the same object, though they have different amounts of specificity
   based on the document they are in.  Any additional information outside the
   ~@graph~ is not expected to be often searched by an regular user of the site.

   One main reason the data is organized this way, is that we used *nested*
   indices in elastic search, where each node in the ~@graph~ is searched as
   it's own entity, though hits respond with the complete document.

   Here is an example of a typical document:
   #+begin_src json
     {
         "@context":"https://schema.library.ucdavis.edu/context/experts.json",
         "_id":"expert/quinn",
         "@id":"http://experts.ucdavis.edu/expert/quinn",
         "@graph":[
             { "@id":"http://experts.ucdavis.edu/expert/quinn",
               "@type":["Expert", "Non-acedemic"],
               "identifiers" : [ "https://orcid.org/XXX" ],
               "is-visible": true,
               "contactInfo": {
                   "name" : {"family": "Hart"
                             "given": "Quinn" }
               }
             },
             { "@id":"ark:/.../work/evap",
               "@type":["Work"],
               "favorite": true,
               "title":"Evapotranspiration in California",
               "container-title": "California Agriculture"
               "authors": [{"family":"Muir","given":"John"},
                           {"family":"Hart","given":"QJ"}],
               "relatedBy": {
                 "@type": [
                   "Authorship",
                 ],
                 "rank": 3,
                 "@id": "ark:/...",
                 "is-visible": true
               },
             },
             { "@id":"ark:/..../grant/CA-water",
               "@type":["Grant"],
               "title":"Evapotranspiration Grant"
               "relatedBy": {
                 "@type": [
                   "Principal Investigator",
                 ],
                 "@id": "ark:.../",
                 "is-visible": true
               },
             }
         ]
     }
   #+end_src

   The node in the graph that shares the "@id" with the document we call the
   root node.  Root nodes can be of ~@type~, ~Expert~, ~Work~, ~Grant~, and
   ~Relationship~.  ~Relationships~ are documents in the index, but not often
   surfaced to a user, although they are combined with other nodes in other
   documents.

   Root nodes are the JSON-LD representation of the corresponding LDP node for
   that particular type.  Other nodes are added to the document on LDP events.
   For example, in the above example, the original ~Expert~ document, was
   decorated with a node corresponding to one ~Work~ and one ~Grant~ that were
   also added to the system, and connected to the user via ~Relationships~.

*** Identifiers

    In addition to ~@ids~, nodes can also have an ~identifier~ property.  In
  linked data this is a ~schema:identifier~ property.  All ~@id~s and
  ~identifier~s should all be standardized to a known cataloging system.  URNs,
  URIs and other labeled schemes eg ~ark:~s and ~DOI~s are good examples.  An
  identifier should uniquely identify the node.

  All identifiers are public, though they don't need to resolve to public URLs.

    A note on identifiers: Whenever we need to reference an identifier that was
  generated in another system, and that system doesn't have a methodology for
  uniqueness, our default setup is to mint and ark: for that particular system.
  This allows us to identify each individual system, and then use ark: paths to
  identify individual items.  Typically, we make a new ark for each system.
  Some examples are:

  | ark:              | system           | example                                     | see         |
  |-------------------+------------------+---------------------------------------------+-------------|
  | ark:/87287/d7mh2m | CDL Elements     | ark:/87287/d7mh2m/user/[number]             | [[*Identifiers][Identifiers]] |
  | ark:/87287/d7gt0q | DAFIS Grants     | ark:/87287/d7gt0q/grant/[number]            | [[*Identifiers][Identifiers]] |
  | ark:/87287/d7c08j | Aggie Enterprise | ark:/87287/d7c08j/grant/[id]                | [[*Identifiers][Identifiers]] |
  | ark:/87287/d7c08j | Aggie Enterprise | ark:/87287/d7c08j/user/md5(employeeId/[id]) |             |
  | ark:/87287/d7c08j | Aggie Enterprise | ark:/87287/d7c08j/rems/[id]                 |             |



  ~ark:/87287/d7mh2m~ arks are for UC Davis CDL Elements; and the suffix scheme
  to identify CDL components, uses the standard API endpoints for inspiration on
  the names.  For example, although we identify a expert, the elements API uses
  the term ~user~.  So the CDL specific identifier for Quinn Hart will be
  ~ark:/87287/d7mh2m/user/42956~.

  ~ark:/87287/d7gt0q~ identify grants archived from UC Davis' old grants
  information system

  ~ark:/87287/d7c08j~ identify grants, users and potentially  other objects in
  the new UC Davis Aggie Enterprise system.

*** Types

    The ~@types~: ~Expert~, ~Work~, ~Grant~, and ~Relationship~ are the main
    types. ~Relationships~ are further broken down.

*** JSON-LD

    Nodes can describe experts, works, or grants.  Some of the properties
    overlap, and others are only used by a single type.  The context creates
    properties without prefixes.  Properties also identify whether they are a
    URN, or a literal, and their ~xsd:type~, as well where appropriate.

    Properties that are experimental retain a prefix in their name to help
    separate them from the production properties.

**** Context

     The "official" context will be found at
     http://schema.library.ucdavis.edu/experts/context.json.

     The example below may not be the most current version,


**** Frame

     Every document uses the same frame as well.  The frame mostly controls what
     types are made the root type.  The "official" frame will be found at
     http://schema.library.ucdavis.edu/experts/frame.json.

     Below is a recent frame.  The contactInfo has special @embedding so that
     names are replicated accross multiple vcards.

     #+name: experts_frame
     #+begin_src json
       {
           "@version": 1.1,
           "@context":"https://schema.library.ucdavis.edu/experts/context.json",
           "contactInfo": {
               "@embed":"@always",
               "@omitDefault":true,
               "@default":"@null" },
           "@embed": "@always",
           "@type": ["Expert","Work","Grant","Relationship","Authorship"]
       }
     #+end_src

** Specfic Types
*** Expert
**** Identifiers

  Expected identifiers for expert include:

  *eduroam* - In Aggie Experts, we use one-direction hash function of a users'
  eduroam identifier as our default identifier.  This allows agents that know a
  users' eduroam identifier to discover the user, but does not show a users
  eduroam identifier.  At UCDavis, users' eduroam identifiers are their userID
  (or casID) suffixed with ~@ucdavis.edu~.  Notionally, a user is identified as
  ~"http://experts.ucdavis.edu/expert/" + md5(userId + "@ucdavis.edu")~

  *ORCID* - We use the standard URI for this, eg:
  `https://orcid.org/0000-0001-9829-8914` Note that ORCID uses https: as their
  identifier of choice.

  *UC Davis Aggie Enterprise*: Aggie Enterprise uses UC Path identifiers for
  users. We use a one-dimensional function to map this to a public identifier.
  This allows agents with knowledge of a users' Aggie Enterprise identifier to
  find that user, but disallows public discovery of a users' identifier.

  *CDL ARK* - use `ark:/87287/d7mh2m/user/[number]` as in
  `ark:/87287/d7mh2m/user/42956` We will mint a new ark: everytime numbering
  changes

  *mailto* - If email is public via ODR, we will add campus emails as in
  ~mailto:qjhart@ucdavis.edu~

  Other identifiers, https://www.webofscience.com/wos/author/record/M-4572-2018,
  http://www.scopus.com/authid/detail.url?authorId=6506365550 are *TBD*

***** Referential Identifiers

   *Aggie Enterprise* - The grants information from the Aggie Enterprise system
   references UC Davis users via their UC Path employeeId.  In private experts
   databases, these values are hashed with ~md5()~.  They are discouraged in public
   databases.

**** Example

  #+begin_src json
    {
  "@context" : "http://schema.library.ucdavis.edu/context/aggie_experts.json",
  "_id" : "expert/66356b7eec24c51f01e757af2b27ebb8",
  "@id" : "expert/66356b7eec24c51f01e757af2b27ebb8",
  "@graph":[
  {
    "@id" : "expert/66356b7eec24c51f01e757af2b27ebb8",
    "identifier": [
       "https://orcid.org/0000-0001-9829-8914",
       "ark:/87287/d7mh2m/user/42956",
       "mailto:qjhart@ucdavis.edu",
       "http://experts.ucdavis.edu/expert/66356b7eec24c51f01e757af2b27ebb8"
    ]
  }]
  }
  #+end_src

*** Work
    Works specify scholarly research.  The focus of this is currently on
    citations.

**** Identifiers
  Works can have `DOIs` and the CDL element `ark:` DOIs are case insenstive, but
  should be in upper-case in the identifier property.  If a work has a DOI, we
  will use that as the `@id` in Aggie Experts, if it doesn't then we'll use the
  CDL `ark` identifier.

**** Example

  An example of a work is shown below:

  #+begin_src json
  {
  "@context" : "http://schema.library.ucdavis.edu/context/aggie_experts.json",
  "@id" : "/work/DOI:10.1080/10286600802003500",
  "@graph":[
  {
    "@id" : "http://experts.ucdavis.edu//work/DOI:10.1080/10286600802003500",
    "identifier": [
       "ark:/87287/d7mh2m/publication/1442289",
       "DOI:10.1080/10286600802003500"
    ]
  }]
  }
  #+end_src

*** Grant

  Grants come from 3 distinct locations.  We have grant information that was
  generated from the DAFIS decision support queries; Grants from the Aggie
  Enterprise system, and grants that come from the CDL elements system.  Note
  that it's expected that grants generated from DAFIS and Aggie Enterprise will
  also be referenced in the CDL elements, so they will have two identifiers.  In
  that case, the

**** Identifiers

  *DAFIS* - Use ~ark:/87287/d7gt0q~ as the base for grants that were recovered
  from the DAFIS system via the purpose built SQL query.  We add ~grant/~ plus
  the DAFIS local grant number for the identifier,
  eg. ~ark:/87287/d7gt0q/grant/1~

  *Aggie Enterprise* - Use ~ark:/87287/d7c08j~ for grants from the Aggie
  Enterprise system. Add ~grant/[id]~ as the path, as in:
  ~ark:/87287/d7c08j/grant/K337D88~

  *CDL Elements* - Use ~ark:/87287/d7mh2m/grant/[number]~ to reference CDL
  Elements identifiers.  Some, but not all CDL Elements grants will use either
  of the above identifiers as their local ids.


** ~is-visible~ and Sanitization

   Note in the above examples, that ~nodes~ or the ~relatedBy~ component of a
   node have an ~is-visible~ property.  The documents in the system can also
   have nodes where the ~is-visible: false~.  These are nodes not available to
   the public, but are available to admins, some elevated applications and the
   expert that the document describes.  These nodes are removed during a
   sanitization step when users access the system via the API.
   Every record is santizied before it's delivered to the
   user. The advantage for this is that elevated users will be able to see the
   hidden data with a low overhead on the system, and a more consistent
   experience with our experts.

*** Node Removal for Experts

    A normal expert has a ~@graph~ of data, each node can be a Work, a Grant or
    an Expert.  There is only ever one Expert.  Work and Grants include their
    relationship with the Expert in the ~vivo:relatedBy~ field.  Individual Works
    and Grants may have an ~is-visible~ boolean value.  In addtion, the relation
    itself as defined may have an ~is-visible~ value. (Actually is *always*
    should have one.

    If either of these flags are ~false~ then, the node is removed from the
    ~@graph~ during the sanitization.  Note in the examples below, Grants
    themselves don't have an  ~is-visible~ flag to be checked, but Works and
    Experts do.

    #+begin_src json
      {
        "@id": "expert/66356b7eec24c51f01e757af2b27ebb8",
        "@graph": [
          {
          "@id": "expert/66356b7eec24c51f01e757af2b27ebb8",
          "@type": [
            "vivo:Person",
            "Expert",
            "NonAcademic"
          ],
          "orcidId": "0000-0001-9829-8914",
          "is-visible": true
        },
          {
          "@type": [ "Grant" ],
          "totalAwardAmount": "783000",
          "name": "NEAR REAL TIME SCIENCE PROCESSING ALGORITHM FOR LIVE FUEL MOISTURE CONTENT FOR THE MODIS DIRECT READOUT SYSTEM",
          "@id": "ark:/87287/d7mh2m/grant/4316321",
          "relatedBy": {
            "relates": [
              "expert/66356b7eec24c51f01e757af2b27ebb8",
              "ark:/87287/d7mh2m/grant/4316321"
            ],
            "@type": "GrantRole",
            "@id": "ark:/87287/d7mh2m/relationship/13338362",
            "is-visible": true
          }
        },
          {
        "@id": "ark:/87287/d7mh2m/publication/1875203",
        "@type": "Work",
        "is-visible": true,
        "title": "Impact of biases in gridded weather datasets on biomass estimates of short rotation woody cropping systems",
        "DOI": "10.1016/j.agrformet.2016.11.008"
        "relatedBy": {
          "relates": [
            "expert/66356b7eec24c51f01e757af2b27ebb8",
            "ark:/87287/d7mh2m/publication/1875203"
          ],
          "@type": [
            "Authorship",
            "ucdlib:Authorship"
          ],
          "rank": 3,
          "@id": "ark:/87287/d7mh2m/relationship/5921819",
          "is-visible": true
        }
      }
        ]
      }
    #+end_src

*** Grant Sanitization

    In addition to grant visibility, we are currently sanitizing Award amounts
    from the grant system.  The items that are removed are ~totalAwardAmount~.


** Document Updates

   As described above, elasticsarch documents are incrementally updated when new
   records are added to the system.  Events include; insertions, updates, and
   deletions.  In addition, the generation of the documents is not sensitive to
   the order in which records are added to the LDP.  For example, it does not
   matter the order of adding a expert, relationship and work to the system.
   When all three are added, the Expert's record will include reference to the
   authored work, and the Work record will include

*** Helpful endpoints

   Aggie Experts includes methods to access particular document information.

**** Services

***** Transform

      The transform service provides access to the root node for any valid type
      with in the Aggie Experts system.  For example
      [[http://localhost/fcrepo/rest/expert/66356b7eec24c51f01e757af2b27ebb8/svc:node][/expert/66356b7eec24c51f01e757af2b27ebb8/svc:node]] responds with the root
      node for Quinn Hart.  These nodes are the direct transform of the LDP node
      corresponding to the
      http://localhost/fcrepo/rest/expert/66356b7eec24c51f01e757af2b27ebb8
      location.


***** Experts API

      The API endpoint provides access to the complete elastic search records.
      Elastic search documents include the root node, as well as nodes that are
      added when supporting documents are added to the LDP. For example,
      [[http://localhost/api/experts/expert/66356b7eec24c51f01e757af2b27ebb8][/api/experts/expert/66356b7eec24c51f01e757af2b27ebb8]] provides access to a
      complete record for qjhart@ucdavis.edu


      #+begin_src bash
        doc=http://localhost/api/experts/expert/66356b7eec24c51f01e757af2b27ebb8
        http $doc | jq '._source["@graph"][]["@id"]'
      #+end_src
