* Development stages and associated best practices

** Stages
The following table shows the various stages for development for Aggie Experts,
and some associated pointers.

|---------+------------+--------+----------+------------------+------------------------------------|
| stage   | role       | branch | tag      | dns              | docker org/tag                     |
|---------+------------+--------+----------+------------------+------------------------------------|
| dev     | dev        | *any*  | *dirty*  | localhost        | localhost/aggie-experts:dirty      |
| clean   | dev        | *any*  | *clean*  | localhost        | localhost/aggie-experts:*tag*      |
| sandbox | dev/deploy | *any*  | *clean*  | sandbox          | localhost/aggie-experts:*tag*      |
| test    | deploy     | dev    | 1.??-dev | test (blue/gold) | gcr.io/aggie-experts:*dev-tag*     |
| prod    | deploy     | main   | 2.?.?    | rc2  (blue/gold) | gcr.io/aggie-experts:*version-tag* |
|---------+------------+--------+----------+------------------+------------------------------------|

Tags are very important in the development process.  Aggie Experts tags are almost
always based on the following git command ~tag="$(git describe --always
--dirty)"~.  See the docs for more information, but with the exception of ~dev~
stage, tags *always* refer to a specific commit.  test and production stages
need to be set to a specific annotated tag.

The important caveat to this, is that when you are in ~dev~ stage, the tag is
always simply ~dirty~.  This primarily simplifies the development steps, as the
tag is never changing.  ~dev~ is the only stage that ever allows a ~dirty~ tag.

*** dev
Developers typically develop in the ~dev~ stage.  Every aggie expert image is
built locally on their machines, and they have the freedom to bind mount various
directories over containers for quicker testing.  Every build will continously
overwrite the localhost/aggie-experts/??:dirty images.

In terms of git, users should *never* be developing on the ~dev~ branch.  They
should always be working on a branch specific to the issue(s) they are working
on.  Because of this, developers are encouraged to push as often as they'd like
to github.  Not all commits need to have great commit messages either.  However,
if a developer has made 10 local commits, it's not a terrible idea to rebase
these into a single commit before pushing.  But don't worry too much about that,
and avoid any rebasing that affects the pushed commits, it can be troublesome.

*** clean
In the clean stage, developers build their image on a clean git repository, and
build/deploy a specific tagged image to application.  Bind mounts are *never*
allowed on ~clean~ deploy.  This means that developers typically need to setup
their environment, for ~clean~ testing.

Every pull request should be tested in the ~clean~ environment before being move
from draft for review.

#+begin_src bash
  aggie-experts --env=clean setup build
#+end_src

Note, that it is possible to create an image that can't be replicated, for
example you might include a file in your builds that you never bother to commit.
Because of this the ~aggie-experts~ script will complain if you have unstaged
files. This should encourage you to keep your repository tidy, but you can skip
that error with the ~--unstaged-ok~ flag to ~aggie-experts~.

#+begin_src bash
  aggie-experts --unstaged-ok --env=clean setup build
#+end_src

*** sandbox
The sandbox stage allows any clean commit to be built and deployed on
sandbox.experts.library.ucdavis.edu.  The images are built locally on sandbox,
both to test the build and to prevent images that are not expected to be
deployed to be added to the aggie-experts container repository.

If you are replacing an existing data instance that's running on sandbox, you
can use:

#+begin_src bash
  num=[existing_number]
  cd /etc/aggie-experts/s${num}
  git checkout [branch or commit ]
  bin/aggie-experts --env=sandbox build setup
  dc down
  dc up -d
#+end_src

If you are creating a new data instance, then the path is more like:

#+begin_src bash
  num=[next_number]
  cd /etc/aggie-experts/
  git clone --branch=[branch] s{$num}
  git reset --hard ${commit} # Only if you are testing a commit not on a branch head
  cd s${num}
  bin/aggie-experts --env=clean build setup
  dc up -d
  # Now populate your instance
  # Then
  dc down
  aggie-experts --env=sandbox setup
  dc up -d
#+end_src

*** build
You use the ~build~ environment to build and push new docker instances to the
registry in preparation of using them on a new ~test~ or ~prod~ environment.
Builds can currently take place anywhere.  A typical example is:

#+begin_src bash
  git checkout dev
  git pull
  aggie-experts --env=build build push
#+end_src

~aggie-experts~ will complain if the checked out commit does not correspond to
an annotated tag.

*** test
The ~test~ environment is only run on ~(blue|gold).experts.library.ucdavis.edu~
and only uses images that are pulled from the registry.

If you are updating an existing dataset instance:
#+begin_src bash
  num=[existing_number]
  tag=[version to run]
  cd /etc/aggie-experts/v${num}
  git checkout tag
  bin/aggie-experts --env=test setup
  dc down
  dc up -d
#+end_src

If you are creating a new dataset environment, then

#+begin_src bash
  num=[next_number]
  tag=[version to run]
  cd /etc/aggie-experts/
  git clone --branch=$tag v${num}
  cd v${num}
  ../bin/aggie-experts --env=test setup
  dc up -d
  # Now populate your instance
#+end_src

*** production

** Initialization Buckets

When any system starts up, it will initialize using a given GCS bucket.  Much of
the development can depend on the data within the these buckets, for in every
development phase, developers are encouraged to create their own buckets, and
alter those components.  Buckets should have the ~fcrepo-~ prefix, and be tagged
as ~fcrepo~ as well.

|---------+-------+----------------|
| stage   | alter | gcs bucket     |
|---------+-------+----------------|
| dev     | Y     | fcrepo-mini    |
| clean   | Y     | fcrepo-mini    |
| sandbox | Y     | fcrepo-sandbox |
| test    | N     | fcrepo-test    |
| prod    | N     | fcrepo-prod    |
|---------+-------+----------------|

** Authorization

Except under extraordinary circumstances, developers will always use the
authorization server at sandbox.auth.library.ucdavis.edu, and test and
production instances will use auth.library.ucdavis.edu.  It's important to
understand that the client is different between dev/clean and sandbox.  This is
why they require different secrets in their setup.

|---------+-------------+----------------------------------|
| stage   | auth-client | auth-server                      |
|---------+-------------+----------------------------------|
| dev     | local-dev   | sandbox.auth.library.ucdavis.edu |
| clean   | local-dev   | sandbox.auth.library.ucdavis.edu |
| sandbox | sandbox     | sandbox.auth.library.ucdavis.edu |
| test    | experts     | auth.library.ucdavis.edu         |
| prod    | experts     | auth.library.ucdavis.edu         |
|---------+-------------+----------------------------------|

* TODO aggie-experts command-line utility
