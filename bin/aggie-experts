#!/usr/bin/env bash

: <<=cut
=pod

=head1  NAME

aggie-experts - Manage Aggie Experts code development, docker images, and deployment.

=head1 SYNOPSIS

aggie-experts [-n|--dry-run] [--env=<env>] [--mount]  <command> <command> ...

where <env> is one of dev, clean, sandbox, gcb, test, prod; default is guessed
using guess-env, fails if multiple matches are possible.

where <command> is one of: build, prune, setup, config, list-mounts, test_env,
guess-env

lesser used <command> include: compose, env, config

=head1 DESCRIPTION

aggie-experts manages development, build and deployment processes for Aggie
   Experts.  It tries to simplify the developers tasks based on the environment
   choosen.

=head1 GLOBAL OPTIONS

=over 4

=item B<--env=I<env>>

Set the environment, one of dev, clean, sandbox, gcb, test, prod, where dev is the
default.

Developers develop their code in the test environment, verify the setup in the
clean environment, and then submit their pull requests.  The sandbox environment
can deploy any commit in a space for multiple reviewers.

The gcb environment uses cloud build and to build these images to the aggie-experts
docker repository.

The test and prod environments are for the production code.  They require
specific tags, and deploy only from images pushed to the aggie-experts
repository.

=item B<--mount=I<api,spa,models,init>>

In the dev environment, you can specify which bind mounts you want to use.  This
allows developers to work on the code without having to rebuild the docker
images.  The default is to mount all three.

Bind mounts can lead to problems if the developer fails to run npm install in
the bounded mounts.

=item B<-n|--dry-run>

Show what you would do do not really do it. Because some commands require
multiple access to the server, this command does not always work properly.

=item B<--gcs=I<bucket>>

Specify the Google Cloud Storage bucket to use for initialization.  This sets
the C<GCS_BUCKET> parameter in the environment.

=item B<--unstaged-ok>

Will build a C<clean>) environment even if there are unstaged changes in the
repository.  This usually means files that are not tracked by git.

=item B<--list-mounts>

List the bind mounts that are used in the dev environment.  Used with the
C<setup> command.

=item B<--no-env> B<--no-service-account> B<--no-compose>

When running C<setup> do not create the environment, service account, or
docker-compose.yml file, dpepending on the flag.

=item B<--cloudsdk-active-config-name=I<name>>

Specify the name of the gcloud configuration to use.  This is used to set the
configuration for the duration of the command. Set to the empty string to use
the default configuration.  Default is C<aggie-experts>.

=item B<-h|--help>

Shows the manpage for the program. The help pages are embedded in the script and
require the functions, C<pod2usage> and C<pod2text> to work properly.

=back

=cut

# These Global Variables are the defaults values for the current setup.
declare -g -A G=(
  [project]="aggie-experts"
  [config]="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/../config.json"
  [jq]="."
  # Below you probably don't need to change
  [base]="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/.."
  [shell_getopt]=${FLAGS_GETOPT_CMD:-getopt}
  [git]="git -C $( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
  [dry-run]=""
  [test_env]=1
  [cloudsdk_active_config_name]='aggie-experts'
);

function G() {
  if [[ -z ${G[expanded]} ]] ; then
    G[expanded]=$(expand < ${G[config]} | jq ${G[jq]})
  fi
  jq -r "$*" <<<"${G[expanded]}"
}

: <<'=cut'
=pod

=head1 COMMANDS

There are number of commands to manage the development, build and deployment of
Aggie Experts. The typical workflow is; develop your code in the C<dev>
environment, verify the setup in the C<clean> environment, and then submit your
pull requests.  The C<sandbox> environment can deploy any commit in a space for
multiple reviewers.  Once the code is ready for production, it is built in the
C<gcb> environment, and then deployed to the C<test> and C<prod> environments.

C<aggie-experts [--env=dev|clean|sandbox|gcb] build> Builds the docker
images.  Builds to C<org=localhost> images in dev,clean, and sandbox
environments.  Cloud build in C<org=gcr.io./aggie-experts> images in the gcb environment.

C<aggie-experts [--env=dev|clean|sandbox|test|prod] setup> Sets up the C<.env>
and C<docker-compose.yaml> files for the specified environment.

C<aggie-experts [--list-mounts] [--mount=mnt,mnt,..] [--env=dev] setup> When
in the C<dev> environment, you have the option of setting up bind mounts for the
C<spa>, C<models>, and C<init> directories.  This allows you to work on the code
without having to rebuild the docker images.

The --list-mounts option will list the available bind mounts.

There are some commands that are used to manage the environment, and are not
used in the main workflow.

C<aggie-experts [--env=any] test-env> Lets the developer test their
environment, primarily with respect to the git branch and status.

C<aggie-experts [--env=any] guess-env> Shows what environments are available
in the current host and git configuation.  If multiple environments are available, the developer must explicitly specify the environment C<--env=I<env>>.

C<aggie-experts [--env=any] prune> Prunes aggie-experts images from the local
docker setup, based on the environment, and the git repository status.  This can
be used to clean up the local docker environment.

=head1 ADDITIONAL COMMANDS

=cut

: <<'=cut'
=pod

=head2 guess-env

Guess the environment based on the hostname and git tag

=cut
function guess-env() {
  local this_server, envs, tag
  this_server=$(hostname --fqdn)
  envs=()
  tag=$(${G[git]} describe --always --dirty)

  for e in $(G '.keys[]' ); do
    local env_server
    env_server=$(G ".${e}.server")
    if [[ "$env_server" = "null" ]]; then
      continue
    fi
     if [[ "$env_server" =~ ^! ]]; then
      env_server=${env_server#!}
      if ! [[ "$this_server" =~ $env_server ]]; then
        envs+=("$e")
      fi
    else
      if [[ "$this_server" =~ $env_server ]]; then
        envs+=("$e")
      fi
    fi
  done

  # If only one match, return that, otherwise try describe
  local d_envs=()
  for e in "${envs[@]}"; do
    case $e in
      dev)
        d_envs+=("$e")
        ;;
      clean|sandbox)
        if ! [[ "$tag" =~ "dirty" ]]; then
          d_envs+=("$e")
        fi
        ;;
      gcb | prev | stage | prod)
        if ! [[ "$tag" =~ "-" ]]; then
          d_envs+=("$e")
        fi
        ;;
    esac
  done
  if [[ ${#d_envs[@]} == 1 ]]; then
    echo "${d_envs[0]}"
  else
    echo "${d_envs[@]}"
    exit 1;
  fi
}

: <<'=cut'
=pod

=head2 test_env

Tests the environment, with respect to the hostname and git tag.

=cut
function test_env() {
  local env tag
  env=${G[env]}
  tag="$(${G[git]} describe --always --dirty)"

  function not_dirty() {
    if [[ "$tag" =~ "dirty" ]]; then
      >&2 echo "ERR: --env=$env tag: $tag =~ dirty"
      exit 1
    fi
  }

  function annotated_tag() {
    if [[ "$tag" =~ "-" ]]; then
      >&2 echo "ERR: --env=$env tag: Annotated tags only"
      exit 1
    fi
  }

  function good_status() {
    local status="${G[git]} status --porcelain=1"
    if [[ ${G[unstaged_ok]} ]]; then
      status="${status} | grep -v '^??'"
    fi
    if [[ -n $($status) ]]; then
      >&2 echo "ERR: --env=$env $status"
      >&2 $status
      exit 1
    fi
  }

  function server() {
    local expected_server this_server
    expected_server=$(G .${G[env]}.server)
    this_server=$(hostname --fqdn)
    if [[ "$expected_server" =~ ^! ]]; then
      expected_server=${expected_server#!}
      if [[ "$this_server" =~ $expected_server ]]; then
        >&2 echo "ERR: --env=$env server: [[ \"$this_server\" =~ $expected_server ]]"
        exit 1
      fi
    else
      if ! [[ "$this_server" =~ $expected_server ]]; then
        >&2 echo "ERR: --env=$env server: ! [[ \"$this_server\" =~ $expected_server ]]"
        exit 1
      fi
    fi
  }

  echo -n "Testing environment: ${G[env]} ... "
  case ${G[env]} in
    dev)
      server
    ;;
    clean )
      not_dirty
      good_status
      server dev
      ;;
    gcb)
      annotated_tag
      not_dirty
      good_status
      ;;
    sandbox )
      server sandbox
      not_dirty
      good_status
      ;;
    test | prev | stage | prod )
      server prod
      annotated_tag
      not_dirty
      good_status
      ;;
    *)
      >&2 echo "Unknown env=${G[env]}"
      exit 1
      ;;
  esac
  echo "OK"

}


: <<'=cut'
=pod

=head2 expand

Use shell expansion to expand the config.json file into the current actual variables.

C<aggie-experts expand>

=cut
#https://stackoverflow.com/questions/415677/how-to-replace-placeholders-in-a-text-file
function expand(){
   local line lineEscaped
  # the `||` clause ensures that the last line is read even if it doesn't end with \n
  while IFS= read -r line || [[ -n $line ]]; do
    # Escape ALL chars. that could trigger an expansion..
    #IFS= read -r -d '' lineEscaped < <(printf %s "$line" | tr '`([$' '\1\2\3\4')
    IFS= read -r -d '' lineEscaped < <(printf %s "$line" | tr '($' '\2\4')
    # ... then selectively reenable ${ references
    lineEscaped=${lineEscaped//$'\4'\{/\$\{} # Variables
    lineEscaped=${lineEscaped//$'\4\2'/\$\(} # Also commands
    # Finally, escape embedded double quotes to preserve them.
    lineEscaped=${lineEscaped//\"/\\\"}
    eval "printf '%s\n' \"$lineEscaped\"" | tr '\1\2\3\4' '`([$'
  done
}

: <<'=cut'
=pod

=head2 expand_template

Use shell expansion to expand docker-template.yaml with defaults

=cut
#https://stackoverflow.com/questions/415677/how-to-replace-placeholders-in-a-text-file
function expand_template(){
  local env root
  env=${G[env]}
  root="$(${G[git]} rev-parse --show-toplevel)"
  local sa client_id auth
  declare -g -A D

  D["tag"]="$(${G[git]} describe --always --dirty)"

  read D["org"] D["fin_org"] D["fin_tag"] \
       D["host"] D["port"] \
       D["gcs_bucket"] D["gcs_init_data_hydration"]\
       D["client_env"] D["cdl_propagate_changes"] \
       D["client_error_reporting_enabled"] \
       D["client_error_reporting_url"] D["client_error_reporting_key_secret"] \
       sa client_id auth \
       <<<$(G "[.${G[env]}.org // .def.org,
           .def.fin.org,
           .def.fin.tag,
           .${G[env]}.host,
           .${G[env]}.port,
           .${G[env]}.gcs.bucket // .def.gcs.bucket,
           .${G[env]}.gcs.init_data_hydration // .def.gcs.init_data_hydration,
           .${G[env]}.client.env // .def.client.env,
           .${G[env]}.cdl.propagate_changes // .def.cdl.propagate_changes,
           .${G[env]}.client_error_reporting.enabled // .def.client_error_reporting.enabled,
           .${G[env]}.client_error_reporting.url // .def.client_error_reporting.url,
           .${G[env]}.client_error_reporting.key_secret // .def.client_error_reporting.key_secret,
           .${G[env]}.auth.service_account // .def.auth.service_account,
           .${G[env]}.auth.client_id // .def.auth.client_id,
           .${G[env]}.auth.server // .def.auth.server
          ] |@tsv")

  #decode client_error_reporting_key_secret
  D["client_error_reporting_key"]=$(gcloud secrets versions access latest --secret=${D["client_error_reporting_key_secret"]})

  #Get OIDC INFO
  local oidc_secret=$(basename $(gcloud --format=json secrets list --filter="labels.oidc_client:${client_id} AND labels.auth:${auth}" | jq -r '.[0].name'))
  eval $(gcloud secrets versions access latest --secret="$oidc_secret")
  D["jwt_secret"]=$JWT_SECRET
  D["jwt_issuer"]=$JWT_ISSUER
  D["jwt_jwks_uri"]=$JWT_JWKS_URI
  D["oidc_client_id"]=$OIDC_CLIENT_ID
  D["oidc_secret"]=$OIDC_SECRET
  D["oidc_base_url"]=$OIDC_BASE_URL

  #Get service account info
  local srv_secret
  srv_secret=$(basename $(gcloud --format=json secrets list --filter="labels.fin_service_account_name:${sa}" | jq -r '.[0].name'))
  eval "$(gcloud secrets versions access latest --secret="$srv_secret")"
  D[fin_service_account_name]=$FIN_SERVICE_ACCOUNT_NAME
  D[fin_service_account_secret]=$FIN_SERVICE_ACCOUNT_SECRET

#  declare -p D
  local line lineEscaped
  # the `||` clause ensures that the last line is read even if it doesn't end with \n
  while IFS= read -r line || [[ -n $line ]]; do
    # Escape ALL chars. that could trigger an expansion..
    IFS= read -r -d '' lineEscaped < <(printf %s "$line" | tr '`([$' '\1\2\3\4')
    #IFS= read -r -d '' lineEscaped < <(printf %s "$line" | tr '($' '\2\4')
    # ... then selectively reenable ${D[_*_]} references
    lineEscaped=${lineEscaped//$'\4'\{D$'\3'/\$\{D[} # Variables
    # Finally, escape embedded double quotes to preserve them.
    lineEscaped=${lineEscaped//\"/\\\"}
    eval "printf '%s\n' \"$lineEscaped\"" | tr '\1\2\3\4' '`([$'
  done < ${root}/docker-template.yaml
}


function prune() {
  local N=${G[dry-run]};

  local org=$(G .${G[env]}.org)
  local tag=$(G .${G[env]}.tag)

  local experts_rm=$(docker image list --format=json | jq -r 'select(.Repository | test("aggie-experts")) | (select(.Repository | test("init$")),select(.Repository | test("fcrepo$")),select(.Repository | test("base-service")),select(.Repository | test("harvest"))) | select(.Tag != "dirty") | .Repository+":"+.Tag')

  $N docker image rm $experts_rm
}

function build() {
  local tag
  local N=${G[dry-run]};
  tag="$(${G[git]} describe --always --dirty)"
  local build_args
  read build_args \
       <<<$(G "[.${G[env]}[\"cork-kube\"].build_args // .def[\"cork-kube\"].build_args] |@tsv")

  if [[ -z ${G[build_args]} ]]; then
        G[build_args]=$build_args
  fi

  function post_build() {
    if [[ $tag != "dirty" ]]; then
        >&2 echo "WARN: You may want to run aggie-experts setup"
    fi
  }

  case ${G[env]} in
    dev)
      tag="dirty"
      $N cork-kube build exec --project=aggie-experts --version=dev --local-dev-registry=localhost/aggie-experts -o aggie-experts=$tag ${G[build_args]} $@
    ;; # Always build
    clean | sandbox )
      if [[ "$tag" =~ "dirty" ]]; then
        >&2 echo "tag=$tag: clean tags only where env=${G[env]}"
        exit 1
      fi
      $N cork-kube build exec --project=aggie-experts --version=dev --local-dev-registry=localhost/aggie-experts -o aggie-experts=$tag ${G[build_args]} $@
      ;;
    gcb )
      if [[ "$tag" =~ "-" || "$tag" =~ "dirty" ]]; then
        >&2 echo "tag=$tag: Annotated tags where env=${G[env]} "
        exit 1
      fi
      cork-kube build gcb --project aggie-experts --version=$tag ${G[build_args]} $@
      ;;
    test | prev | stage | prod )
      >&2 echo "No builds env=${G[env]}"
      exit 1
      ;;
    *)
      >&2 echo "Unknown env=${G[env]}"
      exit 1
      ;;
  esac

  post_build
}

function setup() {
  local N=${G[dry-run]};
  local env=${G[env]}

  function service_account() {
    local service_account=$(basename $(gcloud --format=json secrets list --filter="labels.type:service-account-key" | jq -r '.[0].name'))

    gcloud secrets versions access latest --secret="$service_account"
  }

  function compose() {
    local N=${G[dry-run]};
    local gcs
    read gcs <<<$(G "[.${G[env]}.gcs.bucket] | @tsv")

    local yq='.'
    local env=${G[env]}
    local mount=${G[mount]}

    local template=$(expand_template)
    local root="$(${G[git]} rev-parse --show-toplevel)"

    eval "$(cat .env)"
    # Delete unused PORTS
    for i in fuseki kibana fcrepo rabbitmq; do
      local p=${i^^}_PORT
      if [[ -z "${!p}" ]]; then
        yq="$yq | del(.services.$i.ports)"
      fi
    done

    if [[ "$env" = "dev" ]]; then
      if [[ -z "$gcs" ]]; then
        yq+='| del(.services.gcs)'
      fi
      if [[ ! "$mount" =~ "models" ]]; then
        yq+='| del(.. | select(anchor=="DEV_MOUNT_MODELS*" or alias=="DEV_MOUNT_MODELS*"))'
      fi
      if [[ ! "$mount" =~ "client" ]]; then
        yq+='| del(.. | select(anchor=="DEV_MOUNT_CLIENT*" or alias=="DEV_MOUNT_CLIENT*"))'
      fi
      if [[ ! "$mount" =~ "init-fcrepo" ]]; then
        yq+='| del(.. | select(anchor=="DEV_MOUNT_INIT_FCREPO" or alias=="DEV_MOUNT_INIT_FCREPO"))'
      fi
      if [[ ! "$mount" =~ "spa" ]]; then
        yq+='| del(.. | select(anchor=="DEV_MOUNT_SPA" or alias=="DEV_MOUNT_SPA"))'
      fi
    # These are potential others
    else
      yq+='| del(.. | select(anchor=="DEV_MOUNT*" or alias=="DEV_MOUNT*"))'
    fi
    if [[ -n $N ]]; then
      echo "yq '${yq}' <<<'${template}'"
    else
      yq "${yq}" <<<"${template}"
    fi
  }
  function setup_files() {
    if [[ -n $N ]]; then
      if [[ -n ${G[setup_compose]} ]] ; then
        echo "#===== docker-compose.yaml =====#"
        compose
      fi
      if [[ -n ${G[setup_service_account]} ]] ; then
        echo "#===== service-account =====#"
        service_account
      fi
    else
      if [[ -n ${G[setup_compose]} ]] ; then
        >&2 echo "docker-compose.yaml"
        compose > ${G[base]}/docker-compose.yaml
      fi
      if [[ -n ${G[setup_service_account]} ]] ; then
        if [[ -f ${G[base]}/service-account.json ]]; then
          >&2 echo "service-account.json already exists"
        else
          >&2 echo "service-account.json"
          service_account > ${G[base]}/service-account.json
        fi
      fi
    fi
  }

  case $env in
    dev )
      if [[ ${G[list-mounts]} ]]; then
        grep '^[^#&]*\&DEV_MOUNT' ${root}/docker-template.yaml |
          sed -e 's/.*\&DEV_MOUNT_//' -e 's/ /=/' |
          tr '[:upper:]' '[:lower:]' | sort -u
        exit 0
      fi
      setup_files
      local mount
      mount=$(G .mount // .${G[env]}.mount)
      if [[ -n $mount && "$mount" != "null" ]]; then
        >&2 echo "#======MOUNTS=======#"
        >&2 echo "mount=$mount"
        >&2 echo "WARN: You have mounts, be sure to run ~npm install~ where required"
      fi
      ;;

    clean | sandbox | test | prev | stage | prod ) # Always setup
      setup_files
      ;;

    build )
      >&2 echo "env=$env: Don't setup env=${G[env]}"
      exit 1
      ;;

    * )
      >&2 echo "Unknown env=${G[env]}"
      exit 1
      ;;
  esac
}

function main.cmd() {
  local opts;

  if ! opts=$(${G[shell_getopt]} -o nv:d:lh --long build-args:,base:,gcs:,env:,jq:,list-mounts,mount:,unstaged-ok,no-env,no-compose,no-service-account,cloudsdk-active-config-name:,no-test,dry-run,help,use-registry: -n "aggie-experts" -- "$@"); then
    echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    declare -A CMD=(
      [setup_env]=1
      [setup_compose]=1
      [setup_service_account]=1
      [unstaged_ok]=
      [build_args]=
    )

    while true; do
	    case $1 in
        --base) CMD[base]=$2; shift 2;;
        --cloudsdk-active-config-name) CMD[cloudsdk_active_config_name]=$2; shift 2;;
        --env) CMD[env]=$2; shift 2;;
        --gcs) CMD[gcs]=$2; shift 2;;
        --list-mounts | -l) CMD[list-mounts]=1; shift;;
        --mount) CMD[mount]=$2; shift 2;;
        --no-test) CMD[test_env]=; shift;;
        --no-compose) CMD[setup_compose]=; shift;;
        --service-account) CMD[setup_service_account]=1; shift;;
        --no-service-account) CMD[setup_service_account]=; shift;;
        --unstaged-ok) CMD[unstaged_ok]=1; shift;;
        --build-args) CMD[build_args]="$2"; shift 2;;
        -h | --help) pod2text $0; exit 0;;
        -n | --dry-run) CMD[dry-run]="echo"; shift;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done

    # command line over global
    for i in "${!CMD[@]}"; do
      G[$i]=${CMD[$i]};
    done

    # set the google cloud sdk config
    if [[ -n ${G[cloudsdk_active_config_name]} ]]; then
      export CLOUDSDK_ACTIVE_CONFIG_NAME=${G[cloudsdk_active_config_name]}
    fi

    # Now command(s)
    for cmd in "$@"; do
      shift
      case $cmd in
	      build | setup | prune ) # API requests

          # Guess env if not supplied
          if [[ -z ${G[env]} ]]; then
            G[env]=$(guess-env)
            if [[ $? -ne 0 ]]; then
              >&2 echo "ERROR: Unable to guess one env: ${G[env]}"
              exit 1
            fi
          fi

          [[ ${G[test_env]} ]] && test_env
          # Fix mount if exists
          G[jq]="${G[jq]}|.mount=\"${G[mount]}\""

	        $cmd
	        ;;

        guess-env ) # API requests
	        $cmd
	        ;;

        test_env ) # API requests
          # Guess env if not supplied
          if [[ -z ${G[env]} ]]; then
            G[env]=$(guess-env)
          fi

	        $cmd
	        ;;

        config | G )
          G "$@" ;
          exit 0
          ;;

        expand_template )
          expand_template
          exit 0
          ;;

        expand )
          expand <${G[config]}
          exit 0
          ;;

        bar )
          expand <docker-template.yaml
          exit 0
          ;;

        declare ) # informational requests
          declare -p G;
          exit 0
          ;;
        *) echo "Unknown command: $cmd"; exit 1;;
      esac
    done
}
main.cmd "$@"
exit $?

: <<=cut
=pod

=head1  EXAMPLES

=head2 SETUP

To setup the full stack:

C<aggie-expert --env=dev setup>

=head1 AUTHOR

qjhart@ucdavis.edu

=cut
