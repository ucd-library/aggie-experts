#!/usr/bin/env bash

# These Global Variables are the defaults values for the current setup.
declare -g -A G=(
  [project]="aggie-experts"
  [config]="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/../config.json"
  [jq]="."
  [env]=dev
  # Below you probably don't need to change
  [base]="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/.."
  [shell_getopt]=${FLAGS_GETOPT_CMD:-getopt}
  [git]="git -C $( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
  [noop]=
);

G[gcloud_user]=$(gcloud auth list --filter="status:ACTIVE"  --format="value(account)")
G[env_secret]=$(basename $(gcloud --format=json secrets list --filter="labels.project:${G[project]} AND labels.type:env AND labels.deploy:${G[env]}" | jq -r '.[0].name'))

G[service_account]=$(basename $(gcloud --format=json secrets list --filter="labels.project:${G[project]} AND labels.type:service-account" | jq -r '.[0].name'))

#https://stackoverflow.com/questions/415677/how-to-replace-placeholders-in-a-text-file
function expand(){
  local line lineEscaped
  while IFS= read -r line || [[ -n $line ]]; do  # the `||` clause ensures that the last line is read even if it doesn't end with \n
    # Escape ALL chars. that could trigger an expansion..
#    IFS= read -r -d '' lineEscaped < <(printf %s "$line" | tr '`([$' '\1\2\3\4')
    IFS= read -r -d '' lineEscaped < <(printf %s "$line")
    # ... then selectively reenable ${ references
#    lineEscaped=${lineEscaped//$'\4'\{/\$\{}
#    lineEscaped=${lineEscaped//$'\4\2'/\$\(}
    # Finally, escape embedded double quotes to preserve them.
    lineEscaped=${lineEscaped//\"/\\\"}
    eval "printf '%s\n' \"$lineEscaped\"" | tr '\1\2\3\4' '`([$'
  done
}

function G() {
  expand < ${G[config]} | jq "${G[jq]}" | jq -r "$1"
}

function prune() {
  local N=${G[noop]};
  declare -a services=(init fcrepo base-service)
  if [[ "$(G .git.tag)" =~ "dirty" ]]; then
    org=localhost/aggie-experts
    tag=dirty
  else
    org=$(G .experts.org)
    tag=$(G .git.tag)
  fi

  local fin_rm=$(docker image list --format=json | jq -r "select(.Repository | test(\"fin-\")) | (select(.Repository | test(\"$(G .fin.org)\") | not),select(.Tag != \"$(G .fin.tag)\")) | .Repository+\":\"+.Tag")

  local experts_rm=$(docker image list --format=json | jq -r 'select(.Repository | test("aggie-experts")) | (select(.Repository | test("init$")),select(.Repository | test("fcrepo$")),select(.Repository | test("base-service"))) | select(.Tag != "dirty") | .Repository+":"+.Tag')

  if [[ -n $N ]]; then
    echo "#===== rm fin =====#"
    echo "$fin_rm"
  echo "#===== rm experts =====#"
    echo "$experts_rm"
  else
    docker image rm $fin_rm $experts_rm
  fi

# Remove all fin- images not in our current desird.

#  for service in "fin-base-service fin-init fin-fcrepo"; do
#    docker rmi -f ${org}/${service}:${tag}
#  done
#  for service in "${services[@]}"; do
#    local image=$org/${service}:$tag
}

function build() {
  local org
  local tag
  local N=${G[noop]};

  local fin_org=$(G .fin.org)
  local fin_tag=$(G .fin.tag)

  if [[ "$(G .env)" =~ "dev" ]]; then
    org=localhost/aggie-experts
    tag=dirty
  else
    org=$(G .experts.org)
    tag=$(G .git.tag)
  fi

  if [[ "$(G .git.tag)" =~ "dirty" && "$(G .env)" != "dev" ]]; then
    echo "Cannot build dirty image in non-dev environment"
    exit 1
  fi

  cd ${G[base]}

  for i in experts-api fuseki harvest services/base-service services/init; do
    local n=$(basename $i)
    local image=$org/${n}:$tag

    export DOCKER_BUILDKIT=1
    $N docker build \
	     --build-arg BUILDKIT_INLINE_CACHE=1 \
       --build-arg FIN_ORG=${fin_org} --build-arg FIN_TAG=${fin_tag} \
       --build-arg ORG=${org} --build-arg TAG=${tag} \
       -t $image \
       --cache-from $image ${i}
  done

  if [[ "$(G .keycloak)" = "local" ]]; then
    for service in "keycloak"; do
      local image=localhost/aggie-experts/${service}:dirty

      $N docker build \
         --build-arg FIN_REPO_TAG=${G[ref_name]} \
         --build-arg FIN_SERVER_REPO_HASH=${G[sha]} \
         -t $image  \
         --cache-from $image \
         ${service}
    done
  fi
}

function env() {
  gcloud secrets versions access latest --secret=${G[env_secret]}

  if [[ "$(G .env)" == "dev" ]]; then
    org=localhost/aggie-experts
    tag=dirty
  else
    org=$(G .experts.org)
    tag=$(G .experts.tag)
  fi

  echo "ORG=$org"
  echo "TAG=$tag"
  echo "FIN_ORG=$(G .fin.org)"
  echo "FIN_TAG=$(G .fin.tag)"

}

function service_account() {
  gcloud secrets versions access latest --secret=${G[service_account]}
}

function compose() {
  local env=$(G .env)
  local keycloak=$(G .keycloak)
  local mount=$(G .deploy.dev_mount)
  local tmpl=$(G .deploy.template)

  if [[ "$env" = "dev" ]]; then
    cat $tmpl |
      if [[ "$keycloak" != "local" ]]; then
        yq 'del(.services.keycloak)'
       else
        cat
      fi |
      if [[ "$mount" =~ "models" ]]; then
        cat
      else
        yq 'del(.. | select(anchor=="DEV_MOUNT_MODELS" or alias=="DEV_MOUNT_MODELS"))'
      fi |
      if [[ "$mount" =~ "init-fcrepo" ]]; then
        cat
      else
        yq 'del(.. | select(anchor=="DEV_MOUNT_INIT_FCREPO" or alias=="DEV_MOUNT_INIT_FCREPO"))'
      fi |
      if [[ "$mount" =~ "spa" ]]; then
        cat
      else
        yq 'del(.. | select(anchor=="DEV_MOUNT_SPA" or alias=="DEV_MOUNT_SPA"))'
      fi |
      yq 'del(.. | select(anchor=="DEV_MOUNT_FIN_SERVICES" or alias=="DEV_MOUNT_FIN_SERVICES"))' |
      yq 'del(.. | select(anchor=="DEV_MOUNT_FIN_API" or alias=="DEV_MOUNT_FIN_API"))' |
      yq 'del(.. | select(anchor=="DEV_MOUNT_ACTIVEMQ" or alias=="DEV_MOUNT_ACTIVEMQ"))' |
      yq 'del(.. | select(anchor=="DEV_MOUNT_FCREPO_PROPERTIES" or alias=="DEV_MOUNT_FCREPO_PROPERTIES"))' |
      yq 'del(.. | select(anchor=="DEV_MOUNT_ROOT_AUTH" or alias=="DEV_MOUNT_ROOT_AUTH"))' |
      yq 'del(.. | select(anchor=="DEV_MOUNT_INIT_POSTGRES" or alias=="DEV_MOUNT_INIT_POSTGRES"))' |
      yq 'del(.. | select(anchor=="DEV_MOUNT_DOCKER_RUN" or alias=="DEV_DOCKER_RUN"))'
  else
    cat $tmpl | yq 'del(.. | select(anchor=="DEV_MOUNT*" or alias=="DEV_MOUNT*"))' | yq 'del(.services.keycloak)'
  fi
}

function setup() {
  local N=${G[noop]};

  if [[ -n $N ]]; then
    echo "#===== .env  =====#"
    env
    echo "#===== docker-compose.yaml =====#"
    compose
    echo "#===== service-account =====#"
    service_account
  else
    echo "#===== .env  =====#"
    env | tee ${G[base]}/.env
    echo "#===== docker-compose.yaml =====#"
    compose | tee ${G[base]}/docker-compose.yaml
    echo "#===== service-account =====#"
    service_account | tee ${G[base]}/service-account.json
  fi
}

function main.cmd() {
  local opts;

  if ! opts=$(${G[shell_getopt]} -o nv:d: --long env:,jq:,noop,help -n "aggie-experts" -- "$@"); then
    echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    local defaults=1
    declare -A CMD;
    while true; do
	    case $1 in
        --jq) CMD[jq]=$2; shift 2;;
        --env ) CMD[env]=$2; shift 2;;
        -n | --noop) CMD[noop]="echo"; shift;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done

    # command line over global
    for i in "${!CMD[@]}"; do
      [[ -n ${CMD[$i]} ]] && G[$i]=${CMD[$i]};
    done

    for cmd in "$@"; do
      shift;
      if [[ "$cmd" =~ ^\. ]]; then
        G[jq]="${G[jq]}|$cmd"
      else
        case $cmd in
	        prune | build | compose | env | setup ) # API requests
	          $cmd "$@";
	          ;;

          config ) G "$@" ;;

          G ) G "$@" ;;

          expand ) expand <${G[config]} ;;

          declare ) # informational requests
            declare -p G;
            ;;
        *) echo "Unknown command: $cmd"; exit 1;;
        esac
      fi
    done
}
main.cmd "$@"
exit $?
