#! /usr/bin/env bash

: <<=cut
=pod

=head1  NAME

cdl-elements - Harvest an Elements feed.

=head1 SYNOPSIS

cdl-elements [--api=<cdl_endpoint>] [--auth=cdl_auth] [-S|--session=<httpie session>] \
         [-c|--cache=<dir>] [-t|--tdb=<tdb-dir>] [-d|--data=<data load endpoint] \
         [-p|--print] [-h|--help]\
  <command> [<args>]

  where <command> is one of login xml2jsonld load_jsonld groups users

elements is a script the simplifies the retrieval of an elements feed API.
L</"COMMANDS"> is summary of the commands that are available.

=head1 GLOBAL OPTIONS

=over 4

=item B<--api=I<cdl_elements_endpoint>>

This is the http address for the elements endpoint.

=item B<-S|--session|--http_session=I<http_session>>

Set the HTTPIE session variable. It is equivalent to the
L<httpie|https://httpie.org/> session variable, and are shared in that command
configuration. Sessions primarily keep the basic authentication parameters
saved. By default the B<elements> session is used.

=item B<-c|--cache = directory>

Specify the cache directory for downloads and intermediate files, default
C<cache=/var/lib/harvest/cdl>.

=item B<-t|--tdb = directory>

Specify a local tdb location to load the cdl data, default C<tdb=/var/lib/harvest/cdl/tdb>.

=item B<-d|--data = fuseki data endpoint>

Specify a remote sparql data endpoint fuseki to load the cdl data.  No
default. In additiona to command-line auth, this will also use the
envirionmental parameters C<FUSEKI_USER> and C<FUSEKI_PASSWORD> for authentication, equivalent to C<--data-auth=FUSEKI_USER:FUSEKI_PASSWORD>.

=item B<-v|--verbose>

Log some of the commands that your are going to run.

=item B<-h|--help>

Shows the manpage for the program. The help pages are embedded in the script and
require the functions, C<pod2usage> and C<pod2text> to work properly.

=back

=cut

declare -A G=(
  [api]='https://oapolicy.universityofcalifornia.edu:8002/elements-secure-api/v5.5'
  [graph]='http://oapolicy.universityofcalifornia.edu/'
  [auth]=''
  [data]='http://fuseki:3030/harvest/upload'
  [http_session]="elements"
  [cache]="."
  [util_rsync]="rsync"
  [util_xml2json]="xml2json"
  [util_xmlstarlet]="xmlstarlet"
  [util_http]="http"
);

function init() {
  local opts;
  if ! opts=$($GETOPT -o A:bnhS:vt:d:c: --long verbose,auth:,base:,api:,data:,cache:,tdb:,http_session:,session:,dry-run,help -n 'cdl' -- "$@"); then
    echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    local i
    declare -A CMD=(
      [verbose]=0
      );
    while true; do
	    case $1 in
        --api) CMD[api]=$2; shift 2;;
	      --session | --http_session) CMD[http_session]=$2;  shift 2;;
        -a | --auth ) CMD[auth]=$2; shift 2;;
        -t | --tdb ) CMD[tdb]=$2; shift 2;;
        -d | --data ) CMD[data]=$2; shift 2;;
        -c | --cache ) CMD[cache]=$2; shift 2;;
	      -v | --verbose) let CMD[verbose]=CMD[verbose]+1;  shift;;
        -h | --help ) exec pod2text $0;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done

    # system variables (eg CDL_AUTH) over G file
    for i in "${!G[@]}"; do
      eval v=\$CDL_${i^^}
      [[ -n $v ]] && G[$i]=$v
    done

    # COMMAND LINE FOR THESE OVER YAML file
    for i in ${!CMD[@]}; do
      [[ -n ${CMD[$i]} ]] && G[$i]=${CMD[$i]};
    done

    if [[ -n $G[auth] ]]; then
      login
    fi

}


: <<='cut'

=pod

=head1 COMMANDS

Next there are a set of commands that communicate with the CDL service. Note,
that cdl uses L<httpie|https://httpie.org/> for its http communcation.  This
allows users to combine the program with other httpie requests if
required. Login infomation is stored using the standard C<httpie> methodology,
see L</"GLOBAL OPTIONS"> for httpie options.

=cut

function main.cmd () {
    cmd=$1
    shift;
    case $cmd in
	    login | groups | users | publications ) # API requests
	      $cmd "$@";
	      ;;
	    group.sub | group.membership ) # group commands
	      $cmd "$@";
	      ;;
	    load_jsonld | xml2jsonld ) # utility requests
	      $cmd "$@";
	      ;;
      config | declare ) # informational requests
        log -v "Verbose Log"
        log -v -v "Verbosex2 Log"

        declare -p G;
        ;;
	    *)
	      exec pod2usage $0
	  ;;
    esac
}

function log_assoc() {
  local opts;
  if ! opts=$($GETOPT -o v --long verbose -n 'cdl log_assoc' -- "$@"); then
    echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    local log_verbose=0

    while true; do
	    case $1 in
	      -v | --verbose) let log_verbose=$log_verbose+1;  shift;;
	      -- ) shift; break;;
      esac
    done

    declare -n v=$1
    v[exe]="cdl_elements"
    v[timestamp]="$(date --iso-8601=seconds)"

    if (( ${G[verbose]} >= $log_verbose )) ; then
      for key in "${!v[@]}"; do
        printf '%s\0%s\0' "$key" "${v[$key]}"
      done |
        jq -Rsc ' split("\u0000") | . as $a | reduce range(0  ; length/2) as $i  ({}; . + {($a[  2*$i]): ($a[2*$i + 1]|fromjson? // .)})'
    fi
}


function log() {
  local opts;
  if ! opts=$($GETOPT -o v --long verbose -n 'cdl log' -- "$@"); then
    echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    local log_verbose=0

    while true; do
	    case $1 in
	      -v | --verbose) let log_verbose=$log_verbose+1;  shift;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done

    if (( ${G[verbose]} >= $log_verbose )) ; then
      printf '{"cmd":"%s","timestamp":"%s","log":"%s"}\n' cdl-elements "$(date --iso-8601=seconds)" "$1"
    fi
}

function err() {
  local n=1;
  if [[ $1 = '--quiet' ]] ; then
    n=$2;
  else
    n=$1
    shift
    (>&2 echo err: $@)
  fi
  exit $n;
}


function url_fetch() {
  local opts;
  local begin;
  declare -A logit=();

  if ! opts=$($GETOPT -o f:o --long file:,overwrite,no-overwrite -n 'cdl url_fetch' -- "$@"); then
    echo "Bad Command Options." >&2 ; exit 1 ;
  fi

  eval set -- "$opts"

  declare -A CMD=(
    [overwrite]=''
  );

  while true; do
	  case $1 in
	    -f | --file) CMD[file]=$2;  shift 2;;
	    -o | --overwrite) CMD[overwrite]=1;  shift ;;
	    -n | --no-overwrite) CMD[overwrite]='';  shift;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  local http="${G[util_http]} --timeout=60 --check-status --session-read-only=${G[http_session]} --print=b "

  begin=$SECONDS
  if [[ -n ${CMD[file]} ]]; then
    if [[ ! -f ${CMD[file]} || -n ${CMD[overwrite]} ]]; then
      log -v -v -- "${http} '$1' > ${CMD[file]}"
      ${http} "$1" > ${CMD[file]}
    else
      log -v -v -- "${CMD[file]} exists"
    fi
    logit[file]=${CMD[file]}
  else
    log -v -v -- "${http} '$1' > /dev/null"
    ${http} "$1" > /dev/null
    logit[file]='/dev/null'
  fi

  logit[duration]=$(($SECONDS-$begin))
  logit[cmd]="url_fetch"
  logit[url]="$1"
  log_assoc -v logit
}

:<<=cut

=head2 LOGIN

  elements login --auth=USER[:PASS]

B<elements login> is a simple wrapper around the B<httpie --auth=USER:PASS> command.
This allows users to setup their basic authorization, which is then stored in
the standard httpie session paratmeters. It is possible to maintain multiple users,
via the elements I<--session> parameter to maintain different users, eg.

  elements --session=ucd --auth=ucd

After which the session C<ucd>, will be set as a new httpie session, with
the saved authorization.

=head3 LOGIN OPTIONS

=over 4

=item B<-a|--auth=USER[:PASS]>

You specify the basic authentication for the ezid.cdlib.org server. If you only
specify the USER, then you are prompted for the password.

=back

=cut

function login() {
    local opts=`$GETOPT -o a --long auth: -n 'cdl login' -- "$@"`
    if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

    eval set -- "$opts"

    declare -A logit=();
    local auth=

    while true; do
	    case $1 in
        -a | --auth ) auth=$2; shift 2;;
	      -- ) shift; break;;
	      *) shift; break;
      esac
    done
    if [[ -z $auth ]]; then
      auth=${G[auth]}
    fi

    local http="${G[util_http]} --check-status --session=${G[http_session]} --auth=$auth --print=h "
    log -v -v -- $http ${G[api]}/groups
    local res=$($http ${G[api]}/groups | head -n 1)
    logit[cmd]="login"
    logit[res]=${res//[$'\t\r\n']}
    log_assoc  -v logit
}

:<<=cut

=head2 xml2jsonld

 cdl <global-elements> xml2jsonld --type=[user|user-relationship|relationship|publication|group]

B<cdl xml2jsonld> converts the CDL xml data to jsonld.

=head3 xml2jsonld OPTIONS

=over 4

=item B<--type=[user|user-relationship|relationship|publication|group]>

You pass the type of xml file, which selects the context, and the path to use
for the query.  Default is user

=back

=cut

function xml2jsonld() {
  local opts;
  if ! opts=$($GETOPT -o t: --long type: -n 'cdl xml2jsonld' -- "$@"); then
    echo "Bad Command Options." >&2 ; exit 1 ;
  fi
  eval set -- "$opts"

  local type='groups'
  while true; do
	  case $1 in
      -t | --type ) type=$2; shift 2;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  local context;
  local path;

  G[jsonld_context_map_id]='
{"@context":{
    "@base":"http://oapolicy.universityofcalifornia.edu/",
    "@vocab":"http://oapolicy.universityofcalifornia.edu/vocab#",
    "oap":"http://oapolicy.universityofcalifornia.edu/vocab#",
    "api":"http://oapolicy.universityofcalifornia.edu/vocab#",
    "id":{"@type":"@id","@id":"@id"},
    "field-name":"api:field-name",
    "field-number":"api:field-number",
    "$t":"api:field-value",
    "api:person": { "@container": "@list" },
    "api:first-name": { "@container": "@list"}
}}';

  G[jsonld_context_no_map_id]='
{"@context":{
  "@base":"http://oapolicy.universityofcalifornia.edu/",
  "@vocab":"http://oapolicy.universityofcalifornia.edu/vocab#",
  "oap":"http://oapolicy.universityofcalifornia.edu/vocab#",
  "api":"http://oapolicy.universityofcalifornia.edu/vocab#",
  "rdf":"http://www.w3.org/1999/02/22-rdf-syntax-ns#",
  "field-name":"api:field-name",
  "field-number":"api:field-number",
  "$t":"api:field-value",
  "api:web-address":{ "@container": "@list" },
  "categoryxx":{"@type":"@id","@id":"rdf:type"},
  "typexx":{"@type":"@id","@id":"rdf:type"}
}}';

  G[jsonld_user_path]='.feed.entry["api:object"]|(with_entries(if .key=="id" then .key="@id" else . end))';
  G[jsonld_user_context]=${G[jsonld_context_no_map_id]}

  G[jsonld_users_path]='.feed.entry[]["api:object"]|(with_entries(if .key=="id" then .key="@id" else . end))';
  G[jsonld_users_context]=${G[jsonld_context_no_map_id]};

  G[jsonld_groups_path]='.feed.entry[]["api:user-group"]? //.feed.entry["api:user-group"]|(with_entries(if .key=="id" then .key="@id" else . end))';
  G[jsonld_groups_context]=${G[jsonld_context_map_id]}

  G[jsonld_user-relationship_path]='.feed.entry[]["api:relationship"]? //.feed.entry["api:relationship"]|(with_entries(if .key=="id" then .key="@id" else . end))';
  G[jsonld_user-relationship_context]=${G[jsonld_context_no_map_id]}

  G[jsonld_relationship_path]='.feed.entry[]["api:relationship"]? //.feed.entry["api:relationship"]|(with_entries(if .key=="id" then .key="@id" else . end))';
  G[jsonld_relationship_context]=${G[jsonld_context_no_map_id]}

  G[jsonld_publication_path]='.feed.entry[]["api:object"]? //.feed.entry["api:object"]|(with_entries(if .key=="id" then .key="@id" else . end))';
  G[jsonld_publication_context]=${G[jsonld_context_map_id]}

  while [[ -n "$1" ]]; do
    log -v -v "${G[util_xml2json]} < "$1" | jq '${G[jsonld_${type}_context]} + {\"@graph\":[${G[jsonld_${type}_path]}]}' > ${1//.xml/.jsonld}"
    ${G[util_xml2json]} < "$1" | jq "${G[jsonld_${type}_context]}"' + {"@graph":['"${G[jsonld_${type}_path]}"']}' > ${1//.xml/.jsonld}
    shift
  done
}


:<<=cut

=head2 load_jsonld

  cdl <global-elements> load_jsonld filenames

  B<cdl load_jsonld> loads all filenames passed to the function.

=cut

function load_jsonld () {
  local file;
  local count;
  declare -A logit=([cmd]='load_jsonld');


  # G[data] is a SPARQL DATA LOAD
  if [[ -n ${G[data]} ]]; then
    local auth=admin:${FUSEKI_PASSWORD}
    local load=${G[data]}
    for file in "$@"; do
      if [[ -f $file ]]; then
        #riot --formatted=ttl $file > $file.ttl
        log -v -v "curl -s --location --request POST --user ${auth} -H \"Content-Type:multipart/form-data\" -F \"file=@${file}\" \"${load}?graph=${G[graph]}\""
        count=$(curl -s --location --request POST --user ${auth} -H "Content-Type:multipart/form-data" -F "file=@${file}" "${load}?graph=${G[graph]}" | jq .count)

        logit[file]=${file}
        logit[graph]=${G[graph]}
        logit[count]=$count
        log_assoc logit
      else
        logit[err]="$file not found"
        log_assoc logit
      fi
    done
  fi
  # G[tdb] is a tdbloader command
  if [[ -n ${G[tdb]} ]]; then
    for file in "$@"; do
      if [[ -f $file ]]; then
        riot --formatted=ttl $file > $file.ttl
        log -v -v "tdb2.tdbloader --loc=${G[tdb]} --graph=${G[graph]} $file.ttl"
        count=$(tdb2.tdbloader --loc=${G[tdb]} --graph=${G[graph]} $file.ttl)

        log -v "load $file graph=${G[graph]} => $count"

      else
        log "$file not found"
      fi
    done
  fi
}

function groups() {
  local http="${G[util_http]} --check-status --session-read-only=${G[http_session]} --print=b "

  [[ -d ${G[cache]} ]] || err 1 "cache ${G[cache]} doesn't exist or isn't a directory"

  url_fetch --file=${G[cache]}/groups.xml ${G[api]}/groups
  xml2jsonld --type=groups ${G[cache]}/groups.xml
  load_jsonld ${G[cache]}/groups.jsonld
}

:<<=cut

=head2 users

  elements <global-elements> users username username ....

=head3 FEED OPTIONS

=over 4

=item B<--pubs|--no-pubs>

Whether to include publications in upload or not

=back

=cut


function users () {
  local opts=`$GETOPT -o g:u:pn --long tdb:,per-page:,groups:,detail:,usernames:,ids:,user-groups,pubs,no-pubs -n 'elements feed' -- "$@"`
  if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

  eval set -- "$opts"

  local run='--run'
  declare -A CMD;
  while true; do
	  case $1 in
      -g | --groups ) CMD[user_groups]=$2; shift 2;;
      -p | --pubs ) CMD[user_pubs]=1; shift ;;
      -n | --no-pubs ) CMD[user_pubs]=''; shift ;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  # Command line over Global G file
  for i in ${!CMD[@]}; do
    [[ -n ${CMD[$i]} ]] && G[$i]=${CMD[$i]};
  done

  local g n N uf;

  [[ -d ${G[cache]} ]] || err 1 "cache ${G[cache]} doesn't exist or isn't a directory"

  local selT="${G[util_xmlstarlet]} sel -T -N a=http://www.w3.org/2005/Atom"

  # Do we have any user_groups?
  if [[ -n ${G[user_groups]} ]] ; then
    for g in ${G[user_groups]//,/ }; do
      next="${G[api]}/users?group-membership=implicit&groups=${g}&detail=ref&per-page=250"
      let n=0;
      while [[ -n ${next} ]]; do
        printf -v N "%03d" $n
        fn=${G[cache]}/users.${g}.${N};
        url_fetch --no-overwrite --file=${fn}.xml "${next}"
        xml2jsonld --type=users ${fn}.xml
        next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn}.xml);
        let n+=1;
      done
    done
  fi;

  # Now loop through all users
  while [[ -n $1 ]]; do
    local username="$1@ucdavis.edu"
    next="${G[api]}/users?username=${username}&detail=full"
    let n=0;
    while [[ -n ${next} ]]; do
      printf -v N "%03d" $n
      fn=${G[cache]}/users.${username}.${N};
      url_fetch --no-overwrite --file=${fn}.xml "${next}"
      xml2jsonld --type=user ${fn}.xml
      load_jsonld ${fn}.jsonld
      next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn}.xml);
      let n+=1;
    done

    if [[ -n ${G[user_pubs]} ]] ; then
      # Get the user relationships, These never get added to the linked database,
      # they are just used to get the required relationships.
      for uf in ${G[cache]}/users.${username}.*.xml; do
        # Break into users for each relationship
        for id in $($selT -t -v '/a:feed/a:entry/api:object/@id' $uf); do
          next="${G[api]}/relationships?involving=user($id)&detail=ref&per-page=250"
          let n=0;
          while [[ -n ${next} ]]; do
            printf -v N "%03d" $n
            fn=${G[cache]}/user-relationships.${username}.${id}.${N};
            url_fetch --no-overwrite --file=${fn}.xml "${next}"
            # xml2jsonld --type=user-relationship ${fn}.xml
            # load_jsonld ${fn}.jsonld
            next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn}.xml);
            let n+=1;
          done
        done
      done

      # From the user-relationships, get the relationship itself.
      for fn in ${G[cache]}/user-relationships.${username}.*.xml; do
        local tfn=${fn//user-relationships/relationships}
        tfn=${tfn%.xml}
        ids=$($selT -t -v /a:feed/a:entry/api:relationship/@id ${fn} | sort -u | paste -sd ',' )
        if [[ -n $ids ]] ; then
          url_fetch --no-overwrite --file=${tfn}.xml "${G[api]}/relationships?ids=${ids}&detail=ref&per-page=250"
          xml2jsonld --type=relationship ${tfn}.xml
          load_jsonld ${tfn}.jsonld
        fi
      done

      # Finally, publications
      for fn in ${G[cache]}/user-relationships.${username}.*.xml; do
        local tfn =${fn//user-relationships/publications}
        tfn=${tfn%.xml}
        ids=$($selT -t -v "/a:feed/a:entry/api:relationship/api:related[@category='publication' and @direction='from']/@id" ${fn} | sort -u | paste -sd ',' )
        if [[ -n $ids ]] ; then
          next="${G[api]}/publications?ids=${ids}&detail=full"
          let n=0;
          while [[ -n ${next} ]]; do
            printf -v N "%03d" $n
            ttfn=${tfn}.${N};
            url_fetch --no-overwrite --file=${ttfn}.xml "$next"
            xml2jsonld --type=publication ${ttfn}.xml
            load_jsonld ${ttfn}.jsonld
            next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${ttfn}.xml);
            let n+=1;
          done
        fi
      done
    fi
    shift
  done
}

:<<=cut

=head2 publications

  cdl_elements <global-elements> publication id id id ...

=cut

function publications () {
  local opts=`$GETOPT -o p: --long prefix: -n 'cdl_elements publications' -- "$@"`
  if [ $? != 0 ] ; then echo "Bad Command Options." >&2 ; exit 1 ; fi

  eval set -- "$opts"

  local prefix='publications'

  declare -A CMD;
  while true; do
	  case $1 in
      -p | --prefix ) prefix=$2; shift 2 ;;
	    -- ) shift; break;;
	    *) shift; break;
    esac
  done

  local fn
  local next
  local n

  [[ -d ${G[cache]} ]] || err 1 "cache ${G[cache]} doesn't exist or isn't a directory"

  local selT="${G[util_xmlstarlet]} sel -T -N a=http://www.w3.org/2005/Atom"

  local ids="$@"

  if [[ -n ${ids} ]]; then
    next="${G[api]}/publications?ids=${ids}&detail=full"
    let n=0;
    while [[ -n ${next} ]]; do
      printf -v N "%03d" $n
      fn=${prefix}.${N};
      url_fetch --no-overwrite --file=${fn}.xml "$next"
      xml2jsonld --type=publication ${fn}.xml
      load_jsonld ${fn}.jsonld
      next=$(${selT} -t -v '//api:page[@position="next"]/@href' ${fn}.xml);
      let n+=1;
    done
  fi
}

: <<='cut'
=pod

=head1 DEPENDANCIES

Elements uses a number of external bash commands. These must be installed for
the elements script to work. These commands include httpie, xmlstarlet, and

=over 4

=item L<httpie|https://httpie.org/>

httpie is a command-line tool similar to B<curl>. Since we only really need the
authentication, it may be better to use curl here and the .netrc file instead.
It is nice to have the httpie interface however, for debugging.

=item L<xmlstarlet|http://xmlstar.sourceforge.net/>

xmlstarlet is a simplfied method to perform xslt transforms to XML documents on
the command-line.  The syntax is more concise the the XSLT transforms.

=item L<xmllint>

xmllint is simply used to format the output from elements, and verify that it's
okay. Since we are often looking at the intermediate files, it's nice to have
them formatted.

=item L<getopt>

${FLAGS_GETOPT_CMD:-getopt}

=back

=head1 AUTHOR

Quinn Hart <qjhart@ucdavis.edu>

=cut

OPTS=();
while true; do
	case $1 in
	  -*) OPTS+=($1); shift ;;
	  -- ) shift; break;;
	  *) break;
	esac
done

# Allow getopt to be somewhere else
GETOPT=${FLAGS_GETOPT_CMD:-getopt}

init "${OPTS[@]}"
main.cmd "$@"

exit 0;
