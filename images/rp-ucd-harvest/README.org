* RP harvester

 The idea here is create a more agile fuseki/jena system that can be used to
 create the file based inputs for our cloud computing environment.  Multiple
 versions can be started up at any given time, and used to populate the cloud
 based services.  They are not dependant on a centralized fuseki database,
 although they do have some shared read-only databases in the form of HDT files.

 +In addition, we hope this can be added to Apache Workflow in order to better+
 manage the task of incrementally adding up the users.  To that end, these are
 developed more for single docker image startup, rather than as part of a docker
 compose constellation.  In addtion, environmental variables are used as a
 primary source of variable exchange.+

 The image uses the standard [[https://jena.apache.org/documentation/fuseki2/fuseki-layout.html][fuseki layout]], FUSEKI_HOME and FUSEKI_BASE.
 This allows us to have the configuration files in the image.  The databases are
 not in their default location, but are instead at: /var/lib/fuseki/databases.
 The fuseki layout file identifies that we need remove the ${FUSEKI_BASE}/system
 and ${FUSEKI_BASE}/system_files to reset the server.  By default, the system runs fuseki as
 a normal user with out root elevation.  This is typically a volume mount that
 is ephemeral for the container's lifespan, but it can be bound to more
 persistent mounts.

 The containers are meant to run their function, and then stop.  However,
 commands allow the system to stay up for debugging purposes.

** Running the setup

   #+begin_src bash
     b=/home/quinn/ucdi/rp-ucd-harvest-person
     docker run --interactive --tty --rm --workdir=/home/ucd.process/workdir \
            --mount type=bind,source=b,target=/home/ucd.process/workdir \
            local-dev/ucdi-rp-ucd-harvest-person:main bash
   #+end_src

** Private database
   One idea is that we can periodically run one item to create our private
   database and our vocabularies, and then simply mount this volume among all
   the versions that are using this.  This allows us to have local tdb2 files
   for our data, so we can more quickly spin up a database.
*** Indices

    To further improve our setup, we should always add statistics to our
    databases, especially the ones that are not changing too quickly.

    The TDB [[https://jena.apache.org/documentation/tdb/optimizer.html][Optimizer]] gives information on creating the statistics to create
    better optimization strategies.
** Exporting

   #+begin_src bash
     dc exec fuseki curl http://fuseki:3030/vocabularies/get -H "Accept:application/ld+json" | gzip > vocabularies.json.gz
   #+end_src

** IAM example

   Here is an example of how you might use this container to include add all the
   IAM faculty to a fuseki instance.  We'll divide this into a few steps, for
   clarity where we push some of the data off the container for readability.

   #+begin_src bash
     export UCIDID_AUTH=ucd:*secret*
     docker run --interactive --tty --rm \
            -e UCDID_AUTH=${UCDID_AUTH} \
            localhost/local-dev/rp-ucd-harvest:main server
   #+end_src



** Creating the Docker instances

   Right now the creation of this docker instance is pretty hodge podge.  I'm
   getting the fuseki instance from the apache jena project directly.  Apache
   has the [[https://jena.apache.org/documentation/fuseki2/fuseki-docker.html][Fuseki Docker]] tools description.  The apache jena-docker doesn't
   include the full UI server, and is simply the services.  It's [[https://jena.apache.org/documentation/fuseki2/fuseki-configuration.html][configured]] with
   a single configuration file.

   The full server includes the UI, and also has shiro security enabled. This
   seems like it might be convenient, I need to investigate the [[https://jena.apache.org/documentation/fuseki2/fuseki-data-access-control.html][Access Control]]
   in more detail.

   Persistent files are mounted to /fuseki/databases,

#+begin_src bash
  JENA_VERSION=4.4.0
  git clone https://github.com/apache/jena.git
  docker build -t local-dev/jena-fuseki:${JENA_VERSION} --build-arg JENA_VERSION=${JENA_VERSION} jena/jena-fuseki2
#+end_src

The JENA build, I'm getting from the stain github, by way of my fork.  This is
probably something that needs looking into.

   #+begin_src bash
     git clone https://github.com/qjhart/jena-docker.git
     docker build --build-arg JENA-VERSION=${JENA_VERSION} --tag=local-dev/jena4:${JENA_VERSION} jena-docker/jena
   #+end_src


*** Fuseki

*** HDT Java

    I am looking at the possibility of using HDT files as read-only additions
    for the fuseki services.  This might be a more convenient method of sharing
    the slowly changing files.

    #+begin_src
HDT_VERSION=3.0.1
git clone --branch=v${HDT_VERSION} https://github.com/rdfhdt/hdt-java.git
docker build --tag=local-dev/hdt-java:${HDT_VERSION} hdt-java
    #+end_src
