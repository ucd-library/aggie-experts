services:
  gateway:
    image: &BASE ${D[org]}/base-service:${D[tag]}
    volumes:
      - fedora-data:/data
      - &SERVICE_ACCOUNT ${GCLOUD_SERVICE_ACCOUNT_MOUNT:-./service-account.json}:/etc/fin/service-account.json
      - &DEV_MOUNT_MODELS ./services/base-service/models:/fin/services/models
      - &DEV_MOUNT_MODELS_API ./experts-api:/experts-api
    ports:
      - ${HOST_PORT:-${D[port]}}:3000
    environment:
      - GCS_BUCKET=${GCS_BUCKET:-${D[gcs_bucket]}}
      - GCS_INIT_DATA_HYDRATION=${GCS_INIT_DATA_HYDRATION:-${D[gcs_init_data_hydration]}}
      - FIN_URL=${FIN_URL:-${D[host]}}
      - HOST_PORT=${HOST_PORT:-${D[port]}}
      - CLIENT_ENV=${CLIENT_ENV:-${D[client_env]}}
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID:-${D[oidc_client_id]}}
      - OIDC_BASE_URL=${OIDC_BASE_URL:-${D[oidc_base_url]}}
      - OIDC_SECRET=${OIDC_SECRET:-${D[oidc_secret]}}
      - JWT_SECRET=${JWT_SECRET:-${D[jwt_secret]}}
      - JWT_ISSUER=${JWT_ISSUER:-${D[jwt_issuer]}}
      - JWT_JWKS_URI=${JWT_JWKS_URI:-${D[jwt_jwks_uri]}}
      - FIN_SERVICE_ACCOUNT_NAME=${FIN_SERVICE_ACCOUNT_NAME:-${D[fin_service_account_name]}}
      - FIN_SERVICE_ACCOUNT_SECRET=${FIN_SERVICE_ACCOUNT_SECRET:-${D[fin_service_account_secret]}}
      - EXPERTS_IS_PUBLIC=${EXPERTS_IS_PUBLIC:-true}
    depends_on:
      fcrepo:
        condition: service_healthy
      redis:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    logging: &LOGGING
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"
    command: npm run gateway
    # command: bash -c 'tail -f /dev/null'

  # Fuseki is used to harvest data, and as a check on data as well
  fuseki:
    image: ${D[org]}/harvest:${D[tag]}
    logging: *LOGGING
    volumes:
      - *SERVICE_ACCOUNT
      - fuseki-data:/home/ucd.process
      - &DEV_MOUNT_CLIENT ./harvest/experts-client:/usr/local/lib/aggie-experts/experts-client
      - &DEV_MOUNT_CLIENT_API ./experts-api:/usr/local/lib/experts-api
    ports:
      - ${FUSEKI_PORT}:3030
    environment:
      - JVM_ARGS=${JVM_ARGS:- -Xmx16g -Djena:scripting=true}
      - GOOGLE_APPLICATION_CREDENTIALS=/etc/fin/service-account.json
    restart: unless-stopped
    command: server
    # command: noop


  ###
  # Fedora Repository
  ###
  fcrepo:
    image: ${D[build_org]}/fin-fcrepo:${D[fin_tag]}
    logging: *LOGGING
    ports:
      - ${FCREPO_PORT}:8080
   # Example for change logging.  Note, don't forget to still include the fcrepo.properties file location!
    # See: https://wiki.lyrasis.org/display/FEDORA6x/Logging
    # environment:
    #  - CATALINA_OPTS=-Dfcrepo.log.auth=DEBUG
    #  -Dfcrepo.config.file=/etc/fin/fcrepo.properties
    environment:
      - CATALINA_OPTS=-Dfcrepo.config.file=/etc/fin/fcrepo.properties -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Xms2G -Xmx6G -XX:+UseG1GC -XX:+DisableExplicitGC
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/fcrepo"]
      interval: 20s
      timeout: 5s
      retries: 3
    volumes:
      - fedora-data:/usr/local/tomcat/fcrepo-home/data
      - activemq-data:/usr/local/tomcat/ActiveMQ
      - *SERVICE_ACCOUNT

  ###
  # Fedora Postgres Service
  ###
  postgres:
    image: ${D[build_org]}/fin-postgres:${D[fin_tag]}
    logging: *LOGGING
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - pg-data:/var/lib/postgresql/data
    restart: unless-stopped

  init:
    image: ${D[org]}/init:${D[tag]}
    environment:
      - FIN_SERVICE_NAME=init
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID:-${D[oidc_client_id]}}
      - OIDC_BASE_URL=${OIDC_BASE_URL:-${D[oidc_base_url]}}
      - OIDC_SECRET=${OIDC_SECRET:-${D[oidc_secret]}}
      - FIN_SERVICE_ACCOUNT_NAME=${FIN_SERVICE_ACCOUNT_NAME:-${D[fin_service_account_name]}}
      - FIN_SERVICE_ACCOUNT_SECRET=${FIN_SERVICE_ACCOUNT_SECRET:-${D[fin_service_account_secret]}}
    volumes:
      - &DEV_MOUNT_INIT_FCREPO ./services/init/fcrepo-aggie-experts:/etc/ucdlib-service-init/fcrepo-aggie-experts
      - *SERVICE_ACCOUNT
    depends_on:
      fcrepo:
        condition: service_healthy
      gateway:
        condition: service_started

  redis:
    image: redis:3.2
    volumes:
      - redis-data:/data
    restart: unless-stopped

  ###
  # RabbitMQ - for messaging
  ###
  rabbitmq:
    image: ${D[build_org]}/fin-rabbitmq:${D[fin_tag]}
    logging: *LOGGING
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  spa:
    image: *BASE
    logging: *LOGGING
    volumes:
      - *SERVICE_ACCOUNT
      - &DEV_MOUNT_SPA ./services/base-service/spa:/fin/services/spa
    command: node spa/index.js
    environment:
      - GA4_ENABLE_STATS=${GA4_ENABLE_STATS:-${D[ga4_enable_stats]}}
      - GA4_MEASUREMENT_ID=${GA4_MEASUREMENT_ID:-${D[ga4_measurement_id]}}
      - CLIENT_ERROR_REPORTING_URL=${D[client_error_reporting_url]}
      - CLIENT_ERROR_REPORTING_KEY=${D[client_error_reporting_key]}
      - CLIENT_ERROR_REPORTING_ENABLED=${CLIENT_ERROR_REPORTING_ENABLED:-${D[client_error_reporting_enabled]}}
      - FIN_URL=${FIN_URL:-${D[host]}}
      - CLIENT_ENV=${CLIENT_ENV:-${D[client_env]}}
      - APP_VERSION=${APP_VERSION:-${D[tag]}}
      - EXPERTS_IS_PUBLIC=${EXPERTS_IS_PUBLIC:-true}
    depends_on:
      elasticsearch:
          condition: service_healthy
    restart: unless-stopped

  ###
  # External Database Sync Services
  ###
  dbsync:
    image: *BASE
    logging: *LOGGING
    environment:
      - FIN_URL=${FIN_URL:-${D[host]}}
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID:-${D[oidc_client_id]}}
      - OIDC_BASE_URL=${OIDC_BASE_URL:-${D[oidc_base_url]}}
      - OIDC_SECRET=${OIDC_SECRET:-${D[oidc_secret]}}
      - JWT_SECRET=${JWT_SECRET:-${D[jwt_secret]}}
      - JWT_ISSUER=${JWT_ISSUER:-${D[jwt_issuer]}}
      - JWT_JWKS_URI=${JWT_JWKS_URI:-${D[jwt_jwks_uri]}}
      - FIN_SERVICE_ACCOUNT_NAME=${FIN_SERVICE_ACCOUNT_NAME:-${D[fin_service_account_name]}}
      - FIN_SERVICE_ACCOUNT_SECRET=${FIN_SERVICE_ACCOUNT_SECRET:-${D[fin_service_account_secret]}}
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - *SERVICE_ACCOUNT
      - *DEV_MOUNT_MODELS
      - *DEV_MOUNT_MODELS_API
    restart: unless-stopped
    command: npm run dbsync
    # command: bash -c 'tail -f /dev/null'

  # ###
  # # GCS - Sccess & Sync
  # ###
  gcs:
    image: *BASE
    environment:
      - GCS_BUCKET=${GCS_BUCKET:-${D[gcs_bucket]}}
      - GCS_INIT_DATA_HYDRATION=${GCS_INIT_DATA_HYDRATION:-${D[gcs_init_data_hydration]}}
      - GOOGLE_PUBSUB_SUBSCRIPTION_NAME=${GCS_BUCKET:-${D[gcs_bucket]}}
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID:-${D[oidc_client_id]}}
      - OIDC_BASE_URL=${OIDC_BASE_URL:-${D[oidc_base_url]}}
      - OIDC_SECRET=${OIDC_SECRET:-${D[oidc_secret]}}
      - JWT_SECRET=${JWT_SECRET:-${D[jwt_secret]}}
      - JWT_ISSUER=${JWT_ISSUER:-${D[jwt_issuer]}}
      - JWT_JWKS_URI=${JWT_JWKS_URI:-${D[jwt_jwks_uri]}}
      - FIN_SERVICE_ACCOUNT_NAME=${FIN_SERVICE_ACCOUNT_NAME:-${D[fin_service_account_name]}}
      - FIN_SERVICE_ACCOUNT_SECRET=${FIN_SERVICE_ACCOUNT_SECRET:-${D[fin_service_account_secret]}}
    depends_on:
      elasticsearch:
        condition: service_healthy
      init:
        condition: service_completed_successfully
      gateway:
        condition: service_started
    volumes:
      - *SERVICE_ACCOUNT
    command: npm run gcs
    # command: bash -c 'tail -f /dev/null'

  ###
  # Search
  ###
  elasticsearch:
    image: ${D[build_org]}/fin-elastic-search:${D[fin_tag]}
    logging: *LOGGING
    environment:
      - node.name=elasticsearch
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms4g -Xmx4g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ['CMD-SHELL', 'if curl -s -o /dev/null -w "%{http_code}" http://localhost:9200/_ingest/pipeline/aggie-experts-pipeline | grep -q "200"; then exit 0; else curl -X PUT -H "Content-Type: application/json" -d ''{"description":"Adds a modified-date field","processors":[{"set":{"field":"modified-date","value":"{{_ingest.timestamp}}"}}]}'' http://localhost:9200/_ingest/pipeline/aggie-experts-pipeline || exit 1; fi']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    # command: bash -c 'tail -f /dev/null'

  kibana:
    image: docker.elastic.co/kibana/kibana:8.4.3
    logging: *LOGGING
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SERVER_BASEPATH=/kibana
      - SERVER_REWRITEBASEPATH=true
      - xpack.security.enabled=false
      - telemetry.enabled=false
    depends_on:
      elasticsearch:
        condition: service_healthy

  uber:
    image: *BASE
    logging: *LOGGING
    environment:
      - FIN_SERVICE_NAME=uber
      - FIN_URL=${FIN_URL:-${D[host]}}
      - HOST_PORT=${HOST_PORT:-${D[port]}}
      - CLIENT_ENV=${CLIENT_ENV:-${D[client_env]}}
      - CDL_PROPAGATE_CHANGES=${CDL_PROPAGATE_CHANGES:-${D[cdl_propagate_changes]}}
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID:-${D[oidc_client_id]}}
      - OIDC_BASE_URL=${OIDC_BASE_URL:-${D[oidc_base_url]}}
      - OIDC_SECRET=${OIDC_SECRET:-${D[oidc_secret]}}
      - JWT_SECRET=${JWT_SECRET:-${D[jwt_secret]}}
      - JWT_ISSUER=${JWT_ISSUER:-${D[jwt_issuer]}}
      - JWT_JWKS_URI=${JWT_JWKS_URI:-${D[jwt_jwks_uri]}}
      - FIN_SERVICE_ACCOUNT_NAME=${FIN_SERVICE_ACCOUNT_NAME:-${D[fin_service_account_name]}}
      - FIN_SERVICE_ACCOUNT_SECRET=${FIN_SERVICE_ACCOUNT_SECRET:-${D[fin_service_account_secret]}}
      # - OTEL_LOG_LEVEL=DEBUG
      - FIN_METRICS_ENABLED=${FIN_METRICS_ENABLED:-true}
      - FIN_METRICS_FS_ENABLED=${FIN_METRICS_FS_ENABLED:-true}
      - FIN_METRICS_FIN_ENABLED=${FIN_METRICS_FIN_ENABLED:-true}
      - FIN_METRICS_FCREPO_ENABLED=${FIN_METRICS_FCREPO_ENABLED:-true}
      - FIN_METRICS_EXPORT_GC=${FIN_METRICS_EXPORT_GC:-false}
      - EXPERTS_IS_PUBLIC=${EXPERTS_IS_PUBLIC:-true}
    volumes:
      - fs-tests:/fs-tests
      - *SERVICE_ACCOUNT
      - *DEV_MOUNT_SPA
      - *DEV_MOUNT_MODELS
      - *DEV_MOUNT_MODELS_API
    depends_on:
      elasticsearch:
        condition: service_healthy
    command: npm run uber
  # command: bash -c 'tail -f /dev/null'

  pg-rest:
    image: ${D[build_org]}/fin-pg-rest:${D[fin_tag]}
    logging: *LOGGING
    volumes:
      - *SERVICE_ACCOUNT
    # command: bash -c "tail -f /dev/null"

###
# Docker data volumes
###
volumes:
  fs-tests:
    driver: local
  activemq-data:
    driver: local
  fuseki-data:
    driver: local
  fedora-data:
    driver: local
  pg-data:
    driver: local
  es-data:
    driver: local
  redis-data:
    driver: local
  rabbitmq-data:
    driver: local
