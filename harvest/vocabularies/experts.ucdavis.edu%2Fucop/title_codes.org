* Title Codes
:PROPERTIES:
:header-args:http: :host localhost:8081
:header-args:sparqlx: :url http://sparql.org/sparql :format text/csv
:header-args:sparql: :url http://localhost:8081/vocabularies/sparql :format text/csv
:END:

** Standard Prefixes
All of the queries throughout this document use these standard prefixes.  The
~oap~ and the ~api~ are from the API calls, the rest are used in new creations.

#+name: local-prefixes
#+BEGIN_SRC sparql :no-tangle
  PREFIX cto: <http://experts.ucdavis.edu/cto/>
  PREFIX dcterms: <http://purl.org/dc/terms/>
  PREFIX experts: <http://experts.ucdavis.edu/>
  PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  PREFIX pos: <http://experts.ucdavis.edu/position/>
  PREFIX ucdlib:   <http://schema.library.ucdavis.edu/schema#>
  PREFIX vivo:  <http://vivoweb.org/ontology/core#>
  PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
#+END_SRC

** Value Tables
*** Employee Class
These are the items that were sent to me from Brian Darnell, which he sez is
directly from UC Path.  However, I can't find a match from title_codes to these
class codes anyways.

#+name: class-codes
#+BEGIN_SRC sparql :no-tangle
  VALUES (?emplclass ?empclass_description ?empclass_shortname) {
    ("Staff" "Staff" "Staff")
    ("Academic" "Academic" "Academic")
    ("Student" "Student" "Student")
    ("1" "Staff:Contract" "Contract")
    ("10" "Academic:Non Faculty" "Non Fac")
  ("11" "Academic:Academic Student" "Ac Student")
  ("13" "Staff:Contingent Worker" "CWR Staff")
  ("14" "Academic:Contingent Worker" "CWR Acad")
  ("15" "Staff:Rehired Retireee" "RehRetiree")
  ("2" "Staff:Career" "Career")
  ("20" "Academic:Conversion" "Ac Conv")
  ("21" "Academic:Emeriti" "Ac Emeriti")
  ("22" "Academic:Deans/Faculty Admin" "Ac Dean/FA")
  ("23" "Academic:Post Docs" "Ac PostDoc")
  ("24" "Academic:Medical Residents" "Ac Med Res")
  ("3" "Academic:Recall" "Ac Recall")
  ("4" "Staff:Limited" "Limited")
  ("5" "Student:Casual/Restricted" "Student")
  ("6" "Staff:Per Diem" "Per Diem")
  ("7" "Staff:Partial Year Career" "PartYrCar")
  ("8" "Staff:Floater" "Floater")
  ("9" "Academic:Faculty" "Ac Faculty")
  ("C" "Converstion Use Only" "Conv")
  }
#+END_SRC

*** UCOP Title codes

    I start with the table from the UCOP title code pages, [[https://www.ucop.edu/academic-personnel-programs/compensation/academic-ctos-titles-and-title-codes/index.html][Academic Personnel
    and Programs]].  Currently, the easiest way to convert, is to cut this file in
    chrome, paste it in a text file, run ~sort -u~ over it, and then selectively
    remove the extraneous rows (the page headings).  The last time I did that
    was 2023-12-11, to get acedemic_titles.txt.  The file is created in the Makefile.

*** CTO codes

    CTO Code are the primary methodology to determine whether people are in the
    acedemic senate or federation.  There is not an exact correspondance between
    CTO codes, and these titles (although for senate CDL sez there is), so we
    also need the title codes.  There is no API to get CTO codes from IAM, so
    these are included as a table of data.

    You can generate this from ~acedemic_titles.txt~ with:

*** Title Codes

    We use the IAM pps title codes as the UC Davis definitive reference for
    titles on campus.  There exists a pps.title_code API to extract these
    codes.  IAM does not supply the CTO codes for the title codes, so we need to
    add that as another set of data.

    #+begin_src bash :results file :wrap SRC json :file title_codes.json
           cat academic_titles.txt |\
               sed -e 's/^\(...\).* \(......\) \(.*\)/{"cto":"cto:\1","@id":"\2", "name":"\3"}/' |  jq --slurp '{"context":{"@vocab":"http://schema.library.ucdavis.edu/schema#","@base":"http://experts.ucdavis.edu/cto/"}} + {"@graph":.}'
    #+end_src


** Academic Title Codes and Concepts Organization

For Academic titles, the [[https://www.ucop.edu/academic-personnel-programs/compensation/academic-ctos-titles-and-title-codes/index.html][Academic Personnel and Programs]] page includes
information you need about the titles and codes for Academic. I retrieved this
page on 2021-02-08 and converted that to a CSV file.  Vessela received an email
from Brian Darnell, on Feb 9th, that includes the CTO codes that are in the
senate and the federation.  Alainna Wrigley sent us the UCOP complete list of
Title Codes on 2021-02-16, this includes all codes, not just title codes.
Vessela forwarded a list of CTO codes (On Feb 5th).  This includes whether they
are active or not. This is currently not included.

[[https://academicaffairs.ucdavis.edu/academic-federation][Academic Federation]] has some information, but these are in terms of title series
codes, and how do they compare to title codes?

All of these were combined in a single spreadsheet, better to communicate the
issues with other agencies.

#+name: types
#+BEGIN_SRC sparql :noweb yes :tangle positions.rq
  <<local-prefixes>>
  construct {
    ?id a ucdlib:AcademicMember,?senate_member,?federation_member;
      ?p ?o;
  }
  WHERE {
    ?id ucdlib:cto ?cto;
        ?p ?o;
        .
    OPTIONAL {
      values ?senate_code {
        cto:010 cto:011 cto:012 cto:016 cto:114
        cto:210 cto:211 cto:214 cto:216
        cto:311 cto:316 cto:317 }
      ?id ucdlib:cto ?senate_code.
      bind (ucdlib:SenateMemeber as ?senate_member)
    }
    OPTIONAL {
      values ?federation_code {
        cto:040 cto:225
        cto:335 cto:341
        cto:530 cto:531 cto:534 cto:541 cto:557
        cto:621 cto:627 cto:729 cto:825 cto:S46 cto:S56
      }
      ?id ucdlib:cto ?federation_code.
      bind (ucdlib:FederationMember as ?federation_member)
    }
    OPTIONAL {
      values ?exception { pos:001759 pos:001761 pos:001781 pos:001784 pos:001785 }
      ?id ucdlib:cto cto:341.
      filter (?id != ?exception)
      bind (ucdlib:FederationMember as ?federation_member)
    }
    OPTIONAL {
      values ?exception {
        pos:003227 pos:003217 pos:003211 pos:003207
        pos:001990 pos:001991 pos:001992 pos:001993
        pos:001994 pos:001995 }
      ?id ucdlib:cto cto:541.
      filter (?id != ?exception)
      bind (ucdlib:FederationMember as ?federation_member)
    }
    OPTIONAL {
      values ?exception {
        pos:003403 pos:003404 pos:003405 pos:003406 pos:003407 pos:003408
      }
      ?id ucdlib:cto cto:581.
      filter (?id != ?exception)
      bind (ucdlib:FederationMember as ?federation_member)
    }
    OPTIONAL {
      values ?include {
        pos:001550 pos:002220 pos:002221 pos:002222 pos:002223
        pos:003300 pos:003301 pos:003310 pos:003311 pos:003320
        pos:003321 pos:003572 pos:003575 pos:001650 pos:001675
        pos:002210 pos:002211 pos:002284 pos:002285 pos:003800 }
      filter(?id = ?include)
      bind (ucdlib:FederationMember as ?federation_member)
    }
  }
#+END_SRC

** CTO Logic

*** Senate

    CDL uses these simple guidelines for senate membership

    CTO code in 010 011 012 016 114 210 211 214 216 311 316 317

*** Academic Federation Logic


 #+BEGIN_EXAMPLE
 (LIB.JOB_CD_OCUPTNL_SUBGRP_CD in
 ('040','225','335','530','531','534','557','621','627','729','825','S46','S56')
 or (LIB.JOB_CD_OCUPTNL_SUBGRP_CD = '341' and LIB.JOB_CD not in ('001759','001761',
 '001781','001784','001785'))
 or (LIB.JOB_CD_OCUPTNL_SUBGRP_CD = '541' and LIB.JOB_CD not in ('003227','003217',
 '003211','003207','001990','001991','001992','001993','001994','001995'))
 or (LIB.JOB_CD_OCUPTNL_SUBGRP_CD = '581' and LIB.JOB_CD not in ('003403','003404',
 '003405','003406','003407','003408'))
 or LIB.JOB_CD in ('001550','002220','002221','002222','002223','003300','003301',
 '003310','003311','003320','003321','003572', '003575','001650', '001675',
 '002210','002211', '002284', '002285','003800'))
 and LIB.JOB_CD_EFF_STAT_CD = 'A'
 and LIB.JOB_CD_EFF_DT = (select max(LIB2.JOB_CD_EFF_DT) from LIBRARY_DM.JOB_CODE_D_V LIB2
 where LIB.JOB_CD = LIB2.JOB_CD and LIB2.JOB_CD_EFF_STAT_CD = 'A'))
 #+END_EXAMPLE

 #+BEGIN_SRC sparql :noweb yes :no-tangle :format raw :wrap "SRC ttl"
 <<prefixes>>
 construct {
 } WHERE {
   position:
 #+END_SRC
