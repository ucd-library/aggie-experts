:header-args:sparql: :url http://localhost:8081/experts/sparql :format text/csv

* Sparql Queries
Some of the sparql queries are written in this area

#+name: prefixes
#+begin_src sparql :tangle no
  # THIS FILE GENERATED FROM ../README.org
  PREFIX : <http://oapolicy.universityofcalifornia.edu/vocab#>
  PREFIX bibo: <http://purl.org/ontology/bibo/>
  PREFIX cdl: <http://oapolicy.universityofcalifornia.edu/>
  PREFIX cite: <http://citationstyles.org/schema/>
  PREFIX expert: <http://experts.ucdavis.edu/expert/>
  PREFIX experts: <http://experts.ucdavis.edu/>
  PREFIX kfs: <ark:/87287/d7gt0q/schema#>
  PREFIX list: <http://jena.apache.org/ARQ/list#>
  PREFIX obo: <http://purl.obolibrary.org/obo/>
  PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  PREFIX ucdlib: <http://schema.library.ucdavis.edu/schema#>
  PREFIX vcard: <http://www.w3.org/2006/vcard/ns#>
  PREFIX venue: <http://experts.ucdavis.edu/venue/>
  PREFIX vivo: <http://vivoweb.org/ontology/core#>
  PREFIX work: <http://experts.ucdavis.edu/work/>
  PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
#+end_src

** Expert
*** username
    This is the component that gets bound in the splay command at a later date.

 #+name: username
 #+begin_src sparql :tangle no
   "quinn@ucdavis.edu"
 #+end_src

 #+name: username+
 #+begin_src sparql :tangle no
   ?USERNAME_
 #+end_src

*** IAM data

    This is the section we'll update at a later time, when we move to the normal
    expert command.

    #+name:iam_data
    #+begin_src sparql
      graph <http://iam.ucdavis.edu/> {
        ?user a ucdlib:Expert .
        ?iam_s ?iam_p ?iam_o.
        OPTIONAL {
          ?iam_o vcard:title ?iam_o_title.
        }
        filter(regex(str(?iam_s),concat('^',str(?user),'#?')))
        filter(?iam_p != ucdlib:userId)
      }
    #+end_src

*** CDL data

    Later, we'll remove all the graphs from this arrangment, to simply the graph
    functions.

    #+name: cdl_data
    #+begin_src sparql :noweb yes :tangle no
      GRAPH <http://oapolicy.universityofcalifornia.edu/> {
        ?cdl_id :category "user";
                :is-public "true";
                :is-login-allowed "true";
                :username <<username>>;
         :last-name ?ln;
         :first-name ?fn;
         :user-identifier-associations ?assoc;
         .
        ?assoc :user-id ?oapolicy_id.

        OPTIONAL {
          ?cdl_id :position ?title.
        }
        OPTIONAL {
          ?cdl_id :department ?dept.
        }

        OPTIONAL {
          values ?assoc_scheme { "researcherid" "orcid" "scopus-author-id" "figshare-for-institutions-user-account-id" }
          ?assoc :user-identifier-association [ :field-value  ?assoc_value ; :scheme ?assoc_scheme ].
        }
        OPTIONAL {
          values (?oap_scheme ?id_pred) {
            ("researcherid" vivo:researcherId)
            ("orcid" vivo:orcidId)
            ("scopus-author-id" vivo:scopusId) }
          ?assoc :user-identifier-association [ :field-value  ?id_value ; :scheme ?oap_scheme ].
        }
        OPTIONAL {
          ?cdl_id :records ?records.
        }
      }
    #+end_src

*** Complete Query
   #+name: expert
   #+begin_src sparql :noweb yes :tangle expert/foo.rq :url http://localhost:3030/quinn/sparql :formatx raw :wrapx _SRC ttl
       <<prefixes>>
       select *
       WHERE {
       bind(uri(concat(str(expert:),MD5(<<username>>))) as ?user)
       bind(concat('expert:',MD5(<<username>>)) as ?user_id)
       <<iam_data>>
       <<cdl_data>>
         bind(uri(concat(str(expert:),MD5(?USERNAME__))) as ?user)
         bind(concat(?fn," ",?ln) as ?name)
         bind(uri(concat(str(?user),"#vcard-oap-1")) as ?vcard)
         bind(uri(concat(str(?vcard),"-name")) as ?vcard_name)
         bind(concat('ark:/87287/d7mh2m/user/',?oapolicy_id) as ?oapolicy_ark)
         bind(uri(concat(str(?user),"#oapolicyId")) as ?identifier_oapolicy_id)
         bind(uri(concat(str(?user),"#identifier-",?assoc_scheme,"-",?assoc_value)) as ?assoc_identifier)
       }
   #+end_src

** Authorship
*** records

The records are used in multiple locations, in the query.  We select the three
best records, and only ever look at those.  You can also set a specific
relationship here for testing.

 #+name: relationship_do_not_use
 #+begin_src sparql :tangle no
    BIND(<http://oapolicy.universityofcalifornia.edu/2454169> as ?RELATIONSHIP__)
 #+end_src

 #+name: relationship
 #+begin_src sparql :tangle no
 #+end_src

 #+name: records
 #+begin_src sparql :noweb yes :tangle no
     select (?RELATIONSHIP__ as ?relationship) ?pub ?record ?source ?score
   WHERE {
     <<relationship>>
     graph cdl: {
           VALUES (?source ?order) {
            ("verified-manual" 1)("repec" 2)("dimensions" 3)("pubmed" 4)
             ("scopus" 5)("wos" 6) ("wos-lite" 7)("crossref" 8)("epmc" 9)
             ("arxiv" 10)("orcid" 11)("dblp" 12)
             ("cinqii-english" 13)("figshare" 14)
             ("cinii-japanese" 15)("manual" 16)("dspace" 17) }

       ?RELATIONSHIP__ :type "publication-user-authorship";
                       :related ?pub;
                       .

       # This needs to include grants later
       ?pub :category "publication";
                    :records/:record ?record.
           ?record :source-name ?source.

       OPTIONAL {
         ?record :native/:field/:name "doi".
         bind(-10 as ?boost)
       }
       bind(coalesce(?boost,0)+?order as ?score)
     }
   } order by ?score
 #+end_src

*** Authorship rank

    We search for the very first record that identifies a specific rank for the
    user, that we can then add into our relationship

 #+name: relationship_rank
 #+begin_src sparql :noweb yes :tangle no
   select ?username ?relationship (?pos+1 as ?user_rank)
   WHERE {
     {
       <<records>>
     }
     graph cdl: {
       ?relationship :related ?user.
       ?user :category "user";
             :is-public "true";
             :username ?username;
             .

       ?record :native/:field ?field.
       ?field :name "authors";
              :people/:person [ list:index(?pos ?elem) ] .
       ?elem :links/:link ?user.   # This is the link to the relationship user

     }
   } limit 1
 #+end_src

*** Minimum Field Score

    This is where we identify the record to use for every field.  This is also
    where we limit the fields to what we need, and assign a field predicate to
    the item.
 #+name:minimum_field_score
 #+begin_src sparql :noweb yes :tangle no
   select ?relationship ?pub ?field_name ?field_predicate (?min_score as ?score)
   WHERE {
     {
       select ?relationship ?pub ?field_name  (min(?score) as ?min_score)
       WHERE {
         {
           <<records>>
         }
         graph cdl: {
           ?record :native/:field/:name ?field_name
         }
       }  group by ?relationship ?pub ?field_name
     }
     VALUES(?field_name ?field_predicate) {
       ("abstract" cite:abstract)
       ("authors" cite:EXPANDED) # This gets expanded below
       ("doi" cite:DOI)
       ("edition" cite:edition)
       ("eissn" cite:eissn)
       ("external-identifiers" cite:)
       ("is-open-access" ucdlib:is-open-access)
       ("isbn-10" cite:ISBN)
       ("isbn-13" cite:ISBN)
       ("issn" cite:ISSN)
       ("issue" cite:issue)
       ("journal" cite:container-title)
       ("keywords" cite:keyword)
       ("language" cite:language)
       #("location" cite:)
       ("medium" cite:medium)
       ("name-of-conference" cite:container-title)
       ("notes" cite:note)
       ("number" cite:collection-number)
       ("oa-location-url" cite:url)
       ("online-publication-date" cite:available-date) # EXPANDED below
       ("pagination" cite:page) #EXPANDED below
       ("parent-title" cite:container-title)
       ("place-of-publication" cite:publisher-place)
       ("public-url" cite:url)
       ("publication-date" cite:issued) # EXPANDED below
       ("publication-status" cite:status) #EXPANDED below
       ("publisher" cite:publisher)
       ("publisher-licence" cite:license)
       ("series" cite:collection-number)
       ("thesis-type" cite:genre) # Hopefully cite:type set correctly
       ("title" cite:title)
       ("volume" cite:volume)
     }
   }
 #+end_src
\
*** Complete query

    These are combined with a contruct, and several field special processing for
    our complete authorship query.

    The binds are all moved to the bottom, because for whatever reason that
    makes the query go faster.
 #+name: complete
 #+begin_src sparql :noweb yes :tangle authorship/construct.rq :url http://localhost:3030/jeisen/sparql :format raw :wrap _SRC ttl
   <<prefixes>>
   construct {
     ?authorship a vivo:Authorship, ucdlib:Authorship;
                   ucdlib:favorite ?favorite;
                   ucdlib:is-visible ?visible;
                   vivo:relates ?expert,?work;
                   vivo:rank ?user_rank;
                   .

     # Now the actual work as well
     ?work a ?bibo_type;
           bibo:status ?vivoStatus;
           .

     ?work a ucdlib:Work;
           cite:type ?cite_type;
           cite:genre ?cite_genre;
           cite:status ?status;
           cite:page ?page;
           ?field_predicate ?field_value;
           cite:issued ?pub_datestr;
           cite:date-available ?opub_datestr;
           vivo:relatedBy ?authorship;
           .

     ?work  cite:author ?author.

     ?author vivo:rank ?rank;
             cite:family ?authorFamilyName;
             cite:given ?authorGivenName;
             .

     # This needs to be stored as a journal
     ?work vivo:hasPublicationVenue ?journalURI .
     # This needs adding via indirect link
     ?journalURI vivo:publicationVenueFor ?experts_work_id .

     ?journalURI rdfs:label ?journal_title;
                 vivo:issn ?issn;
                 .
   }
   #  select ?field_predicate ?field_value
   #describe ?field
   WHERE {
     {
       {
         <<minimum_field_score>>
       }
       {
         <<records>>
       }
       graph cdl: {
         ?record :source-name ?source;
                 :native/:field ?field.
         ?field :name ?field_name.
         OPTIONAL {
           ?field :text ?field_value ;
           .
         }
         # This is a tricky way to add in some optional extensntion from the field_names above.
         OPTIONAL {
           VALUES (?status ?vivoStatus) {
             ( "Published" bibo:published )
             ( "Published online" bibo:published )
             ( "Accepted" bibo:accepted )
           }
           ?field :text ?status.
           filter(?field_name="publication-status")
         }
         OPTIONAL {
           ?field :date ?pub_date.
           ?pub_date :year ?pub_year.
           filter(?field_name="publication-date" )
           OPTIONAL {
             ?pub_date :month ?pub_m_raw.
             OPTIONAL {
               ?pub_date :day ?pub_d_raw.
             }
           }
         }
         OPTIONAL {
           ?field :date ?opub_date.
           ?opub_date :year ?opub_year.
           filter(?field_name="online-publication-date" )
           OPTIONAL {
             ?opub_date :month ?opub_m_raw.
             OPTIONAL {
               ?opub_date :day ?opub_d_raw.
             }
           }
         }

         OPTIONAL {
           ?field :pagination [ :begin-page ?begin ].
           OPTIONAL {
             ?field :pagination [ :end-page ?end ].
           }
         }
         # Authors
         #Authors are combined lists of people
         OPTIONAL {
           ?field :people/:person [ list:index(?pos ?elem) ] .
           OPTIONAL {
             ?elem :links/:link ?user.   # This is the link to the relationship user
             bind(?pos as ?user_pos)
           }
           OPTIONAL {
             ?elem :last-name ?authorFamilyName .
           }
           OPTIONAL {
             ?elem :first-names ?authorGivenName .
           }
         }
       }
     }
     {
       <<relationship_rank>>
     }
     graph cdl: {
       ?relationship :type "publication-user-authorship";
                     :is-visible ?visible_str;
                     :type ?type;
                     :related ?pub;
                     .

       ?pub :type ?oap_type;
            :last-modified-when ?lastModifiedWhen;
            .

       VALUES(?oap_type ?cite_include ?bibo_type ?cite_type ?cite_genre) {
         ("book" true bibo:Book "book" undef)
         ("chapter" true bibo:Chapter "chapter" undef)
         ("conference" true vivo:ConferencePaper "paper-conference" undef)
         ("journal-article" true bibo:AcademicArticle "article-journal" undef)
         # false
         #("dataset" false ucdlib:Work "dataset" "")
         #("internet-publication" false ucdlib:Work "webpage" "")
         #("media" false ucdlib:Work "article" "media")
         #("other" false ucdlib:Work "article" "other")
         #("poster" false ucdlib:Work "speech" "poster")
         #("preprint" false ucdlib:Preprint "article" "preprint" )
         #("presentation" false ucdlib:Work "speech" "presentation")
         #("report" false ucdlib:Work "report" "")
         #("scholarly-edition" false ucdlib:Work "manuscript" "scholarly-edition")
         #("software" false ucdlib:Work "software" "")
         #("thesis-dissertation" false ucdlib:Work "thesis" "dissertation")
       }
       # Filter out MinorWorks
       #filter(?cite_include = true)

       OPTIONAL {
         ?relationship :is-favourite "true".
         bind(true as ?favorite)
       }
       # Now we take CDLs preferred term
       OPTIONAL {
         ?pub :journal [ :issn ?issn; :title ?journal_title ].
       }
     }
     # EXPERTS ids
     BIND(xsd:dateTime(?lastModifiedWhen) AS ?lastModifiedDateTime)
     BIND(concat(?begin,coalesce(concat('-',?end),'')) AS ?page)
     bind(uri(replace(str(?relationship),str(cdl:),"ark:/87287/d7mh2m/relationship/")) as ?authorship)
     bind(uri(replace(str(?pub),str(cdl:),"ark:/87287/d7mh2m/publication/")) as ?work)
     bind(uri(concat(str(expert:),md5(?username))) as ?expert)
     # pub date
     BIND(concat("-",IF(xsd:integer(?pub_m_raw) < 10, CONCAT("0", ?pub_m_raw), ?pub_m_raw)) AS ?pub_month)
     BIND(concat("-",IF(xsd:integer(?pub_d_raw) < 10, CONCAT("0", ?pub_d_raw), ?pub_d_raw)) AS ?pub_day)
     bind(xsd:boolean(?visible_str) as ?visible)

     BIND(concat("-",IF(xsd:integer(?opub_m_raw) < 10, CONCAT("0", ?opub_m_raw), ?opub_m_raw)) AS ?opub_month)
     BIND(concat("-",IF(xsd:integer(?opub_d_raw) < 10, CONCAT("0", ?opub_d_raw), ?opub_d_raw)) AS ?opub_day)
     BIND(CONCAT(?opub_year, COALESCE(?opub_month, ""), COALESCE(?opub_day, "")) AS ?opub_datestr)
     BIND(CONCAT(?pub_year, COALESCE(?pub_month, ""), COALESCE(?pub_day, "")) AS ?pub_datestr)
     # journal
     BIND(uri(concat(str(venue:),"urn:issn:",?issn)) as ?journalURI)
     # authors
     BIND(uri(concat(replace(str(?pub),str(cdl:),"ark:/87287/d7mh2m/publication/"),"#",str(?pos+1))) as ?author)
     BIND(?pos+1 as ?rank)

   }
 #+end_src

** Grant

   We need to do grants in a similar way to authorship.

    #+name: grant_relationship
    #+begin_src sparql :tangle no
      ?RELATIONSHIP__
    #+end_src

    #+name: grant_relationship+
    #+begin_src sparql :tangle no
      <ark:/87287/d7mh2m/relationship/13340713>
    #+end_src

*** best grant record

    The records are used in multiple locations in the query.  We currently don't
    have multiple records so we just take one, but this is where that might change.

 #+name: grant_record
 #+begin_src sparql :noweb yes :tangle no
   {
     select ?relationship ?grant_id ?record ?source
     WHERE {
       {
         select ?relationship ?g (min(?id) as ?wanted_source_id)
         WHERE {
           bind(<<grant_relationship>> as ?relationship)
           graph cdl: {
             <<grant_relationship>> :related ?g.

             ?g :category "grant";
                :records/:record/:source-id ?id;
                .
           }
         }  group by ?relationship ?g
       }
       ?g :records/:record ?record;
          .
       ?record :source-name  ?source;
               :source-id ?wanted_source_id;
               :id-at-source ?grant_id;
               .
     }
   }
 #+end_src

*** Wanted Roles

    There are a number of roles that we currently aren't using:

    #+begin_src sparql :tangle no
      VALUES (?role ?tid ?vivo_role ) {
      #       (:GrantOtherRole "138" "Researcher on" )
      #       (:GrantProjectLeaderRole "118" "Project Lead of")
      #       (:GrantProgramDirectorRole "137" "Program Director of")
      #       (:GrantCoreLeaderRole "119" "Co leader on")
      #       (:GrantKeyPersonnelRole "97" "Senior personal of")
           }
    #+end_src

    #+name: grant_roles
    #+begin_src sparql :tangle no
      VALUES (?cdl_type ?vivo_role ) {
        ("user-grant-principal-investigation" vivo:PrincipalInvestigatorRole)
        ("user-grant-co-principal-investigation" vivo:CoPrincipalInvestigatorRole)
        ("user-grant-senior-key-personnel" vivo:ResearcherRole )
        ("user-grant-co-primary-investigation" vivo:CoPrincipalInvestigatorRole)
        ("user-grant-primary-investigation" vivo:PrincipalInvestigatorRole)
        ("user-grant-program-direction" vivo:LeaderRole)
        ("user-grant-project-leadership" vivo:LeaderRole)
        ("user-grant-research" vivo:ResearcherRole)
      }
    #+end_src

    There were also old style KFS roles that are no longer used:
    #+begin_example
#        VALUES (?grant_role ?ucd_role ?vivo_role) {
#    ("PDIR" kfs:GrantProgramDirectorRole vivo:LeaderRole)
#    ("KP" kfs:GrantKeyPersonnelRole vivo:ResearcherRole)
##    ("OTHR" kfs:GrantOtherRole vivo:ResearcherRole)
#    ("PLDR" kfs:GrantProjectLeaderRole vivo:LeaderRole)
#    ("COPI" kfs:GrantCoPrincipalInvestigatorRole vivo:CoPrincipalInvestigatorRole)
#    ("PI" kfs:GrantPrincipalInvestigatorRole vivo:PrincipalInvestigatorRole )
#    ("CLDR" kfs:GrantCoreLeaderRole vivo:ResearcherRole)
##    ("ACCT-COPI" kfs:GrantAccountManagerRole vivo:ResearcherRole)
#    }
    #+end_example

*** Grant interval
    The grant interval needs to be both start and end_date

    #+name: grant_interval
    #+begin_src sparql :tangle no :noweb yes
      {
        select ?g ?start_date ?start_date_precision ?end_date ?end_date_precision
        WHERE {
          <<grant_record>>
          ?record :native/:field ?s;
                  :native/:field ?e;
                  .

          ?s :name "start-date";
             :type "date";
             :date ?s_date;
             .
          ?s_date :year ?syear.

          BIND(vivo:yearPrecision AS ?syear_p)
          OPTIONAL {
            ?s_date :month ?sm_raw.
            BIND(concat("-",IF(strlen(?sm_raw) = 1,
                               CONCAT("0", ?sm_raw), ?sm_raw)) AS ?smonth)
            BIND(vivo:yearMonthPrecision AS ?smonth_p)
            OPTIONAL {
              ?s_date :day ?sd_raw.
              BIND(concat("-",IF(strlen(?sd_raw) =1,
                                 CONCAT("0", ?sd_raw), ?sd_raw)) AS ?sday)
              BIND(vivo:yearMonthDayPrecision AS ?sday_p)
            }
          }
          BIND(CONCAT(?syear, COALESCE(?smonth, ""), COALESCE(?sday, "")) AS ?start_date)
          BIND(coalesce(?sday_p,?smonth_p,?syear_p) as ?start_date_precision)

          ?e :name "end-date";
             :type "date";
             :date ?e_date;
             .
          ?e_date :year ?eyear.

          BIND(vivo:yearPrecision AS ?eyear_p)
          OPTIONAL {
            ?e_date :month ?em_raw.
            BIND(concat("-",IF(strlen(?em_raw) = 1,
                               CONCAT("0", ?em_raw), ?em_raw)) AS ?emonth)
            BIND(vivo:yearMonthPrecision AS ?emonth_p)
            OPTIONAL {
              ?e_date :day ?ed_raw.
              BIND(concat("-",IF(strlen(?ed_raw) =1,
                                 CONCAT("0", ?ed_raw), ?ed_raw)) AS ?eday)
              BIND(vivo:yearMonthDayPrecision AS ?eday_p)
            }
          }
          BIND(CONCAT(?eyear, COALESCE(?emonth, ""), COALESCE(?eday, "")) AS ?end_date)
          BIND(coalesce(?eday_p,?emonth_p,?eyear_p) as ?end_date_precision)

        }
      }
    #+end_src

*** Complete Grant Query
 #+name: grant
 #+begin_src sparql :noweb yes :tangle grant_role/construct.rq :url http://localhost:3030/jeisen/sparql :format raw :wrap _SRC ttl
   <<prefixes>>
   construct {
     ?grant_role a ucdlib:GrantRole, ?role;
                   ucdlib:favorite ?favorite;
     ucdlib:is-visible ?visible;
     vivo:relates ?grant,?expert;
     obo:RO_0000052 ?expert;
     .

     ?grant a vivo:Grant,?grant_type;
            ?field_predicate ?field_text;
            ?field_predicate ?field_money;
            vivo:assignedBy ?funder;
            vivo:dateTimeInterval ?interval;
            vivo:relatedBy ?grant_role,?labeled_only_pi_role,?labeled_only_co_pi_role;
            .

     ?labeled_only_pi_role a vivo:PrincipalInvestigatorRole;
                           vivo:relates ?labeled_only_pi,?grant;
                           .

     ?labeled_only_pi a vivo:Person;
                      rdfs:label ?labeled_only_pi_name;
                      .

     ?labeled_only_co_pi_role a vivo:CoPrincipalInvestigatorRole;
                              vivo:relates ?labeled_only_co_pi,?grant;
                              .

     ?labeled_only_co_pi a vivo:Person;
                         rdfs:label ?labeled_only_co_pi_name;
                         .

     ?funder a vivo:FundingOrganization;
             rdfs:label ?funder_label;
             .

     ?interval
     vivo:start ?sd;
     vivo:end ?ed;
     .

     ?sd
     vivo:dateTimePrecision ?start_date_precision;
     vivo:dateTime ?start_date;
     .
     ?ed
     vivo:dateTimePrecision ?end_date_precision;
     vivo:dateTime ?end_date;
     .
   }
   WHERE {
     graph cdl: {
       ?RELATIONSHIP__
       :is-visible ?visible_str;
       :type ?cdl_type;
       :related ?g;
       :related ?user;
       .

       OPTIONAL {
         <<grant_roles>>
       }

       OPTIONAL {
         ?RELATIONSHIP__ :is-favourite "true".
         bind(true as ?favorite)
       }

       ?user :category "user";
             :is-public "true";
             :username ?username;
             .

       <<grant_record>>
       ?record :native/:field ?field.

       VALUES(?field_name ?field_type ?field_predicate) {
         ("title" "text" rdfs:label)
         ("amount" "money" vivo:totalAwardAmount)
         ("start-date" "date" vivo:start)
         ("end-date" "date" vivo:end)
         ("funder-reference" "text" vivo:sponsorAwardId)
         ("funding-type" "special" ucdlib:none)
         ("funder-name" "special" ucdlib:none)
         ("c-pi" "special" ucdlib:none)
         ("c-co-pis" "special" ucdlib:none)
       }

       OPTIONAL {
         ?field :name ?field_name;
                :type "text";
                :type ?field_type ;
         :text ?field_text ;
         .
       }
       OPTIONAL {
         ?field :name ?field_name;
                :type "money";
                :type ?field_type;
                :money/:field-value ?field_money;
                .
       }

       # PI is expanded to a relationship / Not optional
       OPTIONAL {
         ?field :name "c-pi";
                :type "text";
                :text ?labeled_only_pi_name;
                .
       }

       # Co-PIs are optional
       OPTIONAL {
         ?field :name "c-co-pis";
                :people/:person [ list:index(?pos ?elem) ] .
         ?elem :last-name ?labeled_only_co_pi_name_last .
         OPTIONAL {
           ?elem :first-names ?labeled_only_co_pi_name_first .
         }
       }

       # Funding type is a special case
       OPTIONAL {
         values (?grant_type ?funding_type_label) {
           (ucdlib:Grant_AcademicSupport "Academic Support" )
           (ucdlib:Grant_Default "Default" )
           (ucdlib:Grant_Instruction "Instruction" )
           (ucdlib:Grant_Research "Research" )
           (ucdlib:Grant_Service "Service / Other" )
           (ucdlib:Grant_Scholarship "Scholarships / Fellowships" )
           (ucdlib:Grant_StudentService "Student Services" )
         }
         ?field :name "funding-type";
                :type "text";
                :text ?funding_type_label;
                .
       }

       OPTIONAL {
         ?field :name "funder-name";
                :type "text";
                :text ?funder_label;
                .
       }

       <<grant_interval>>
     }
     bind(uri(replace(str(?RELATIONSHIP__),str(cdl:),"ark:/87287/d7mh2m/relationship/")) as ?grant_role)
     bind(uri(?grant_id) as ?grant)
     bind(uri(concat(str(expert:),md5(?username))) as ?expert)
     bind(xsd:boolean(?visible_str) as ?visible)
     bind(coalesce(?vivo_role,vivo:ResearcherRole) as ?role)

     bind(uri(concat(str(?grant),'#start_date')) as ?sd)
     bind(uri(concat(str(?grant),'#end_date')) as ?ed)
     bind(uri(concat(str(?grant),'#interval')) as ?interval)
     bind(uri(concat(str(?grant),"#funder")) as ?funder)
     bind(uri(concat(str(?grant),"#pi")) as ?labeled_only_pi)
     bind(uri(concat(str(?grant),"#pi_role")) as ?labeled_only_pi_role)
     bind(concat(?labeled_only_co_pi_name_last,coalesce(concat(', ',?labeled_only_co_pi_name_first),"")) as ?labeled_only_co_pi_name)
     bind(uri(concat(str(?grant),"#co_pi_",md5(?labeled_only_co_pi_name))) as ?labeled_only_co_pi)
     bind(uri(concat(str(?grant),"#co_pi_role_",md5(?labeled_only_co_pi_name))) as ?labeled_only_co_pi_role)
   }
#+end_src

#+RESULTS: grant
#+begin__SRC ttl
HTTP/1.1 404 Not Found
Cache-Control: must-revalidate,no-cache,no-store
Pragma: no-cache
Content-Type: text/plain;charset=utf-8
Content-Length: 21

Error 404: Not Found
#+end__SRC
